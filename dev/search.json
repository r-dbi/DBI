[{"path":"https://dbi.r-dbi.org/dev/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://dbi.r-dbi.org/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to DBI","title":"Contributing to DBI","text":"outlines propose change DBI.","code":""},{"path":"https://dbi.r-dbi.org/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to DBI","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://dbi.r-dbi.org/dev/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to DBI","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://dbi.r-dbi.org/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to DBI","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. Please update NEWS.md.","code":""},{"path":"https://dbi.r-dbi.org/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to DBI","text":"Please note DBI project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://dbi.r-dbi.org/dev/LICENSE.html","id":"gnu-lesser-general-public-license","dir":"","previous_headings":"","what":"GNU LESSER GENERAL PUBLIC LICENSE","title":"NA","text":"Version 2.1, February 1999","code":"Copyright (C) 1991, 1999 Free Software Foundation, Inc. 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA  Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.  [This is the first released version of the Lesser GPL.  It also counts  as the successor of the GNU Library Public License, version 2, hence  the version number 2.1.]"},{"path":"https://dbi.r-dbi.org/dev/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"NA","text":"licenses software designed take away freedom share change . contrast, GNU General Public Licenses intended guarantee freedom share change free software–make sure software free users. license, Lesser General Public License, applies specially designated software packages–typically libraries–Free Software Foundation authors decide use . can use , suggest first think carefully whether license ordinary General Public License better strategy use particular case, based explanations . speak free software, referring freedom use, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish); receive source code can get want ; can change software use pieces new free programs; informed can things. protect rights, need make restrictions forbid distributors deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies library modify . example, distribute copies library, whether gratis fee, must give recipients rights gave . must make sure , , receive can get source code. link code library, must provide complete object files recipients, can relink library making changes library recompiling . must show terms know rights. protect rights two-step method: (1) copyright library, (2) offer license, gives legal permission copy, distribute /modify library. protect distributor, want make clear warranty free library. Also, library modified someone else passed , recipients know original version, original author’s reputation affected problems might introduced others. Finally, software patents pose constant threat existence free program. wish make sure company effectively restrict users free program obtaining restrictive license patent holder. Therefore, insist patent license obtained version library must consistent full freedom use specified license. GNU software, including libraries, covered ordinary GNU General Public License. license, GNU Lesser General Public License, applies certain designated libraries, quite different ordinary General Public License. use license certain libraries order permit linking libraries non-free programs. program linked library, whether statically using shared library, combination two legally speaking combined work, derivative original library. ordinary General Public License therefore permits linking entire combination fits criteria freedom. Lesser General Public License permits lax criteria linking code library. call license “Lesser” General Public License Less protect user’s freedom ordinary General Public License. also provides free software developers Less advantage competing non-free programs. disadvantages reason use ordinary General Public License many libraries. However, Lesser license provides advantages certain special circumstances. example, rare occasions, may special need encourage widest possible use certain library, becomes de-facto standard. achieve , non-free programs must allowed use library. frequent case free library job widely used non-free libraries. case, little gain limiting free library free software , use Lesser General Public License. cases, permission use particular library non-free programs enables greater number people use large body free software. example, permission use GNU C Library non-free programs enables many people use whole GNU operating system, well variant, GNU/Linux operating system. Although Lesser General Public License Less protective users’ freedom, ensure user program linked Library freedom wherewithal run program using modified version Library. precise terms conditions copying, distribution modification follow. Pay close attention difference “work based library” “work uses library”. former contains code derived library, whereas latter must combined library order run.","code":""},{"path":"https://dbi.r-dbi.org/dev/LICENSE.html","id":"terms-and-conditions-for-copying-distribution-and-modification","dir":"","previous_headings":"","what":"TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION","title":"NA","text":"0. License Agreement applies software library program contains notice placed copyright holder authorized party saying may distributed terms Lesser General Public License (also called “License”). licensee addressed “”. “library” means collection software functions /data prepared conveniently linked application programs (use functions data) form executables. “Library”, , refers software library work distributed terms. “work based Library” means either Library derivative work copyright law: say, work containing Library portion , either verbatim modifications /translated straightforwardly another language. (Hereinafter, translation included without limitation term “modification”.) “Source code” work means preferred form work making modifications . library, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation library. Activities copying, distribution modification covered License; outside scope. act running program using Library restricted, output program covered contents constitute work based Library (independent use Library tool writing ). Whether true depends Library program uses Library . 1. may copy distribute verbatim copies Library’s complete source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; distribute copy License along Library. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Library portion , thus forming work based Library, copy distribute modifications work terms Section 1 , provided also meet conditions: ) modified work must software library. b) must cause files modified carry prominent notices stating changed files date change. c) must cause whole work licensed charge third parties terms License. d) facility modified Library refers function table data supplied application program uses facility, argument passed facility invoked, must make good faith effort ensure , event application supply function table, facility still operates, performs whatever part purpose remains meaningful. (example, function library compute square roots purpose entirely well-defined independent application. Therefore, Subsection 2d requires application-supplied function table used function must optional: application supply , square root function must still compute square roots.) requirements apply modified work whole. identifiable sections work derived Library, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Library, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Library. addition, mere aggregation another work based Library Library (work based Library) volume storage distribution medium bring work scope License. 3. may opt apply terms ordinary GNU General Public License instead License given copy Library. , must alter notices refer License, refer ordinary GNU General Public License, version 2, instead License. (newer version version 2 ordinary GNU General Public License appeared, can specify version instead wish.) make change notices. change made given copy, irreversible copy, ordinary GNU General Public License applies subsequent copies derivative works made copy. option useful wish copy part code Library program library. 4. may copy distribute Library (portion derivative , Section 2) object code executable form terms Sections 1 2 provided accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange. distribution object code made offering access copy designated place, offering equivalent access copy source code place satisfies requirement distribute source code, even though third parties compelled copy source along object code. 5. program contains derivative portion Library, designed work Library compiled linked , called “work uses Library”. work, isolation, derivative work Library, therefore falls outside scope License. However, linking “work uses Library” Library creates executable derivative Library (contains portions Library), rather “work uses library”. executable therefore covered License. Section 6 states terms distribution executables. “work uses Library” uses material header file part Library, object code work may derivative work Library even though source code . Whether true especially significant work can linked without Library, work library. threshold true precisely defined law. object file uses numerical parameters, data structure layouts accessors, small macros small inline functions (ten lines less length), use object file unrestricted, regardless whether legally derivative work. (Executables containing object code plus portions Library still fall Section 6.) Otherwise, work derivative Library, may distribute object code work terms Section 6. executables containing work also fall Section 6, whether linked directly Library . 6. exception Sections , may also combine link “work uses Library” Library produce work containing portions Library, distribute work terms choice, provided terms permit modification work customer’s use reverse engineering debugging modifications. must give prominent notice copy work Library used Library use covered License. must supply copy License. work execution displays copyright notices, must include copyright notice Library among , well reference directing user copy License. Also, must one things: ) Accompany work complete corresponding machine-readable source code Library including whatever changes used work (must distributed Sections 1 2 ); , work executable linked Library, complete machine-readable “work uses Library”, object code /source code, user can modify Library relink produce modified executable containing modified Library. (understood user changes contents definitions files Library necessarily able recompile application use modified definitions.) b) Use suitable shared library mechanism linking Library. suitable mechanism one (1) uses run time copy library already present user’s computer system, rather copying library functions executable, (2) operate properly modified version library, user installs one, long modified version interface-compatible version work made . c) Accompany work written offer, valid least three years, give user materials specified Subsection 6a, , charge cost performing distribution. d) distribution work made offering access copy designated place, offer equivalent access copy specified materials place. e) Verify user already received copy materials already sent user copy. executable, required form “work uses Library” must include data utility programs needed reproducing executable . However, special exception, materials distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. may happen requirement contradicts license restrictions proprietary libraries normally accompany operating system. contradiction means use Library together executable distribute. 7. may place library facilities work based Library side--side single library together library facilities covered License, distribute combined library, provided separate distribution work based Library library facilities otherwise permitted, provided two things: ) Accompany combined library copy work based Library, uncombined library facilities. must distributed terms Sections . b) Give prominent notice combined library fact part work based Library, explaining find accompanying uncombined form work. 8. may copy, modify, sublicense, link , distribute Library except expressly provided License. attempt otherwise copy, modify, sublicense, link , distribute Library void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 9. required accept License, since signed . However, nothing else grants permission modify distribute Library derivative works. actions prohibited law accept License. Therefore, modifying distributing Library (work based Library), indicate acceptance License , terms conditions copying, distributing modifying Library works based . 10. time redistribute Library (work based Library), recipient automatically receives license original licensor copy, distribute, link modify Library subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 11. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Library . example, patent license permit royalty-free redistribution Library receive copies directly indirectly , way satisfy License refrain entirely distribution Library. portion section held invalid unenforceable particular circumstance, balance section intended apply, section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 12. distribution /use Library restricted certain countries either patents copyrighted interfaces, original copyright holder places Library License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 13. Free Software Foundation may publish revised /new versions Lesser General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Library specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Library specify license version number, may choose version ever published Free Software Foundation. 14. wish incorporate parts Library free programs whose distribution conditions incompatible , write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally. WARRANTY 15. LIBRARY LICENSED FREE CHARGE, WARRANTY LIBRARY, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE LIBRARY “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE LIBRARY . LIBRARY PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 16. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE LIBRARY PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE LIBRARY (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE LIBRARY OPERATE SOFTWARE), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-libraries","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Libraries","title":"NA","text":"develop new library, want greatest possible use public, recommend making free software everyone can redistribute change. can permitting redistribution terms (, alternatively, terms ordinary General Public License). apply terms, attach following notices library. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. also get employer (work programmer) school, , sign “copyright disclaimer” library, necessary. sample; alter names: ’s !","code":"one line to give the library's name and an idea of what it does. Copyright (C) year  name of author  This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.  This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more details.  You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA Yoyodyne, Inc., hereby disclaims all copyright interest in the library `Frob' (a library for tweaking knobs) written by James Random Hacker.  signature of Ty Coon, 1 April 1990 Ty Coon, President of Vice"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:version","dir":"Articles","previous_headings":"","what":"Version","title":"A Common Database Interface (DBI)","text":"document describes version 0.1-6 database interface API (application programming interface).","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:intro","dir":"Articles","previous_headings":"","what":"Introduction","title":"A Common Database Interface (DBI)","text":"database interface (DBI) separates connectivity DBMS “front-end” “back-end”. Applications use exposed “front-end” API. facilities communicate specific DBMS (Oracle, PostgreSQL, etc.) provided “device drivers” get invoked automatically S language evaluator. following example illustrates DBI capabilities: (first 2 expressions DBMS-specific – others independent database engine ). Individual DBI drivers need implement features list (indicate optional). Furthermore, drivers may extend core DBI facilities, suggest extensions clearly indicated documented. following elements DBI: set classes methods (Section [sec:DBIClasses]) defines operations possible defined, e.g.: connect/disconnect DBMS create execute statements DBMS extract results/output statements error/exception handling information (meta-data) database objects transaction management (optional) things left explicitly unspecified, e.g., authentication even query language, although hard avoid references SQL relational database management systems (RDBMS). Drivers Drivers collection functions implement functionality defined context specific DBMS, e.g., mSQL, Informix. Data type mappings (Section [sec:data-mappings].) Mappings conversions DBMS data types R/S objects. drivers implement “basic” primitives (see ), may chose add user-defined conversion function handle generic objects (e.g., factors, ordered factors, time series, arrays, images). Utilities (Section [sec:utilities].) facilities help details mapping identifiers S DBMS (e.g., _ illegal R/S names, . used constructing compound SQL identifiers), etc.","code":"## Choose the proper DBMS driver and connect to the server  drv <- dbDriver(\"ODBC\") con <- dbConnect(drv, \"dsn\", \"usr\", \"pwd\")  ## The interface can work at a higher level importing tables ## as data.frames and exporting data.frames as DBMS tables.  dbListTables(con) dbListFields(con, \"quakes\") if(dbExistsTable(con, \"new_results\"))    dbRemoveTable(con, \"new_results\") dbWriteTable(con, \"new_results\", new.output)  ## The interface allows lower-level interface to the DBMS res <- dbSendQuery(con, paste(             \"SELECT g.id, g.mirror, g.diam, e.voltage\",             \"FROM geom_table as g, elec_measures as e\",             \"WHERE g.id = e.id and g.mirrortype = 'inside'\",             \"ORDER BY g.diam\")) out <- NULL while(!dbHasCompleted(res)){    chunk <- fetch(res, n = 10000)    out <- c(out, doit(chunk)) }  ## Free up resources dbClearResult(res) dbDisconnect(con) dbUnloadDriver(drv)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:DBIClasses","dir":"Articles","previous_headings":"","what":"DBI Classes and Methods","title":"A Common Database Interface (DBI)","text":"following main DBI classes. need extended individual database back-ends (Sybase, Oracle, etc.) Individual drivers need provide methods generic functions listed (methods optional indicated). Note: Although R releases prior 1.4 formal concept classes, use syntax S Version 4 classes methods (available R releases 1.4 later library methods) convey precisely DBI class hierarchy, methods, intended behavior. DBI classes DBIObject, DBIDriver, DBIConnection DBIResult. virtual classes. Drivers define new classes extend , e.g., PgSQLDriver, PgSQLConnection, . Class hierarchy DBI. top two layers comprised virtual classes lower layer represents set driver-specific implementation classes provide functionality defined virtual classes . DBIObject: Virtual class1 groups DBI classes. DBIDriver: Virtual class groups DBMS drivers. DBMS driver extends class. Typically generator functions instantiate actual driver objects, e.g., PgSQL, HDF5, BerkeleyDB. DBIConnection: Virtual class encapsulates connections DBMS. DBIResult: Virtual class describes result DBMS query statement. [Q: distinguish simple result DBMS statements e.g., delete DBMS queries (.e., generate data).] methods format, print, show, dbGetInfo, summary defined (implemented DBI package) DBIObject base class, thus available implementations; individual drivers, however, free override see fit. format(x, ...): produces concise character representation (label) DBIObject x. print(x, ...)/show(x): prints one-line identification object x. summary(object, ...): produces concise description object. default method DBIObject simply invokes dbGetInfo(dbObj) prints name-value pairs one per line. Individual implementations may tailor appropriately. dbGetInfo(dbObj, ...): extracts information (meta-data) relevant DBIObject dbObj. may return list key/value pairs, individual meta-data supplied call, NULL requested meta-data available. Hint: Driver implementations may choose allow argument specify individual meta-data, e.g., dbGetInfo(drv, = max.connections). next sub-sections describe detail classes methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:DBIObject","dir":"Articles","previous_headings":"DBI Classes and Methods","what":"Class DBIObject","title":"A Common Database Interface (DBI)","text":"class simply groups DBI classes, thus extend .","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:DBIDriver","dir":"Articles","previous_headings":"DBI Classes and Methods","what":"Class DBIDriver","title":"A Common Database Interface (DBI)","text":"class identifies database management system. needs extended individual back-ends (Oracle, PostgreSQL, etc.) DBI provides generator dbDriver(driverName) simply invokes function driverName, turn instantiates corresponding driver object. DBIDriver class defines following methods: driverName: [meth:driverName] initializes driver code. name driverName refers actual generator function DBMS, e.g., RPgSQL, RODBC, HDF5. driver instance object used dbConnect (see page ) opening one possibly connections one DBMS. dbListConnections(drv, ...): list current connections handled drv driver. May NULL open connections. Drivers support multiple connections may return one open connection. dbGetInfo(dbObj, ...): returns list name-value pairs information driver. Hint: Useful entries include name: driver name (e.g., RODBC, RPgSQL); driver.version: version driver; DBI.version: version DBI driver implements, e.g., 0.1-2; client.version: client DBMS libraries (e.g., version libpq library case RPgSQL); max.connections: maximum number simultaneous connections; plus relevant information implementation, instance, driver handles upper/lower case identifiers. dbUnloadDriver(driverName) (optional): frees resources (local remote) used driver. Returns logical indicate succeeded .","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:DBIConnection","dir":"Articles","previous_headings":"DBI Classes and Methods","what":"Class DBIConnection","title":"A Common Database Interface (DBI)","text":"virtual class encapsulates connection DBMS, provides access dynamic queries, result sets, DBMS session management (transactions), etc. Note: Individual drivers free implement single multiple simultaneous connections. methods defined DBIConnection class include: dbConnect(drv, ...): [meth:dbConnect] creates opens connection database implemented driver drv (see Section [sec:DBIDriver]). driver define arguments required, e.g., dbname dsn database name, user, password. returns object extends DBIConnection driver-specific manner (e.g., MySQL implementation create object class MySQLConnection extends DBIConnection). dbDisconnect(conn, ...): closes connection, discards pending work, frees resources (e.g., memory, sockets). Returns logical indicating whether succeeded . dbSendQuery(conn, statement, ...): submits one statement DBMS. returns DBIResult object. object needed fetching data case statement generates output (see fetch page ), may used querying state operation; see dbGetInfo meta-data methods page . dbGetQuery(conn, statement, ...): submit, execute, extract output one operation. resulting object may data.frame statement generates output. Otherwise return value logical indicating whether query succeeded . dbGetException(conn, ...): returns list elements errNum errMsg status last DBMS statement sent given connection (information may also provided dbGetInfo meta-data function conn object. Hint: ANSI SQL-92 defines status code status message return members list. dbGetInfo(dbObj, ...): returns list name-value pairs describing state connection; may return one meta-data, actual driver method allows specify individual pieces meta-data (e.g., maximum number open results/cursors). Hint: Useful entries include dbname: name database use; db.version: DBMS server version (e.g., “Oracle 8.1.7 Solaris”; host: host database server resides; user: user name; password: password (safe?); plus arguments related connection (e.g., thread id, socket TCP connection type). dbListResults(conn, ...): list DBIResult objects currently active connection conn. May NULL result set active conn. Drivers implement one result set per connection return one object (need wrap list). Note: following convenience methods simplify import/export (mainly) data.frames. first five methods implement core methods needed attach remote DBMS S search path. (details, see Chambers (1991, 1998).) Hint: relational DBMS methods may easily implemented using core DBI methods dbConnect, dbSendQuery, fetch, due SQL reflectance (.e., one easily gets meta-data querying appropriate tables RDBMS). dbListTables(conn, ...): returns character vector (possibly zero-length) object (table) names available conn connection. dbReadTable(conn, name, ...): imports data stored remotely table name connection conn. Use field row.names row.names attribute output data.frame. Returns data.frame. [Q: spell row.names created? E.g., use field (unique values) row.names? Also, dbReadTable reproduce data.frame exported dbWriteTable?] dbWriteTable(conn, name, value, ...): write object value (perhaps coercing data.frame) remote object name connection conn. Returns logical indicating whether operation succeeded . dbExistsTable(conn, name, ...): remote object name exist conn? Returns logical. dbRemoveTable(conn, name, ...): removes remote object name connection conn. Returns logical indicating whether operation succeeded . dbListFields(conn, name, ...): returns character vector listing field names remote table name connection conn (see dbColumnInfo() extracting data type table). Note: following methods deal transactions stored procedures. functions optional. dbCommit(conn, ...)(optional): commits pending transaction connection returns TRUE FALSE depending whether operation succeeded . dbRollback(conn, ...)(optional): undoes current transaction connection returns TRUE FALSE depending whether operation succeeded . dbCallProc(conn, storedProc, ...)(optional): invokes stored procedure DBMS returns DBIResult object. [Stored procedures part ANSI SQL-92 standard vary substantially one RDBMS another.] Deprecated since 2014: recommended way calling stored procedure now dbGetQuery result set returned dbExecute data manipulation cases return result set.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:DBIResult","dir":"Articles","previous_headings":"DBI Classes and Methods","what":"Class DBIResult","title":"A Common Database Interface (DBI)","text":"virtual class describes result state execution DBMS statement (statement, query non-query). result set res keeps track whether statement produces output R/S, many rows affected operation, many rows fetched (statement query), whether rows fetch, etc. Note: Individual drivers free allow single multiple active results per connection. [Q: distinguish results return data return data?] class DBIResult defines following methods: fetch(res, n, ...): [meth:fetch] fetches next n elements (rows) result set res return data.frame. value n=-1 interpreted “return elements/rows”. dbClearResult(res, ...): flushes pending data frees resources (local remote) used object res sides connection. Returns logical indicating success . dbGetInfo(dbObj, ...): returns name-value list state result set. Hint: Useful entries include statement: character string representation statement executed; rows.affected: number affected records (changed, deleted, inserted, extracted); row.count: number rows fetched far; .completed: statement (query) finished? .select: logical describing whether statement generates output; plus relevant driver-specific meta-data. dbColumnInfo(res, ...): produces data.frame describes output query. data.frame many rows output fields result set, column data.frame describe aspect result set field (field name, type, etc.) Hint: data.frame columns include field.name: DBMS field label; field.type: DBMS field type (implementation-specific); data.type: corresponding R/S data type, e.g., integer; precision/scale: (ODBC terminology), display width number decimal digits, respectively; nullable: whether corresponding field may contain (DBMS) NULL values; plus driver-specific information. dbSetDataMappings(flds, ...)(optional): defines conversion internal DBMS data types R/S classes. expect default mappings (see Section [sec:data-mappings]) far common ones, users need control may specify class generator individual fields result set. [topic needs discussion.] Note: following convenience methods extract information result object (may implemented invoking dbGetInfo appropriate arguments). dbGetStatement(res, ...)(optional): returns DBMS statement (character string) associated result res. dbGetRowsAffected(res, ...)(optional): returns number rows affected executed statement (number records deleted, modified, extracted, etc.) dbHasCompleted(res, ...)(optional): returns logical indicates whether operation completed (e.g., records fetched?). dbGetRowCount(res, ...)(optional): returns number rows fetched far.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:data-mappings","dir":"Articles","previous_headings":"","what":"Data Type Mappings","title":"A Common Database Interface (DBI)","text":"data types supported databases different data types R S, mapping “primitive” types straightforward: many fixed varying length character types mapped R/S character. Fixed-precision (non-IEEE) numbers mapped either doubles (numeric) long (integer). Notice many DBMS follow -called IEEE arithmetic, potential problems /overflows loss precision, given R/S primitive types much identify situations warn application (?). default dates date-time objects mapped character using appropriate TO_CHAR function DBMS (take care locale information). RDBMS support type CURRENCY MONEY mapped numeric (potential round errors). Large objects (character, binary, file, etc.) also need mapped. User-defined functions may specified actual conversion (done inter-systems packages 2). Specifying user-defined conversion functions still needs defined.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:utilities","dir":"Articles","previous_headings":"","what":"Utilities","title":"A Common Database Interface (DBI)","text":"core DBI implementation make available drivers common basic utilities. instance: dbGetDBIVersion: returns version currently attached DBI string. dbDataType(dbObj, obj, ...): returns string (approximately) appropriate data type R/S object obj. DBI can implement following ANSI-92 standard, individual drivers may want/need extend make use DBMS-specific types. make.db.names(dbObj, snames, ...): maps R/S names (identifiers) SQL identifiers replacing illegal characters (.) legal SQL _. SQLKeywords(dbObj, ...): returns character vector SQL keywords (reserved words). default method returns list .SQL92Keywords, drivers update vector DBMS-specific additional reserved words. isSQLKeyword(dbObj, name, ...): element character vector name determine whether SQL keyword, reported generic function SQLKeywords. Returns logical vector parallel input object name.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:open-issues","dir":"Articles","previous_headings":"","what":"Open Issues and Limitations","title":"A Common Database Interface (DBI)","text":"number issues limitations current DBI conscientiously address interest simplicity. list important ones. Non-SQL: realistic attempt encompass non-relational databases, like HDF5, Berkeley DB, etc.? Security: allowing users specify passwords R/S scripts may unacceptable applications. need consider alternatives users store authentication files (perhaps similar ODBC’s odbc.ini) stringent permissions. Exceptions: exception mechanism bit simple, provide information problems stem DBMS interface . instance, /overflow loss precision move numeric data DBMS limited primitives R/S. Asynchronous communication: DBMS support synchronous asynchronous communications, allowing applications submit query proceed database server process query. application notified (may need poll server) query completed. large computations, useful, DBI need specify interrupt server (necessary) plus details. Also, DBMS require applications use threads implement asynchronous communication, something neither R S-Plus currently addresses. SQL scripts: DBI defines execute one SQL statement time, forcing users split SQL scripts individual statements. need mechanism users can submit SQL scripts possibly generate multiple result sets; case may need introduce new methods loop multiple results (similar Python’s nextResultSet). BLOBS/CLOBS: large objects (character binary) present challenges R S-Plus. becoming common store images, sounds, data types binary objects DBMS, can principle quite large. SQL-92 ANSI standard allows 2 gigabytes objects. need carefully plan deal binary objects. Transactions: transaction management fully described. Additional methods: need additional methods? (e.g., dbListDatabases(conn), dbListTableIndices(conn, name), list available drivers?) Bind variables: interface heavily biased towards queries, opposed general purpose database development. particular made attempt define “bind variables”; mechanism contents R/S objects implicitly moved database SQL execution. instance, following embedded SQL statement take vector sampleEmployee iterate elements get result. Perhaps DBI point future implement feature.","code":"/* SQL */   SELECT * from emp_table where emp_id = :sampleEmployee"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-1.html","id":"sec:resources","dir":"Articles","previous_headings":"","what":"Resources","title":"A Common Database Interface (DBI)","text":"idea common interface databases successfully implemented various environments, instance: Java’s Database Connectivity (JDBC) (www.javasoft.com). C Open Database Connectivity (ODBC) (www.unixodbc.org). Python’s Database Application Programming Interface (www.python.org). Perl’s Database Interface (dbi.perl.org).","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"who-this-tutorial-is-for","dir":"Articles","previous_headings":"","what":"Who this tutorial is for","title":"Advanced DBI Usage","text":"tutorial need use richer set SQL features data manipulation queries, parameterized queries queries performed using SQL’s transaction features. See vignette(\"DBI\", package = \"DBI\") basic tutorial covering connecting DBMS executing simple queries.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"how-to-run-more-complex-queries-using-dbi","dir":"Articles","previous_headings":"","what":"How to run more complex queries using DBI","title":"Advanced DBI Usage","text":"dbGetQuery() works calling number functions behind scenes. need control can manually build query, retrieve results selected rate, release resources involved calling functions. functions : dbSendQuery() sends SQL query DBMS returns result object. query limited SELECT statements. want send statements, INSERT, UPDATE, DELETE, etc, use dbSendStatement(). dbFetch() called result object returned dbSendQuery(). also accepts argument specifying number rows returned, e.g. n = 200. want fetch rows, use n = -1. dbClearResult() called finished retrieving data. releases resources associated result object.","code":"library(DBI)  con <- dbConnect(   RMariaDB::MariaDB(),   host = \"relational.fit.cvut.cz\",   port = 3306,   username = \"guest\",   password = \"relational\",   dbname = \"sakila\" )  res <- dbSendQuery(con, \"SELECT * FROM film WHERE rating = 'G'\") df <- dbFetch(res, n = 3) dbClearResult(res)  head(df, 3)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"how-to-read-part-of-a-table-from-a-database","dir":"Articles","previous_headings":"","what":"How to read part of a table from a database","title":"Advanced DBI Usage","text":"dataset large may want fetch limited number rows time. demonstrated , can accomplished using loop function dbHasCompleted() used check ongoing rows, dbFetch() used n = X argument, specifying many rows return iteration. , call dbClearResult() end release resources.","code":"res <- dbSendQuery(con, \"SELECT * FROM film\") while (!dbHasCompleted(res)) {   chunk <- dbFetch(res, n = 300)   print(nrow(chunk)) } dbClearResult(res)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"how-to-use-parameters-safely-in-sql-queries","dir":"Articles","previous_headings":"","what":"How to use parameters (safely) in SQL queries","title":"Advanced DBI Usage","text":"dbSendQuery() can used parameterized SQL queries. DBI supports two ways avoid SQL injection attacks user-supplied parameters: quoting parameterized queries.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"quoting","dir":"Articles","previous_headings":"How to use parameters (safely) in SQL queries","what":"Quoting","title":"Advanced DBI Usage","text":"Quoting parameter values performed using function dbQuoteLiteral(), supports many R data types, including date time.1 cases users may supplying table column names use query data retrieval, names identifiers must also escaped. may DBMS-specific rules escaping identifiers, DBI provides function dbQuoteIdentifier() generate safe string representation. result can using glue::glue_sql(). performs safe quoting variable R statement appearing braces within query string.","code":"safe_id <- dbQuoteIdentifier(con, \"rating\") safe_param <- dbQuoteLiteral(con, \"G\")  query <- paste0(\"SELECT title, \", safe_id, \" FROM film WHERE \", safe_id, \" = \", safe_param) query  res <- dbSendQuery(con, query) dbFetch(res) dbClearResult(res) id <- \"rating\" param <- \"G\" query <- glue::glue_sql(\"SELECT title, {`id`} FROM film WHERE {`id`} = {param}\", .con = con)  df <- dbGetQuery(con, query) head(df, 3)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"parameterized-queries","dir":"Articles","previous_headings":"How to use parameters (safely) in SQL queries","what":"Parameterized queries","title":"Advanced DBI Usage","text":"Rather performing parameter substitution , can push DBMS including placeholders query. Different DBMS use different placeholder schemes, DBI passes SQL expression unchanged. MariaDB uses question mark (?) placeholder expects unnamed list parameter values. DBMS may use named parameters. recommend consulting documentation DBMS using. example, web search “mariadb parameterized queries” leads documentation PREPARE statement mentions: Within statement, “?” characters can used parameter markers indicate data values bound query later execute . Currently list placeholder scheme particular DBMS supports. Placeholders work literal values. parts query, e.g. table column identifiers, still need quoted dbQuoteIdentifier(). single set parameters, params argument dbSendQuery() dbGetQuery() can used. takes list members substituted order placeholders within query. example query using multiple placeholders MariaDB driver. placeholders supplied list values ordered match position placeholders query. wish perform query different sets parameter values, dbBind() used. two ways use dbBind(). Firstly, can used multiple times query. Secondly, dbBind() can used execute statement multiple values . Use list vectors query multiple parameters: Always disconnect database done.","code":"params <- list(\"G\") safe_id <- dbQuoteIdentifier(con, \"rating\")  query <- paste0(\"SELECT * FROM film WHERE \", safe_id, \" = ?\") query  res <- dbSendQuery(con, query, params = params) dbFetch(res, n = 3) dbClearResult(res) q_params <- list(\"G\", 90) query <- \"SELECT title, rating, length FROM film WHERE rating = ? AND length >= ?\"  res <- dbSendQuery(con, query, params = q_params) dbFetch(res, n = 3) dbClearResult(res) res <- dbSendQuery(con, \"SELECT * FROM film WHERE rating = ?\") dbBind(res, list(\"G\")) dbFetch(res, n = 3) dbBind(res, list(\"PG\")) dbFetch(res, n = 3) dbClearResult(res) res <- dbSendQuery(con, \"SELECT * FROM film WHERE rating = ?\") dbBind(res, list(c(\"G\", \"PG\"))) dbFetch(res, n = 3) dbClearResult(res) q_params <- list(c(\"G\", \"PG\"), c(90, 120)) query <- \"SELECT title, rating, length FROM film WHERE rating = ? AND length >= ?\"  res <- dbSendQuery(con, query, params = q_params) dbFetch(res, n = 3) dbClearResult(res) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"sql-data-manipulation---update-delete-and-friends","dir":"Articles","previous_headings":"","what":"SQL data manipulation - UPDATE, DELETE and friends","title":"Advanced DBI Usage","text":"SQL queries affect underlying database, UPDATE, DELETE, INSERT , DROP TABLE, DBI provides two functions. dbExecute() passes SQL statement DBMS execution returns number rows affected. dbSendStatement() performs manner, returns result object. Call dbGetRowsAffected() result object get count affected rows. need call dbClearResult() result object afterwards release resources. actuality, dbExecute() convenience function calls dbSendStatement(), dbGetRowsAffected(), dbClearResult(). can use functions need control query process. subsequent examples use -memory SQL database provided RSQLite::SQLite(), remote database used examples allow writing. forget disconnect database end.","code":"library(DBI) con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cars\", head(cars, 3))  dbExecute(   con,   \"INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)\" )  rs <- dbSendStatement(   con,   \"INSERT INTO cars (speed, dist) VALUES (4, 4), (5, 5), (6, 6)\" ) dbGetRowsAffected(rs) dbClearResult(rs)  dbReadTable(con, \"cars\") dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"sql-transactions-with-dbi","dir":"Articles","previous_headings":"","what":"SQL transactions with DBI","title":"Advanced DBI Usage","text":"DBI allows group multiple queries single atomic transaction. Transactions initiated dbBegin() either made persistent dbCommit() undone dbRollback(). example updates two tables ensures either tables updated, changes persisted database error thrown. withdrawing 300 credits, cash increased account decreased amount. transaction ensures either operations succeed, change occurs. can roll back changes manually necessary. forget call dbRollback() case error, otherwise transaction remains open indefinitely. dbWithTransaction() simplifies using transactions. Pass connection code want run transaction. execute code call dbCommit() success call dbRollback() error thrown. usual, forget disconnect database done.","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cash\", data.frame(amount = 100)) dbWriteTable(con, \"account\", data.frame(amount = 2000))  withdraw <- function(amount) {   # All operations must be carried out as logical unit:   dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(amount))   dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(amount)) }  withdraw_transacted <- function(amount) {   # Ensure atomicity   dbBegin(con)    # Perform operation   withdraw(amount)    # Persist results   dbCommit(con) }  withdraw_transacted(300) dbReadTable(con, \"cash\") dbReadTable(con, \"account\") withdraw_if_funds <- function(amount) {   dbBegin(con)   withdraw(amount)   # Rolling back after detecting negative value on account:   if (dbReadTable(con, \"account\")$amount >= 0) {     dbCommit(con)     TRUE   } else {     message(\"Insufficient funds\")     dbRollback(con)     FALSE   } }  withdraw_if_funds(5000) dbReadTable(con, \"cash\") dbReadTable(con, \"account\") withdraw_safely <- function(amount) {   dbWithTransaction(con, {     withdraw(amount)     if (dbReadTable(con, \"account\")$amount < 0) {       stop(\"Error: insufficient funds\", call. = FALSE)     }   }) }  withdraw_safely(5000) dbReadTable(con, \"cash\") dbReadTable(con, \"account\") dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-advanced.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Advanced DBI Usage","text":"concludes major features DBI. details library functions covered tutorial vignette(\"DBI\", package = \"DBI\") introductory tutorial see DBI specification vignette(\"spec\", package = \"DBI\"). data manipulation library works higher level abstraction, check dplyr. grammar data manipulation can work local dataframes remote databases uses DBI hood.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"who-this-tutorial-is-for","dir":"Articles","previous_headings":"","what":"Who this tutorial is for","title":"Using DBI with Arrow","text":"tutorial want leverage Apache Arrow accessing manipulating data databases. See vignette(\"DBI\", package = \"DBI\") vignette(\"DBI\", package = \"DBI-advanced\") tutorials accessing data using R’s data frames instead Arrow’s structures.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"rationale","dir":"Articles","previous_headings":"","what":"Rationale","title":"Using DBI with Arrow","text":"Apache Arrow cross-language development platform -memory analytics. suitable large huge data, also --memory data exchange format, good support data types used SQL databases new extension points allow backends (currently DuckDB adbc) make use data exchange format faster data retrieval loading, avoiding serialization cases better support reading summarizing data database larger memory better type fidelity workflows centered around Arrow fundamental data structure: arrow::RecordBatchReader","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"new-classes-and-generics","dir":"Articles","previous_headings":"","what":"New classes and generics","title":"Using DBI with Arrow","text":"Zero chance interfering existing DBI backends Fully functional fallback implementation existing DBI backends Requires {arrow} R package New generics: dbReadTableArrow() dbCreateTableArrow() dbAppendTableArrow() dbGetQueryArrow() dbSendQueryArrow() dbFetchArrow() dbFetchArrowChunk() dbWriteTableArrow() New classes: DBIResultArrow DBIResultArrowDefault","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"prepare","dir":"Articles","previous_headings":"","what":"Prepare","title":"Using DBI with Arrow","text":"","code":"library(DBI)  con <- dbConnect(RSQLite::SQLite())  data <- data.frame(   a = 1:3,   b = 4.5,   c = \"five\" )  dbWriteTable(con, \"tbl\", data)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"read-all-rows-from-a-table","dir":"Articles","previous_headings":"","what":"Read all rows from a table","title":"Using DBI with Arrow","text":"","code":"dbReadTableArrow(con, \"tbl\") ## <nanoarrow_array_stream struct<a: int32, b: double, c: string>> ##  $ get_schema:function ()   ##  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   ##  $ release   :function () as.data.frame(dbReadTableArrow(con, \"tbl\")) ##   a   b    c ## 1 1 4.5 five ## 2 2 4.5 five ## 3 3 4.5 five"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"run-queries","dir":"Articles","previous_headings":"","what":"Run queries","title":"Using DBI with Arrow","text":"","code":"stream <- dbGetQueryArrow(con, \"SELECT COUNT(*) FROM tbl WHERE a < 3\") stream ## <nanoarrow_array_stream struct<COUNT(*): int32>> ##  $ get_schema:function ()   ##  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   ##  $ release   :function () as.data.frame(stream) ##   COUNT(*) ## 1        2"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"process-data-piecemeal","dir":"Articles","previous_headings":"","what":"Process data piecemeal","title":"Using DBI with Arrow","text":"","code":"stream <- dbGetQueryArrow(con, \"SELECT * FROM tbl WHERE a < 3\") stream ## <nanoarrow_array_stream struct<a: int32, b: double, c: string>> ##  $ get_schema:function ()   ##  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   ##  $ release   :function () stream$get_next() ## <nanoarrow_array struct[2]> ##  $ length    : int 2 ##  $ null_count: int 0 ##  $ offset    : int 0 ##  $ buffers   :List of 1 ##   ..$ :<nanoarrow_buffer validity<bool>[0][0 b]> `` ##  $ children  :List of 3 ##   ..$ a:<nanoarrow_array int32[2]> ##   .. ..$ length    : int 2 ##   .. ..$ null_count: int 0 ##   .. ..$ offset    : int 0 ##   .. ..$ buffers   :List of 2 ##   .. .. ..$ :<nanoarrow_buffer validity<bool>[0][0 b]> `` ##   .. .. ..$ :<nanoarrow_buffer data<int32>[2][8 b]> `1 2` ##   .. ..$ dictionary: NULL ##   .. ..$ children  : list() ##   ..$ b:<nanoarrow_array double[2]> ##   .. ..$ length    : int 2 ##   .. ..$ null_count: int 0 ##   .. ..$ offset    : int 0 ##   .. ..$ buffers   :List of 2 ##   .. .. ..$ :<nanoarrow_buffer validity<bool>[0][0 b]> `` ##   .. .. ..$ :<nanoarrow_buffer data<double>[2][16 b]> `4.5 4.5` ##   .. ..$ dictionary: NULL ##   .. ..$ children  : list() ##   ..$ c:<nanoarrow_array string[2]> ##   .. ..$ length    : int 2 ##   .. ..$ null_count: int 0 ##   .. ..$ offset    : int 0 ##   .. ..$ buffers   :List of 3 ##   .. .. ..$ :<nanoarrow_buffer validity<bool>[0][0 b]> `` ##   .. .. ..$ :<nanoarrow_buffer data_offset<int32>[3][12 b]> `0 4 8` ##   .. .. ..$ :<nanoarrow_buffer data<string>[8 b]> `fivefive` ##   .. ..$ dictionary: NULL ##   .. ..$ children  : list() ##  $ dictionary: NULL stream$get_next() ## NULL"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"prepared-queries","dir":"Articles","previous_headings":"","what":"Prepared queries","title":"Using DBI with Arrow","text":"","code":"in_arrow <- nanoarrow::as_nanoarrow_array(data.frame(a = 1:4)) stream <- dbGetQueryArrow(con, \"SELECT $a AS batch, * FROM tbl WHERE a < $a\", param = in_arrow) as.data.frame(stream) ##   batch a   b    c ## 1     2 1 4.5 five ## 2     3 1 4.5 five ## 3     3 2 4.5 five ## 4     4 1 4.5 five ## 5     4 2 4.5 five ## 6     4 3 4.5 five"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"writing-data","dir":"Articles","previous_headings":"","what":"Writing data","title":"Using DBI with Arrow","text":"","code":"stream <- dbGetQueryArrow(con, \"SELECT * FROM tbl WHERE a < 3\") dbWriteTableArrow(con, \"tbl_new\", stream) dbReadTable(con, \"tbl_new\") ##   a   b    c ## 1 1 4.5 five ## 2 2 4.5 five"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"appending-data","dir":"Articles","previous_headings":"","what":"Appending data","title":"Using DBI with Arrow","text":"usual, forget disconnect database done.","code":"stream <- dbGetQueryArrow(con, \"SELECT * FROM tbl WHERE a < 3\") dbCreateTableArrow(con, \"tbl_split\", stream) dbAppendTableArrow(con, \"tbl_split\", stream) ## [1] TRUE stream <- dbGetQueryArrow(con, \"SELECT * FROM tbl WHERE a >= 3\") dbAppendTableArrow(con, \"tbl_split\", stream) ## [1] TRUE dbReadTable(con, \"tbl_split\") ##   a   b    c ## 1 1 4.5 five ## 2 2 4.5 five ## 3 3 4.5 five dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-arrow.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Using DBI with Arrow","text":"concludes major features DBI. details library functions covered tutorial see DBI specification vignette(\"spec\", package = \"DBI\"). See arrow package processing","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:distr","dir":"Articles","previous_headings":"","what":"Computing with Distributed Data","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"data analysts, increasingly faced challenge larger data sources distributed machines locations; data sources reside relational database management systems (RDBMS). relational databases represent mature client-server distributed technology analysts exploiting ’ve done past. relational technology provides well-defined standard, ANSI SQL-92 X/Open CAE Specification: SQL RDA (1994), defining manipulating data highly optimized fashion virtually application. contrast, S Splus provided somewhat limited tools coping challenges larger distributed data sets (Splus provide import function import databases, quite limited terms SQL facilities). R community resourceful developed number good libraries connecting mSQL, MySQL, PostgreSQL, ODBC; library, however, defined interface database engine bit differently. think everybody’s advantage coordinate definition common interface, effort unlike taken Python Perl communities. goal common, seamless access distributed data modest one evolution towards fully distributed computing environment. recognize greater goal distributed computing means fully integrate diverse systems – just databases – truly flexible analysis environment. Good connectivity databases, however, immediate necessity practical terms means help us transition monolithic, self-contained systems computations, data, can carried parallel wide number computers /systems Temple Lang (2000). Issues reliability, security, location transparency, persistence, etc., new us working distributed data may provide gradual change ease ultimate goal full distributed computing.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:rs-dbi","dir":"Articles","previous_headings":"","what":"A Common Interface","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"believe common interface databases can help users easily access data stored RDBMS. common interface describe, uniform way, connect RDBMS, extract meta-data (list available databases, tables, etc.) well uniform way execute SQL statements import output R S. current emphasis querying databases much full low-level interface database development JDBC ODBC, unlike , want approach interface “whole-object” perspective J. M. Chambers (1998) natural R/S Python – instance, fetching fields records simultaneously single object. basic idea split interface front-end consisting classes generic functions users invoke back-end set database-specific classes methods implement actual communication. (well-known pattern software engineering, another good verbatim device-independent graphics R/S graphics functions produce similar output variety different devices, X displays, Postscript, etc.) following verbatim shows front-end: scripts work RDBMS (say, MySQL) replacing first line ","code":"> mgr <- dbManager(\"Oracle\") > con <- dbConnect(mgr, user = \"user\", passwd = \"passwd\") > rs <- dbExecStatement(con,           \"select fld1, fld2, fld3 from MY_TABLE\") > tbls <- fetch(rs, n = 100) > hasCompleted(rs) [1] T > close(rs) > rs <- dbExecStatement(con,           \"select id_name, q25, q50 from liv2\") > res <- fetch(rs) > getRowCount(rs) [1] 73 > close(con) > mgr <- dbManager(\"MySQL\")"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:rs-dbi-classes","dir":"Articles","previous_headings":"A Common Interface","what":"Interface Classes","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"following main RS-DBI classes. need extended individual database back-ends (MySQL, Oracle, etc.) dbManager Virtual class1 extended actual database managers, e.g., Oracle, MySQL, Informix. dbConnection Virtual class captures connection database instance2. dbResult Virtual class describes result SQL statement. dbResultSet Virtual class, extends dbResult fully describe output statements produce output records, .e., SELECT (SELECT-like) SQL statement. classes implement methods show, describe, getInfo: show (print R) prints one-line identification object. describe prints short summary meta-data specified object (like summary R/S). getInfo takes object one classes string specifying meta-data item, returns corresponding information (NULL unavailable). reason implement meta-data getInfo way simplify writing database back-ends. don’t want overwhelm developers drivers (, likely) hundreds methods case JDBC. addition, following methods also implemented: getDatabases lists available databases known dbManager. getTables lists tables database. getTableFields lists fields table database. getTableIndices lists indices defined table database. methods may implemented using appropriate getInfo method . next sections describe detail classes methods.","code":"> mgr <- dbManager(\"MySQL\") > getInfo(mgr, \"version\") > con <- dbConnect(mgr, ...) > getInfo(con, \"type\")"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:dbManager","dir":"Articles","previous_headings":"A Common Interface > Interface Classes","what":"Class dbManager","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"class identifies relational database management system. needs extended individual back-ends (Oracle, PostgreSQL, etc.) dbManager class defines following methods: load initializes driver code. suggest generator, dbManager(driver), automatically load driver. unload releases whatever resources driver using. getVersion returns version RS-DBI currently implemented, plus relevant information implementation RDBMS used.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:dbConnection","dir":"Articles","previous_headings":"A Common Interface > Interface Classes","what":"Class dbConnection","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"virtual class captures connection RDBMS, provides access dynamic SQL, result sets, RDBMS session management (transactions), etc. Note dbManager may may allow multiple simultaneous connections. methods defines include: dbConnect opens connection database dbname. likely arguments include host, user, password. returns object extends dbConnection driver-specific manner (e.g., MySQL implementation creates connection class MySQLConnection extends dbConnection). Note separate steps connecting RDBMS opening database (.e., opening instance). simplicity 2 steps method. user needs open another instance RDBMS, just open new connection. close closes connection discards pending work. dbExecStatement submits one SQL statement. returns dbResult object, case SELECT statement, object also inherits dbResultSet. dbResultSet object needed fetching output rows SELECT statements. result non-SELECT statement (e.g., UPDATE, DELETE, CREATE, ALTER, …) defined number rows affected (seems common among RDBMS). commit commits pending transaction (optional). rollback undoes current transaction (optional). callProc invokes stored procedure RDBMS (tentative). Stored procedures part ANSI SQL-92 standard possibly vary substantially one RDBMS another. instance, Oracle seems fairly decent implementation stored procedures, MySQL currently support . dbExec submit SQL “script” (multiple statements). May implemented looping dbExecStatement. dbNextResultSet running SQL scripts (multiple statements), closes current result set dbConnection, executes next statement returns result set.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:dbResult","dir":"Articles","previous_headings":"A Common Interface > Interface Classes","what":"Class dbResult","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"virtual class describes result SQL statement (statement) state operation. Non-query statements (e.g., CREATE, UPDATE, DELETE) set “completed” state 1, SELECT statements 0. Error conditions set slot negative number. dbResult class defines following methods: getStatement returns SQL statement associated result set. getDBConnection returns dbConnection associated result set. getRowsAffected returns number rows affected operation. hasCompleted operation completed? SELECT’s, instance, completed output rows fetched. getException returns status last SQL statement given connection list two members, status code status description.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:dbResultSet","dir":"Articles","previous_headings":"A Common Interface > Interface Classes","what":"Class dbResultSet","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"virtual class extends dbResult, describes additional information result SELECT statement state operation. completed state set 0 long pending rows fetch. dbResultSet class defines following additional methods: getRowCount returns number rows fetched far. getNullOk returns logical vector many elements fields result set, element describing whether corresponding field accepts NULL values. getFields describes SELECTed fields. description includes field names, RDBMS internal data types, internal length, internal precision scale, null flag (.e., column allows NULL’s), corresponding S classes (can -ridden user-provided classes). current MySQL Oracle implementations define dbResultSet named list following elements: connection: connection object associated result set; statement: string SQL statement processed; description: field description data.frame many rows fields SELECT output, columns specifying name, type, length, precision, scale, Sclass corresponding output field. rowsAffected: number rows affected; rowCount: number rows far fetched; completed: logical value describing whether operation completed . nullOk: logical vector specifying whether corresponding column may take NULL values. methods implemented accessor functions list obvious way. setDataMappings defines conversion internal RDBMS data types R/S classes. expect default mappings far common ones, users need control may specify class generator individual fields result set. (See Section [sec:mappings] details.) close closes result set frees resources R/S RDBMS. fetch extracts next max.rec records (-1 means ).","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:mappings","dir":"Articles","previous_headings":"A Common Interface","what":"Data Type Mappings","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"data types supported databases slightly different data types R S, mapping straightforward: many fixed varying length character types mapped R/S character. Fixed-precision (non-IEEE) numbers mapped either doubles (numeric) long (integer). Dates mapped character using appropriate TO_CHAR function RDBMS (take care locale information). RDBMS support type CURRENCY MONEY mapped numeric. Large objects (character, binary, file, etc.) also need mapped. User-defined functions may specified actual conversion follows: run query (either dbExec dbExecStatement): extract output field definitions replace class generator , say 3rd field, user generator: set new data mapping prior fetching fetch rows store data.frame","code":"> rs <- dbExecStatement(con, \"select whatever-You-need\") > flds <- getFields(rs) > flds[3, \"Sclass\"]            # default mapping [1] \"character\" > flds[3, \"Sclass\"] <- \"myOwnGeneratorFunction\" > setDataMappings(resutlSet, flds) > data <- fetch(resultSet)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:open-issues","dir":"Articles","previous_headings":"A Common Interface","what":"Open Issues","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"may need provide additional utilities, instance convert dates, escape characters quotes slashes query strings, strip excessive blanks character fields, etc. need decide whether provide hooks conversions done C level, post-processing R S. Another issue kind data object output SQL query. Currently MySQL Oracle implementations return data data.frame; data frames slight inconvenience automatically re-label fields according R/S syntax, changing actual RDBMS labels variables; issue non-numeric data coerced factors automatically “drop hat” (someone s-news wrote) also annoying. execution SQL scripts fully described. method executes scripts run individual statements without returning encounters query (SELECT-like) statement. point return one result set. application responsible fetching rows, invoking dbNextResultSet opened dbConnection object repeat dbExec/fetch loop encounters next dbResultSet. . Another (potentially expensive) alternative run statements sequentially return list data.frames, element list storing result statement. Binary objects large objects present challenges R S. becoming common store images, sounds, data types binary objects RDBMS, can principle quite large. SQL-92 ANSI standard allows 2 gigabytes objects. need carefully plan deal binary objects – perhaps tentatively full generality. Large objects fetched repeatedly invoking specified R/S function takes argument chunks specified number raw bytes. case S4 (Splus5.x) RS-DBI implementation can write opened connection user defined reader (can guarantee won’t overflow connection?). case R clear data type binary large objects (BLOB) mapped .","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:limitations","dir":"Articles","previous_headings":"A Common Interface","what":"Limitations","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"limitations current interface definition: allow one SQL statement time, forcing users split SQL scripts individual statements; transaction management fully described; interface heavily biased towards queries, opposed general purpose database development. particular made attempt define “bind variables”; mechanism contents S objects implicitly moved database SQL execution. instance, following embedded SQL statement take vector sampleEmployee iterate elements get result. Perhaps RS-DBI point future implement feature.","code":"/* SQL */   SELECT * from emp_table where emp_id = :sampleEmployee"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"other-approaches","dir":"Articles","previous_headings":"","what":"Other Approaches","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"high-level, front-end description RS-DBI critical aspect interface. Details actually implement interface may change time. approach described document based one back-end driver per RDBMS reasonable, approach – simply felt simpler approach based well-understood self-contained tools (R, S, C API’s) better start. Nevertheless want briefly mention alternatives considered tentatively decided , may quite possibly re-visit near future.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:odbc","dir":"Articles","previous_headings":"Other Approaches","what":"Open Database Connectivity (ODBC)","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"ODBC protocol developed Microsoft allow connectivity among C/C++ applications RDBMS. expect, originally implementations ODBC available Windows environments. various effort create Unix implementation (see Unix ODBC web-site Harvey (1999)). approach looks promising allows us write one back-end, instead one per RDBMS. Since RDBMS already provide ODBC drivers, greatly simplify development. Unfortunately, Unix implementation ODBC mature enough time looked , situation expect change next year . point need re-evaluate make sure ODBC interface penalize interface terms performance, ease use, portability among various Unix versions, etc.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:jdbc","dir":"Articles","previous_headings":"Other Approaches","what":"Java Database Connectivity (JDBC)","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"Another protocol, Java database connectivity, well-done supported just every RDBMS. issue JDBC today neither S R (written C) interfaces cleanly Java. several efforts (quite fairly advanced state) allow S R invoke Java methods. interface widely available Splus5x R need re-visit issue study performance, usability, etc., JDBC common back-end RS-DBI.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:corba","dir":"Articles","previous_headings":"Other Approaches","what":"CORBA and a 3-tier Architecture","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"Yet another approach move interface RDBMS R S altogether separate system server serve proxy R/S databases. communication middle-layer proxy done CORBA Siegel (1996), Java’s RMI, similar technology. design flexible, CORBA facilities R S widely available yet, know whether made available Splus5 users MathSoft. Also, experience technology rather limited. hand, 3-tier architecture seem offer flexibility cope large distributed databases, necessarily relational.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"sec:resources","dir":"Articles","previous_headings":"","what":"Resources","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"latest documentation software RS-DBI available www.omegahat.net (link dead now: https://www.omegahat.net/contrib/RS-DBI/index.html). R community developed interfaces databases: RmSQL interface mSQL database written Torsten Hothorn; RPgSQL interface PostgreSQL written Timothy H. Keitt; RODBC interface ODBC, written Michael Lapsley. (details see R Data Import/Export (2001).) R S-Plus interfaces MySQL follow propose RS-DBI API described ; also, ’s S-Plus interface SOracle James (preparation) Oracle (expect R implementation soon.) idea common interface databases successfully implemented Java’s Database Connectivity (JDBC) (www.javasoft.com), C Open Database Connectivity (ODBC) (www.unixodbc.org), Python’s Database Application Programming Interface (www.python.org), Perl’s Database Interface (www.cpan.org).","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"R/S database interface came suggestions, comments, discussions John M. Chambers Duncan Temple Lang context Omega Project Statistical Computing. Doug Bates Saikat DebRoy ported (greatly improved) first MySQL implementation R.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI-proposal.html","id":"the-s-version-4-definitions","dir":"Articles","previous_headings":"","what":"The S Version 4 Definitions","title":"A Common Interface to Relational Databases from R and S -- A Proposal","text":"following code meant serve detailed description R/S database interface. decided use S4 (instead R S version 3) clean syntax help us describe easily classes methods form RS-DBI, also convey inter-class relationships.","code":"## Define all the classes and methods to be used by an ## implementation of the RS-DataBase Interface.  Mostly, ## these classes are virtual and each driver should extend ## them to provide the actual implementation.  ## Class: dbManager ## This class identifies the DataBase Management System ## (Oracle, MySQL, Informix, PostgreSQL, etc.)  setClass(\"dbManager\", VIRTUAL)  setGeneric(\"load\",    def = function(dbMgr,...)    standardGeneric(\"load\")    ) setGeneric(\"unload\",    def = function(dbMgr,...)    standardGeneric(\"unload\")    ) setGeneric(\"getVersion\",    def = function(dbMgr,...)    standardGeneric(\"getVersion\")    )  ## Class: dbConnections ## This class captures a connection to a database instance.  setClass(\"dbConnection\", VIRTUAL)  setGeneric(\"dbConnection\",    def = function(dbMgr, ...)    standardGeneric(\"dbConnection\")    ) setGeneric(\"dbConnect\",    def = function(dbMgr, ...)    standardGeneric(\"dbConnect\")    ) setGeneric(\"dbExecStatement\",    def = function(con, statement, ...)    standardGeneric(\"dbExecStatement\")    ) setGeneric(\"dbExec\",    def = function(con, statement, ...)    standardGeneric(\"dbExec\")    ) setGeneric(\"getResultSet\",    def = function(con, ..)    standardGeneric(\"getResultSet\")    ) setGeneric(\"commit\",    def = function(con, ...)    standardGeneric(\"commit\")    ) setGeneric(\"rollback\",    def = function(con, ...)    standardGeneric(\"rollback\")    ) setGeneric(\"callProc\",    def = function(con, ...)    standardGeneric(\"callProc\")    ) setMethod(\"close\",    signature = list(con=\"dbConnection\", type=\"missing\"),    def = function(con, type) NULL    )  ## Class: dbResult ## This is a base class for arbitrary results from the RDBMS ## (INSERT, UPDATE, DELETE).  SELECTs (and SELECT-like) ## statements produce \"dbResultSet\" objects, which extend ## dbResult.  setClass(\"dbResult\", VIRTUAL)  setMethod(\"close\",    signature = list(con=\"dbResult\", type=\"missing\"),    def = function(con, type) NULL    )  ## Class: dbResultSet ## Note that we define a resultSet as the result of a ## SELECT  SQL statement.  setClass(\"dbResultSet\", \"dbResult\")  setGeneric(\"fetch\",    def = function(resultSet,n,...)    standardGeneric(\"fetch\")    ) setGeneric(\"hasCompleted\",    def = function(object, ...)    standardGeneric(\"hasCompleted\")    ) setGeneric(\"getException\",    def = function(object, ...)    standardGeneric(\"getException\")    ) setGeneric(\"getDBconnection\",    def = function(object, ...)    standardGeneric(\"getDBconnection\")    ) setGeneric(\"setDataMappings\",    def = function(resultSet, ...)    standardGeneric(\"setDataMappings\")    ) setGeneric(\"getFields\",    def = function(object, table, dbname,  ...)    standardGeneric(\"getFields\")    ) setGeneric(\"getStatement\",    def = function(object, ...)    standardGeneric(\"getStatement\")    ) setGeneric(\"getRowsAffected\",    def = function(object, ...)    standardGeneric(\"getRowsAffected\")    ) setGeneric(\"getRowCount\",    def = function(object, ...)    standardGeneric(\"getRowCount\")    ) setGeneric(\"getNullOk\",    def = function(object, ...)    standardGeneric(\"getNullOk\")    )  ## Meta-data: setGeneric(\"getInfo\",    def = function(object, ...)    standardGeneric(\"getInfo\")    ) setGeneric(\"describe\",    def = function(object, verbose=F, ...)    standardGeneric(\"describe\")    ) setGeneric(\"getCurrentDatabase\",    def = function(object, ...)    standardGeneric(\"getCurrentDatabase\")    ) setGeneric(\"getDatabases\",    def = function(object, ...)    standardGeneric(\"getDatabases\")    ) setGeneric(\"getTables\",    def = function(object, dbname, ...)    standardGeneric(\"getTables\")    ) setGeneric(\"getTableFields\",    def = function(object, table, dbname, ...)    standardGeneric(\"getTableFields\")    ) setGeneric(\"getTableIndices\",    def = function(object, table, dbname, ...)    standardGeneric(\"getTableIndices\")    )"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"who-this-tutorial-is-for","dir":"Articles","previous_headings":"","what":"Who this tutorial is for","title":"Introduction to DBI","text":"tutorial want access manipulate data database may machine different computer internet, found libraries use higher level abstraction, dbplyr, suitable purpose. Depending want achieve, may find useful understanding SQL using DBI. DBI (DataBase Interface) package provides simple, consistent interface R database management systems (DBMS). supported DBMS supported R package implements DBI specification vignette(\"spec\", package = \"DBI\"). DBI currently supports 30 DBMS, including: MySQL, using R-package RMySQL MariaDB, using R-package RMariaDB Postgres, using R-package RPostgres SQLite, using R-package RSQLite complete list supported DBMS visit https://github.com/r-dbi/backends. may need install package specific DBMS. functionality currently supported DBMS’s includes: manage connection database list tables database list column names table read table data frame advanced features, parameterized queries, transactions, see vignette(\"DBI-advanced\", package = \"DBI\").","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"how-to-connect-to-a-database-using-dbi","dir":"Articles","previous_headings":"","what":"How to connect to a database using DBI","title":"Introduction to DBI","text":"following code establishes connection Sakila database hosted Relational Dataset Repository https://relational.fit.cvut.cz/dataset/Sakila, lists tables database, closes connection. database represents fictional movie rental business includes tables describing films, actors, customers, stores, etc.: Connections databases created using dbConnect() function. first argument function driver DBMS connecting . example connecting MariaDB instance, use RMariaDB::MariaDB() driver. arguments depend authentication required DBMS. example host, port, username, password, dbname required. See documentation DBMS driver package using specifics. function dbListTables() takes database connection argument returns character vector table view names database. completing session DBMS, always release connection call dbDisconnect().","code":"library(DBI)  con <- dbConnect(   RMariaDB::MariaDB(),   host = \"relational.fit.cvut.cz\",   port = 3306,   username = \"guest\",   password = \"relational\",   dbname = \"sakila\" )  dbListTables(con) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"secure-password-storage","dir":"Articles","previous_headings":"How to connect to a database using DBI","what":"Secure password storage","title":"Introduction to DBI","text":"example contains password code, avoided databases secured access. One way use credentials securely store system’s credential store query keyring package. code connect database look like :","code":"con <- dbConnect(   RMariaDB::MariaDB(),   host = \"relational.fit.cvut.cz\",   port = 3306,   username = \"guest\",   password = keyring::key_get(\"relational.fit.cvut.cz\", \"guest\"),   dbname = \"sakila\" )"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"how-to-retrieve-column-names-for-a-table","dir":"Articles","previous_headings":"","what":"How to retrieve column names for a table","title":"Introduction to DBI","text":"can list column names table function dbListFields(). takes arguments database connection table name returns character vector column names order.","code":"con <- dbConnect(RMariaDB::MariaDB(), username = \"guest\", password = \"relational\", host = \"relational.fit.cvut.cz\", port = 3306, dbname = \"sakila\") dbListFields(con, \"film\")"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"read-a-table-into-a-data-frame","dir":"Articles","previous_headings":"","what":"Read a table into a data frame","title":"Introduction to DBI","text":"function dbReadTable() reads entire table returns data frame. equivalent SQL query SELECT * <name>. columns returned data frame share names columns table. DBI database backends best coerce data equivalent R data types.","code":"df <- dbReadTable(con, \"film\") head(df, 3)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"read-only-selected-rows-and-columns-into-a-data-frame","dir":"Articles","previous_headings":"","what":"Read only selected rows and columns into a data frame","title":"Introduction to DBI","text":"read subset data table data frame, DBI provides functions run custom SQL queries manage results. small datasets need manage number results returned, function dbGetQuery() takes SQL SELECT query execute returns data frame. basic query specifies columns require (film_id, title description) rows (records) interested . retrieve films released year 2006. also retrieve movies released 2006 rated “G”. Note character strings must quoted. query contained within double quotes, use single quotes around rating. See dbQuoteLiteral() programmatically converting arbitrary R values SQL. covered detail vignette(\"DBI-advanced\", package = \"DBI\"). equivalent operation using dplyr reconstructs SQL query using three functions specify table (tbl()), subset rows (filter()), columns require (select()). Note dplyr takes care quoting. want perform data manipulation queries UPDATEs DELETEs, see dbSendStatement() vignette(\"DBI-advanced\", package = \"DBI\").","code":"df <- dbGetQuery(con, \"SELECT film_id, title, description FROM film WHERE release_year = 2006\") head(df, 3) df <- dbGetQuery(con, \"SELECT film_id, title, description FROM film WHERE release_year = 2006 AND rating = 'G'\") head(df, 3) library(dplyr)  lazy_df <-   tbl(con, \"film\") %>%   filter(release_year == 2006 & rating == \"G\") %>%   select(film_id, title, description) head(lazy_df, 3)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"how-to-end-a-dbms-session","dir":"Articles","previous_headings":"","what":"How to end a DBMS session","title":"Introduction to DBI","text":"finished accessing DBMS, always close connection using dbDisconnect().","code":"dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to DBI","text":"tutorial given basic techniques accessing data supported DBMS. need work databases fit memory, want run complex queries, including parameterized queries, please see vignette(\"DBI-advanced\", package = \"DBI\").","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/DBI.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further Reading","title":"Introduction to DBI","text":"overview working databases R Rstudio.com DBI specification: vignette(\"spec\", package = \"DBI\") List supported DBMS","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"getting-started","dir":"Articles","previous_headings":"","what":"Getting started","title":"Implementing a new backend","text":"Start creating package. ’s call package, following existing pattern RSQLite, RMySQL, RPostgres ROracle make easier people find . example, ’ll call package RKazam. ready--use template package available https://github.com/r-dbi/RKazam/. can start creating new GitHub repository template, copying package code. Rename “Kazam” desired name everywhere. template package already contains dummy implementations classes methods. chose create package manually, make sure include DESCRIPTION: Importing DBI fine, users supposed attach package anyway; preferred method attach DBI use explicit qualification via :: access driver package (needs done ).","code":"Imports:   DBI (>= 0.3.0),   methods Suggests:   DBItest, testthat"},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"Implementing a new backend","text":"testing early stage? testing integral part software development cycle. Test right start, add automated tests go, finish faster (tests automated) maintaining superb code quality (tests also check corner cases might aware ). Don’t worry: test cases difficult impossible satisfy, take long run, can just turn . Take time now head DBItest vignette vignette(\"test\", package = \"DBItest\"). find vast amount ready--use test cases help process implementing new DBI backend. Add custom tests covered DBItest discretion, enhance DBItest file pull request test generic enough useful many DBI backends.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"driver","dir":"Articles","previous_headings":"","what":"Driver","title":"Implementing a new backend","text":"Start making driver class inherits DBIDriver. class doesn’t need anything, ’s just used dispatch generics right method. Users don’t need know , can remove default help listing @keywords internal: driver class important older versions DBI, also provide dummy dbUnloadDriver() method. package needs global setup tear , .onLoad() .onUnload() functions. might also want add show method object prints nicely: Next create Kazam() instantiates class.","code":"#' Driver for Kazam database. #' #' @keywords internal #' @export #' @import DBI #' @import methods setClass(\"KazamDriver\", contains = \"DBIDriver\") #' @export #' @rdname Kazam-class setMethod(\"dbUnloadDriver\", \"KazamDriver\", function(drv, ...) {   TRUE }) setMethod(\"show\", \"KazamDriver\", function(object) {   cat(\"<KazamDriver>\\n\") }) #' @export Kazam <- function() {   new(\"KazamDriver\") }  Kazam() #> <KazamDriver>"},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"connection","dir":"Articles","previous_headings":"","what":"Connection","title":"Implementing a new backend","text":"Next create connection class inherits DBIConnection. store information needed connect database. ’re talking C api, include slot holds external pointer. Now boilerplate way, can start work connection. important method dbConnect() allows connect specified instance database. Note use @rdname Kazam. ensures Kazam() connect method documented together. Replace ... arguments needed connect database. ’ll always need include ... arguments, even don’t use , compatibility generic. likely people first come help, examples show connect database, query . (Obviously examples won’t work yet.) Ideally, include examples can run right away (perhaps relying publicly hosted database), failing surround \\dontrun{} people can least see code. Next, implement show() dbDisconnect() methods.","code":"#' Kazam connection class. #' #' @export #' @keywords internal setClass(\"KazamConnection\",   contains = \"DBIConnection\",   slots = list(     host = \"character\",     username = \"character\",     # and so on     ptr = \"externalptr\"   ) ) #' @param drv An object created by \\code{Kazam()} #' @rdname Kazam #' @export #' @examples #' \\dontrun{ #' db <- dbConnect(RKazam::Kazam()) #' dbWriteTable(db, \"mtcars\", mtcars) #' dbGetQuery(db, \"SELECT * FROM mtcars WHERE cyl == 4\") #' } setMethod(\"dbConnect\", \"KazamDriver\", function(drv, ...) {   # ...    new(\"KazamConnection\", host = host, ...) })"},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Implementing a new backend","text":"Finally, ’re ready implement meat system: fetching results query data frame. First define results class: write dbSendQuery() method. takes connection SQL string arguments, returns result object. ... needed compatibility generic, can add arguments need . Next, implement dbClearResult(), close result set free resources associated : hardest part every DBI package writing dbFetch() method. needs take result set (optionally) number records return, create dataframe. Mapping R’s data types database may require custom implementation dbDataType() method connection class: Next, implement dbHasCompleted() return logical indicating rows remaining fetched. four methods place, can now use default dbGetQuery() send query database, retrieve results available clean . Spend time now making sure works existing database, relax let DBItest package work .","code":"#' Kazam results class. #' #' @keywords internal #' @export setClass(\"KazamResult\",   contains = \"DBIResult\",   slots = list(ptr = \"externalptr\") ) #' Send a query to Kazam. #' #' @export #' @examples #' # This is another good place to put examples setMethod(\"dbSendQuery\", \"KazamConnection\", function(conn, statement, ...) {   # some code   new(\"KazamResult\", ...) }) #' @export setMethod(\"dbClearResult\", \"KazamResult\", function(res, ...) {   # free resources   TRUE }) #' Retrieve records from Kazam query #' @export setMethod(\"dbFetch\", \"KazamResult\", function(res, n = -1, ...) {   ... })  # (optionally)  #' Find the database data type associated with an R object #' @export setMethod(\"dbDataType\", \"KazamConnection\", function(dbObj, obj, ...) {   ... }) #' @export setMethod(\"dbHasCompleted\", \"KazamResult\", function(res, ...) {  })"},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"sql-methods","dir":"Articles","previous_headings":"","what":"SQL methods","title":"Implementing a new backend","text":"’re now home stretch, can make wrapper substantially useful implementing methods wrap around variations SQL across databases: dbQuoteString() dbQuoteIdentifer() used safely quote strings identifiers avoid SQL injection attacks. Note former must vectorized, latter. dbWriteTable() creates database table given R dataframe. ’d recommend using functions prefixed sql package generate SQL. functions still work progress please let know problems. dbReadTable(): simple wrapper around SELECT * table. Use dbQuoteIdentifer() safely quote table name prevent mismatches names allowed R database. dbListTables() dbExistsTable() let determine tables available. provided database’s API, may need generate sql inspects system tables. dbListFields() shows fields available given table. dbRemoveTable() wraps around DROP TABLE. Start SQL::sqlTableDrop(). dbBegin(), dbCommit() dbRollback(): implement three functions provide basic transaction support. functionality currently tested DBItest package.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"metadata-methods","dir":"Articles","previous_headings":"","what":"Metadata methods","title":"Implementing a new backend","text":"lot extra metadata methods result sets (one connection) might want implement. described following. dbIsValid() returns connection result set open (TRUE) closed (FALSE). methods section valid result sets . dbGetStatement() returns issued query character value. dbColumnInfo() lists names types result set’s columns. dbGetRowCount() dbGetRowsAffected() returns number rows returned altered SELECT INSERT/UPDATE query, respectively. dbBind() allows using parametrised queries. Take look sqlInterpolate() sqlParseVariables() SQL engine doesn’t offer native parametrised queries.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/backend.html","id":"full-dbi-compliance","dir":"Articles","previous_headings":"","what":"Full DBI compliance","title":"Implementing a new backend","text":"now, package implement methods defined DBI specification. want walk extra mile, offer read-mode allows users sure valuable data doesn’t get destroyed inadvertently.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"dbi-r-database-interface","dir":"Articles","previous_headings":"","what":"DBI: R Database Interface","title":"DBI specification","text":"DBI defines interface communication R relational database management systems. classes package virtual need extended various R/DBMS implementations (-called DBI backends).","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"definition","dir":"Articles","previous_headings":"DBI: R Database Interface","what":"Definition","title":"DBI specification","text":"DBI backend R package imports DBI methods packages. better worse, names many existing backends start ‘R’, e.g., RSQLite, RMySQL, RSQLServer; backend author adopt convention .","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"dbi-classes-and-methods","dir":"Articles","previous_headings":"DBI: R Database Interface","what":"DBI classes and methods","title":"DBI specification","text":"backend defines three classes, subclasses DBIDriver, DBIConnection, DBIResult. backend provides implementation methods base classes defined implemented DBI. methods defined DBI reexported (package can used without attach DBI), ellipsis ... formals extensibility.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"construction-of-the-dbidriver-object","dir":"Articles","previous_headings":"DBI: R Database Interface","what":"Construction of the DBIDriver object","title":"DBI specification","text":"backend must support creation instance DBIDriver subclass constructor function. default, name package name without leading ‘R’ (exists), e.g., SQLite RSQLite package. However, backend authors may choose different name. constructor must exported, must function callable without arguments. DBI recommends define constructor empty argument list.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples","dir":"Articles","previous_headings":"DBI: R Database Interface","what":"Examples","title":"DBI specification","text":"","code":"RSQLite::SQLite()"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"determine-the-sql-data-type-of-an-object","dir":"Articles","previous_headings":"","what":"Determine the SQL data type of an object","title":"DBI specification","text":"section describes behavior following method:","code":"dbDataType(dbObj, obj, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description","dir":"Articles","previous_headings":"Determine the SQL data type of an object","what":"Description","title":"DBI specification","text":"Returns SQL string describes SQL data type used object. default implementation generic determines SQL type R object according SQL 92 specification, may serve starting point driver implementations. DBI also provides implementation data.frame return character vector giving type column dataframe.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details","dir":"Articles","previous_headings":"Determine the SQL data type of an object","what":"Details","title":"DBI specification","text":"data types supported databases different data types R, mapping primitive types straightforward: many fixed varying length character types mapped character vectors Fixed-precision (non-IEEE) numbers mapped either numeric integer vectors. Notice many DBMS follow IEEE arithmetic, potential problems /overflows loss precision.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value","dir":"Articles","previous_headings":"Determine the SQL data type of an object","what":"Value","title":"DBI specification","text":"dbDataType() returns SQL type corresponds obj argument non-empty character string. data frames, character vector one element per column returned.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes","dir":"Articles","previous_headings":"Determine the SQL data type of an object","what":"Failure modes","title":"DBI specification","text":"error raised invalid values obj argument NULL value.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification","dir":"Articles","previous_headings":"Determine the SQL data type of an object","what":"Specification","title":"DBI specification","text":"backend can override dbDataType() generic driver class. generic expects arbitrary object second argument. query values returned default implementation, run example(dbDataType, package = \"DBI\"). backend needs override generic, must accept basic R data types second argument, namely logical, integer, numeric, character, dates (see Dates), date-time (see DateTimeClasses), difftime. database supports blobs, method also must accept lists raw vectors, blob::blob objects. -objects (.e., wrapped ()) must supported return results unwrapped counterparts. SQL data type factor ordered character. behavior object types specified. data types returned dbDataType() usable SQL statement form \"CREATE TABLE test (...)\".","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-1","dir":"Articles","previous_headings":"Determine the SQL data type of an object","what":"Examples","title":"DBI specification","text":"","code":"dbDataType(ANSI(), 1:5) dbDataType(ANSI(), 1) dbDataType(ANSI(), TRUE) dbDataType(ANSI(), Sys.Date()) dbDataType(ANSI(), Sys.time()) dbDataType(ANSI(), Sys.time() - as.POSIXct(Sys.Date())) dbDataType(ANSI(), c(\"x\", \"abc\")) dbDataType(ANSI(), list(raw(10), raw(20))) dbDataType(ANSI(), I(3))  dbDataType(ANSI(), iris)   con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbDataType(con, 1:5) dbDataType(con, 1) dbDataType(con, TRUE) dbDataType(con, Sys.Date()) dbDataType(con, Sys.time()) dbDataType(con, Sys.time() - as.POSIXct(Sys.Date())) dbDataType(con, c(\"x\", \"abc\")) dbDataType(con, list(raw(10), raw(20))) dbDataType(con, I(3))  dbDataType(con, iris)  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"create-a-connection-to-a-dbms","dir":"Articles","previous_headings":"","what":"Create a connection to a DBMS","title":"DBI specification","text":"section describes behavior following method:","code":"dbConnect(drv, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-1","dir":"Articles","previous_headings":"Create a connection to a DBMS","what":"Description","title":"DBI specification","text":"Connect DBMS going appropriate authentication procedure. implementations may allow multiple connections open, may invoke function repeatedly assigning output different objects. authentication mechanism left unspecified, check documentation individual drivers details. Use dbCanConnect() check connection can established.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-1","dir":"Articles","previous_headings":"Create a connection to a DBMS","what":"Value","title":"DBI specification","text":"dbConnect() returns S4 object inherits DBIConnection. object used communicate database engine. format() method defined connection object. returns string consists single line text.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-1","dir":"Articles","previous_headings":"Create a connection to a DBMS","what":"Specification","title":"DBI specification","text":"DBI recommends using following argument names authentication parameters, NULL default: user user name (default: current user) password password host host name (default: local connection) port port number (default: local connection) dbname name database host, database file name defaults provide reasonable behavior, particular local connection host = NULL. DBMS (e.g., PostgreSQL), different TCP/IP connection localhost. addition, DBI supports bigint argument governs 64-bit integer data returned. following values supported: \"integer\": always return integer, silently overflow \"numeric\": always return numeric, silently round \"character\": always return decimal representation character \"integer64\": return data type can coerced using .integer() (warning overflow), .numeric() .character()","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-2","dir":"Articles","previous_headings":"Create a connection to a DBMS","what":"Examples","title":"DBI specification","text":"","code":"# SQLite only needs a path to the database. (Here, \":memory:\" is a special # path that creates an in-memory database.) Other database drivers # will require more details (like user, password, host, port, etc.) con <- dbConnect(RSQLite::SQLite(), \":memory:\") con  dbListTables(con)  dbDisconnect(con)  # Bad, for subtle reasons: # This code fails when RSQLite isn't loaded yet, # because dbConnect() doesn't know yet about RSQLite. dbListTables(con <- dbConnect(RSQLite::SQLite(), \":memory:\"))"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"disconnect-close-a-connection","dir":"Articles","previous_headings":"","what":"Disconnect (close) a connection","title":"DBI specification","text":"section describes behavior following method:","code":"dbDisconnect(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-2","dir":"Articles","previous_headings":"Disconnect (close) a connection","what":"Description","title":"DBI specification","text":"closes connection, discards pending work, frees resources (e.g., memory, sockets).","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-2","dir":"Articles","previous_headings":"Disconnect (close) a connection","what":"Value","title":"DBI specification","text":"dbDisconnect() returns TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-1","dir":"Articles","previous_headings":"Disconnect (close) a connection","what":"Failure modes","title":"DBI specification","text":"warning issued garbage collection connection released without calling dbDisconnect(), tested automatically. warning issued immediately calling dbDisconnect() already disconnected invalid connection.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-3","dir":"Articles","previous_headings":"Disconnect (close) a connection","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"execute-a-query-on-a-given-database-connection","dir":"Articles","previous_headings":"","what":"Execute a query on a given database connection","title":"DBI specification","text":"section describes behavior following methods:","code":"dbSendQuery(conn, statement, ...)  dbSendQueryArrow(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-3","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Description","title":"DBI specification","text":"dbSendQuery() method submits synchronously executes SQL query database engine. extract records — need use dbFetch() method, must call dbClearResult() finish fetching records need. interactive use, almost always prefer dbGetQuery().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"additional-arguments","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Additional arguments","title":"DBI specification","text":"following arguments part dbSendQuery() generic (improve compatibility across backends) part DBI specification: params (default: NULL) immediate (default: NULL) must provided named arguments. See “Specification” sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-2","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Specification","title":"DBI specification","text":"warnings occur normal conditions. done, DBIResult object must cleared call dbClearResult(). Failure clear result set leads warning connection closed. backend supports one open result set per connection, issuing second query invalidates already open result set raises warning. newly opened result set valid must cleared dbClearResult(). param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-for-the-immediate-argument","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Specification for the immediate argument","title":"DBI specification","text":"immediate argument supports distinguishing “direct” “prepared” APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via “direct” API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed “special” query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-1","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Details","title":"DBI specification","text":"method SELECT queries . backends may support data manipulation queries method compatibility reasons. However, callers strongly encouraged use dbSendStatement() data manipulation statements. query submitted database server DBMS executes , possibly generating vast amounts data. data live driver-specific: drivers may choose leave output server transfer piecemeal R, others may transfer data client – necessarily memory R manages. See individual drivers’ dbSendQuery() documentation details.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-3","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Value","title":"DBI specification","text":"dbSendQuery() returns S4 object inherits DBIResult. result set can used dbFetch() extract records. finished using result, make sure clear dbClearResult().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-data-retrieval-flow","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"The data retrieval flow","title":"DBI specification","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell ’re done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-2","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Failure modes","title":"DBI specification","text":"error raised issuing query closed invalid connection, query non-NA string. error also raised syntax query invalid query parameters given (passing params argument) immediate argument set TRUE.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-4","dir":"Articles","previous_headings":"Execute a query on a given database connection","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(rs) dbClearResult(rs)  # Pass one set of values with the param argument: rs <- dbSendQuery(   con,   \"SELECT * FROM mtcars WHERE cyl = ?\",   params = list(4L) ) dbFetch(rs) dbClearResult(rs)  # Pass multiple sets of values with dbBind(): rs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = ?\") dbBind(rs, list(6L)) dbFetch(rs) dbBind(rs, list(8L)) dbFetch(rs) dbClearResult(rs)  dbDisconnect(con)   # Retrieve data as arrow table con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQueryArrow(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(rs) dbClearResult(rs)  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"fetch-records-from-a-previously-executed-query","dir":"Articles","previous_headings":"","what":"Fetch records from a previously executed query","title":"DBI specification","text":"section describes behavior following methods:","code":"dbFetch(res, n = -1, ...)  dbFetchArrow(res, ...)  dbFetchArrowChunk(res, ...)  fetch(res, n = -1, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-4","dir":"Articles","previous_headings":"Fetch records from a previously executed query","what":"Description","title":"DBI specification","text":"Fetch next n elements (rows) result set return data.frame.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-2","dir":"Articles","previous_headings":"Fetch records from a previously executed query","what":"Details","title":"DBI specification","text":"fetch() provided compatibility older DBI clients - new code strongly encouraged use dbFetch(). default implementation dbFetch() calls fetch() compatible existing code. Modern backends implement dbFetch() .","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-4","dir":"Articles","previous_headings":"Fetch records from a previously executed query","what":"Value","title":"DBI specification","text":"dbFetch() always returns data.frame many rows records fetched many columns fields result set, even result single value one zero rows. Passing n = NA supported returns arbitrary number rows (least one) specified driver, remaining rows result set.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-data-retrieval-flow-1","dir":"Articles","previous_headings":"Fetch records from a previously executed query","what":"The data retrieval flow","title":"DBI specification","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell ’re done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-3","dir":"Articles","previous_headings":"Fetch records from a previously executed query","what":"Failure modes","title":"DBI specification","text":"attempt fetch closed result set raises error. n argument atomic whole number greater equal -1 Inf, error raised, subsequent call dbFetch() proper n argument succeeds. Calling dbFetch() result set data manipulation query created dbSendStatement() can fetched return empty data frame, warning.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-3","dir":"Articles","previous_headings":"Fetch records from a previously executed query","what":"Specification","title":"DBI specification","text":"Fetching multi-row queries one columns default returns entire result. Multi-row queries can also fetched progressively passing whole number (integer numeric) n argument. value Inf n argument supported also returns full result. rows available fetched, result returned full without warning. fewer rows requested returned, fetches return data frame zero rows. zero rows fetched, columns data frame still fully typed. Fetching fewer rows available permitted, warning issued clearing result set. column named row_names treated like column. column types returned data frame depend data returned: integer (coercible integer) integer values -2^31 2^31 - 1, NA SQL NULL values numeric numbers fractional component, NA SQL NULL values logical Boolean values (backends may return integer); NA SQL NULL values character text, NA SQL NULL values lists raw blobs NULL entries SQL NULL values coercible using .Date() dates, NA SQL NULL values (also applies return value SQL function current_date) coercible using hms::as_hms() times, NA SQL NULL values (also applies return value SQL function current_time) coercible using .POSIXct() timestamps, NA SQL NULL values (also applies return value SQL function current_timestamp) dates timestamps supported backend, following R types used: Date dates (also applies return value SQL function current_date) POSIXct timestamps (also applies return value SQL function current_timestamp) R built-type lossless support full range 64-bit larger integers. 64-bit integers returned query, following rules apply: Values returned container support full range valid 64-bit values (integer64 class bit64 package) Coercion numeric always returns number close possible true value Loss precision converting numeric gives warning Conversion character always returns lossless decimal representation data","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-5","dir":"Articles","previous_headings":"Fetch records from a previously executed query","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars)  # Fetch all results rs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(rs) dbClearResult(rs)  # Fetch in chunks rs <- dbSendQuery(con, \"SELECT * FROM mtcars\") while (!dbHasCompleted(rs)) {   chunk <- dbFetch(rs, 10)   print(nrow(chunk)) }  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"clear-a-result-set","dir":"Articles","previous_headings":"","what":"Clear a result set","title":"DBI specification","text":"section describes behavior following method:","code":"dbClearResult(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-5","dir":"Articles","previous_headings":"Clear a result set","what":"Description","title":"DBI specification","text":"Frees resources (local remote) associated result set. step mandatory objects obtained calling dbSendQuery() dbSendStatement().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-5","dir":"Articles","previous_headings":"Clear a result set","what":"Value","title":"DBI specification","text":"dbClearResult() returns TRUE, invisibly, result sets obtained dbSendQuery(), dbSendStatement(), dbSendQueryArrow(),","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-data-retrieval-flow-2","dir":"Articles","previous_headings":"Clear a result set","what":"The data retrieval flow","title":"DBI specification","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell ’re done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-command-execution-flow","dir":"Articles","previous_headings":"Clear a result set","what":"The command execution flow","title":"DBI specification","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-4","dir":"Articles","previous_headings":"Clear a result set","what":"Failure modes","title":"DBI specification","text":"attempt close already closed result set issues warning dbSendQuery(), dbSendStatement(), dbSendQueryArrow(),","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-4","dir":"Articles","previous_headings":"Clear a result set","what":"Specification","title":"DBI specification","text":"dbClearResult() frees resources associated retrieving result query update operation. DBI backend can expect call dbClearResult() dbSendQuery() dbSendStatement() call.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-6","dir":"Articles","previous_headings":"Clear a result set","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  rs <- dbSendQuery(con, \"SELECT 1\") print(dbFetch(rs))  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"bind-values-to-a-parameterizedprepared-statement","dir":"Articles","previous_headings":"","what":"Bind values to a parameterized/prepared statement","title":"DBI specification","text":"section describes behavior following methods:","code":"dbBind(res, params, ...)  dbBindArrow(res, params, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-6","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"Description","title":"DBI specification","text":"parametrized prepared statements, dbSendQuery(), dbSendQueryArrow(), dbSendStatement() functions can called statements contain placeholders values. dbBind() dbBindArrow() functions bind placeholders actual values, intended called result set calling dbFetch() dbFetchArrow(). values passed dbBind() lists data frames, dbBindArrow() stream created nanoarrow::as_nanoarrow_array_stream(). works combinations. dbSendQuery() compatible dbBindArrow(), dbSendQueryArrow() compatible dbBind().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-3","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"Details","title":"DBI specification","text":"DBI supports parametrized (prepared) queries statements via dbBind() dbBindArrow() generics. Parametrized queries different normal queries allow arbitrary number placeholders, later substituted actual values. Parametrized queries (statements) serve two purposes: query can executed different values. DBMS may cache intermediate information query, execution plan, execute faster. Separation query syntax parameters protects SQL injection. placeholder format currently specified DBI; future, uniform placeholder syntax may supported. Consult backend documentation supported formats. automated testing, backend authors specify placeholder syntax placeholder_pattern tweak. Known examples : ⁠?⁠ (positional matching order appearance) RMariaDB RSQLite ⁠\\$1⁠ (positional matching index) RPostgres RSQLite ⁠:name⁠ ⁠\\$name⁠ (named matching) RSQLite","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-6","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"Value","title":"DBI specification","text":"dbBind() returns result set, invisibly, queries issued dbSendQuery() dbSendQueryArrow() also data manipulation statements issued dbSendStatement().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-data-retrieval-flow-3","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"The data retrieval flow","title":"DBI specification","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell ’re done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-data-retrieval-flow-for-arrow-streams","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"The data retrieval flow for Arrow streams","title":"DBI specification","text":"section gives complete overview flow execution queries return tabular data Arrow stream. flow, except repeated calling dbBindArrow() dbBind(), implemented dbGetQueryArrow(), sufficient unless parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQueryArrow() create result set object class DBIResultArrow. Optionally, bind query parameters dbBindArrow() dbBind(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Use dbFetchArrow() get data stream. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-command-execution-flow-1","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"The command execution flow","title":"DBI specification","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-5","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"Failure modes","title":"DBI specification","text":"Calling dbBind() query without parameters raises error. Binding many enough values, parameters wrong names unequal length, also raises error. placeholders query named, parameter values must names (must empty NA), vice versa, otherwise error raised. behavior mixing placeholders different types (particular mixing positional named placeholders) specified. Calling dbBind() result set already cleared dbClearResult() also raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-5","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"Specification","title":"DBI specification","text":"DBI clients execute parametrized statements follows: Call dbSendQuery(), dbSendQueryArrow() dbSendStatement() query statement contains placeholders, store returned DBIResult object variable. Mixing placeholders (particular, named unnamed ones) recommended. good practice register call dbClearResult() via .exit() right calling dbSendQuery() dbSendStatement() (see last enumeration item). dbBind() called, returned result set object following behavior: dbFetch() raises error (dbSendQuery()) dbGetRowCount() returns zero (dbSendQuery()) dbGetRowsAffected() returns integer NA (dbSendStatement()) dbIsValid() returns TRUE dbHasCompleted() returns FALSE Construct list parameters specify actual values placeholders. list must named unnamed, depending kind placeholders used. Named values matched named parameters, unnamed values matched position list parameters. elements list must lengths contain values supported backend; data.frame internally stored list. parameter list passed call dbBind() DBIResult object. Retrieve data number affected rows DBIResult object. queries issued dbSendQuery(), call dbFetch(). statements issued dbSendStatements(), call dbGetRowsAffected(). (Execution begins immediately dbBind() call, statement processed entirely function returns.) Repeat 2. 3. necessary. Close result set via dbClearResult(). elements params argument need scalars, vectors arbitrary length (including length 0) supported. queries, calling dbFetch() binding parameters returns concatenated results, equivalent binding fetching set values connecting via rbind(). data manipulation statements, dbGetRowsAffected() returns total number rows affected binding non-scalar parameters. dbBind() also accepts repeated calls result set queries data manipulation statements, even results fetched calls dbBind(), queries data manipulation statements. placeholders query named, order params argument important. least following data types accepted input (including NA): integer numeric logical Boolean values character (also special characters spaces, newlines, quotes, backslashes) factor (bound character, warning) Date (also stored internally integer) POSIXct timestamps POSIXlt timestamps difftime values (also units seconds value stored integer) lists raw blobs (NULL entries SQL NULL values) objects type blob::blob","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-7","dir":"Articles","previous_headings":"Bind values to a parameterized/prepared statement","what":"Examples","title":"DBI specification","text":"","code":"# Data frame flow: con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"iris\", iris)  # Using the same query for different values iris_result <- dbSendQuery(con, \"SELECT * FROM iris WHERE [Petal.Width] > ?\") dbBind(iris_result, list(2.3)) dbFetch(iris_result) dbBind(iris_result, list(3)) dbFetch(iris_result) dbClearResult(iris_result)  # Executing the same statement with different values at once iris_result <- dbSendStatement(con, \"DELETE FROM iris WHERE [Species] = \\$species\") dbBind(iris_result, list(species = c(\"setosa\", \"versicolor\", \"unknown\"))) dbGetRowsAffected(iris_result) dbClearResult(iris_result)  nrow(dbReadTable(con, \"iris\"))  dbDisconnect(con)    # Arrow flow: con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"iris\", iris)  # Using the same query for different values iris_result <- dbSendQueryArrow(con, \"SELECT * FROM iris WHERE [Petal.Width] > ?\") dbBindArrow(   iris_result,   nanoarrow::as_nanoarrow_array_stream(data.frame(2.3, fix.empty.names = FALSE)) ) as.data.frame(dbFetchArrow(iris_result)) dbBindArrow(   iris_result,   nanoarrow::as_nanoarrow_array_stream(data.frame(3, fix.empty.names = FALSE)) ) as.data.frame(dbFetchArrow(iris_result)) dbClearResult(iris_result)  # Executing the same statement with different values at once iris_result <- dbSendStatement(con, \"DELETE FROM iris WHERE [Species] = \\$species\") dbBindArrow(iris_result, nanoarrow::as_nanoarrow_array_stream(data.frame(   species = c(\"setosa\", \"versicolor\", \"unknown\") ))) dbGetRowsAffected(iris_result) dbClearResult(iris_result)  nrow(dbReadTable(con, \"iris\"))  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"send-query-retrieve-results-and-then-clear-result-set","dir":"Articles","previous_headings":"","what":"Send query, retrieve results and then clear result set","title":"DBI specification","text":"section describes behavior following methods:","code":"dbGetQuery(conn, statement, ...)  dbGetQueryArrow(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-7","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Description","title":"DBI specification","text":"Returns result query data frame. dbGetQuery() comes default implementation (work backends) calls dbSendQuery(), dbFetch(), ensuring result always free-d dbClearResult(). retrieving chunked/paged results passing query parameters, see dbSendQuery(), particular “data retrieval flow” section.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"additional-arguments-1","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Additional arguments","title":"DBI specification","text":"following arguments part dbGetQuery() generic (improve compatibility across backends) part DBI specification: n (default: -1) params (default: NULL) immediate (default: NULL) must provided named arguments. See “Specification” “Value” sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-6","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Specification","title":"DBI specification","text":"column named row_names treated like column. n argument specifies number rows fetched. omitted, fetching multi-row queries one columns returns entire result. value Inf n argument supported also returns full result. rows available fetched (passing large value n), result returned full without warning. zero rows requested, columns data frame still fully typed. Fetching fewer rows available permitted, warning issued. param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-for-the-immediate-argument-1","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Specification for the immediate argument","title":"DBI specification","text":"immediate argument supports distinguishing “direct” “prepared” APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via “direct” API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed “special” query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-4","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Details","title":"DBI specification","text":"method SELECT queries (incl. SQL statements return SELECT-alike result, e. g. execution stored procedure data manipulation queries like ⁠INSERT ... RETURNING ...⁠). execute stored procedure return result set, use dbExecute(). backends may support data manipulation statements method compatibility reasons. However, callers strongly advised use dbExecute() data manipulation statements.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-7","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Value","title":"DBI specification","text":"dbGetQuery() always returns data.frame many rows records fetched many columns fields result set, even result single value one zero rows.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"implementation-notes","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Implementation notes","title":"DBI specification","text":"Subclasses override method provide sort performance optimization.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-6","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Failure modes","title":"DBI specification","text":"error raised issuing query closed invalid connection, syntax query invalid, query non-NA string. n argument atomic whole number greater equal -1 Inf, error raised, subsequent call dbGetQuery() proper n argument succeeds.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-8","dir":"Articles","previous_headings":"Send query, retrieve results and then clear result set","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) dbGetQuery(con, \"SELECT * FROM mtcars\") dbGetQuery(con, \"SELECT * FROM mtcars\", n = 6)  # Pass values using the param argument: # (This query runs eight times, once for each different # parameter. The resulting rows are combined into a single # data frame.) dbGetQuery(   con,   \"SELECT COUNT(*) FROM mtcars WHERE cyl = ?\",   params = list(1:8) )  dbDisconnect(con)   # Retrieve data as arrow table con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) dbGetQueryArrow(con, \"SELECT * FROM mtcars\")  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"execute-a-data-manipulation-statement-on-a-given-database-connection","dir":"Articles","previous_headings":"","what":"Execute a data manipulation statement on a given database connection","title":"DBI specification","text":"section describes behavior following method:","code":"dbSendStatement(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-8","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Description","title":"DBI specification","text":"dbSendStatement() method submits synchronously executes SQL data manipulation statement (e.g., UPDATE, DELETE, ⁠INSERT ⁠, ⁠DROP TABLE⁠, …) database engine. query number affected rows, call dbGetRowsAffected() returned result object. must also call dbClearResult() . interactive use, almost always prefer dbExecute().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"additional-arguments-2","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Additional arguments","title":"DBI specification","text":"following arguments part dbSendStatement() generic (improve compatibility across backends) part DBI specification: params (default: NULL) immediate (default: NULL) must provided named arguments. See “Specification” sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-7","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Specification","title":"DBI specification","text":"warnings occur normal conditions. done, DBIResult object must cleared call dbClearResult(). Failure clear result set leads warning connection closed. backend supports one open result set per connection, issuing second query invalidates already open result set raises warning. newly opened result set valid must cleared dbClearResult(). param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-for-the-immediate-argument-2","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Specification for the immediate argument","title":"DBI specification","text":"immediate argument supports distinguishing “direct” “prepared” APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via “direct” API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed “special” query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-5","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Details","title":"DBI specification","text":"dbSendStatement() comes default implementation simply forwards dbSendQuery(), support backends implement latter.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-8","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Value","title":"DBI specification","text":"dbSendStatement() returns S4 object inherits DBIResult. result set can used dbGetRowsAffected() determine number rows affected query. finished using result, make sure clear dbClearResult().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-command-execution-flow-2","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"The command execution flow","title":"DBI specification","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-7","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Failure modes","title":"DBI specification","text":"error raised issuing statement closed invalid connection, statement non-NA string. error also raised syntax query invalid query parameters given (passing params argument) immediate argument set TRUE.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-9","dir":"Articles","previous_headings":"Execute a data manipulation statement on a given database connection","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cars\", head(cars, 3))  rs <- dbSendStatement(   con,   \"INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)\" ) dbHasCompleted(rs) dbGetRowsAffected(rs) dbClearResult(rs) dbReadTable(con, \"cars\")   # there are now 6 rows  # Pass one set of values directly using the param argument: rs <- dbSendStatement(   con,   \"INSERT INTO cars (speed, dist) VALUES (?, ?)\",   params = list(4L, 5L) ) dbClearResult(rs)  # Pass multiple sets of values using dbBind(): rs <- dbSendStatement(   con,   \"INSERT INTO cars (speed, dist) VALUES (?, ?)\" ) dbBind(rs, list(5:6, 6:7)) dbBind(rs, list(7L, 8L)) dbClearResult(rs) dbReadTable(con, \"cars\")   # there are now 10 rows  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"execute-an-update-statement-query-number-of-rows-affected-and-then-close-result-set","dir":"Articles","previous_headings":"","what":"Execute an update statement, query number of rows affected, and then close result set","title":"DBI specification","text":"section describes behavior following method:","code":"dbExecute(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-9","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Description","title":"DBI specification","text":"Executes statement returns number rows affected. dbExecute() comes default implementation (work backends) calls dbSendStatement(), dbGetRowsAffected(), ensuring result always free-d dbClearResult(). passing query parameters, see dbBind(), particular “command execution flow” section.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"additional-arguments-3","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Additional arguments","title":"DBI specification","text":"following arguments part dbExecute() generic (improve compatibility across backends) part DBI specification: params (default: NULL) immediate (default: NULL) must provided named arguments. See “Specification” sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-8","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Specification","title":"DBI specification","text":"param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-for-the-immediate-argument-3","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Specification for the immediate argument","title":"DBI specification","text":"immediate argument supports distinguishing “direct” “prepared” APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via “direct” API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed “special” query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-6","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Details","title":"DBI specification","text":"can also use dbExecute() call stored procedure performs data manipulation actions return result set. execute stored procedure returns result set, data manipulation query also returns result set ⁠INSERT ... RETURNING ...⁠, use dbGetQuery() instead.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-9","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Value","title":"DBI specification","text":"dbExecute() always returns scalar numeric specifies number rows affected statement.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"implementation-notes-1","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Implementation notes","title":"DBI specification","text":"Subclasses override method provide sort performance optimization.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-8","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Failure modes","title":"DBI specification","text":"error raised issuing statement closed invalid connection, syntax statement invalid, statement non-NA string.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-10","dir":"Articles","previous_headings":"Execute an update statement, query number of rows affected, and then close result set","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cars\", head(cars, 3)) dbReadTable(con, \"cars\")   # there are 3 rows dbExecute(   con,   \"INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)\" ) dbReadTable(con, \"cars\")   # there are now 6 rows  # Pass values using the param argument: dbExecute(   con,   \"INSERT INTO cars (speed, dist) VALUES (?, ?)\",   params = list(4:7, 5:8) ) dbReadTable(con, \"cars\")   # there are now 10 rows  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"quote-literal-strings","dir":"Articles","previous_headings":"","what":"Quote literal strings","title":"DBI specification","text":"section describes behavior following method:","code":"dbQuoteString(conn, x, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-10","dir":"Articles","previous_headings":"Quote literal strings","what":"Description","title":"DBI specification","text":"Call method generate string suitable use query string literal, make sure generate valid SQL protect SQL injection attacks.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-10","dir":"Articles","previous_headings":"Quote literal strings","what":"Value","title":"DBI specification","text":"dbQuoteString() returns object can coerced character, length input. empty character vector function returns length-0 object. passing returned object dbQuoteString() x argument, returned unchanged. Passing objects class SQL also return unchanged. (backends may convenient return SQL objects achieve behavior, required.)","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-9","dir":"Articles","previous_headings":"Quote literal strings","what":"Failure modes","title":"DBI specification","text":"Passing numeric, integer, logical, raw vector, list x argument raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-9","dir":"Articles","previous_headings":"Quote literal strings","what":"Specification","title":"DBI specification","text":"returned expression can used ⁠SELECT ...⁠ query, scalar character x value dbGetQuery(paste0(\"SELECT \", dbQuoteString(x)))[[1]] must identical x, even x contains spaces, tabs, quotes (single double), backticks, newlines (combination) result dbQuoteString() call coerced back character (even repeatedly). x NA, result must merely satisfy .na(). strings \"NA\" \"NULL\" treated specially. NA translated unquoted SQL NULL, query ⁠SELECT * (SELECT 1) ... NULL⁠ returns one row.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-11","dir":"Articles","previous_headings":"Quote literal strings","what":"Examples","title":"DBI specification","text":"","code":"# Quoting ensures that arbitrary input is safe for use in a query name <- \"Robert'); DROP TABLE Students;--\" dbQuoteString(ANSI(), name)  # NAs become NULL dbQuoteString(ANSI(), c(\"x\", NA))  # SQL vectors are always passed through as is var_name <- SQL(\"select\") var_name dbQuoteString(ANSI(), var_name)  # This mechanism is used to prevent double escaping dbQuoteString(ANSI(), dbQuoteString(ANSI(), name))"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"quote-identifiers","dir":"Articles","previous_headings":"","what":"Quote identifiers","title":"DBI specification","text":"section describes behavior following method:","code":"dbQuoteIdentifier(conn, x, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-11","dir":"Articles","previous_headings":"Quote identifiers","what":"Description","title":"DBI specification","text":"Call method generate string suitable use query column table name, make sure generate valid SQL protect SQL injection attacks. inverse operation dbUnquoteIdentifier().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-11","dir":"Articles","previous_headings":"Quote identifiers","what":"Value","title":"DBI specification","text":"dbQuoteIdentifier() returns object can coerced character, length input. empty character vector function returns length-0 object. names input argument preserved output. passing returned object dbQuoteIdentifier() x argument, returned unchanged. Passing objects class SQL also return unchanged. (backends may convenient return SQL objects achieve behavior, required.)","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-10","dir":"Articles","previous_headings":"Quote identifiers","what":"Failure modes","title":"DBI specification","text":"error raised input contains NA, empty string.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-10","dir":"Articles","previous_headings":"Quote identifiers","what":"Specification","title":"DBI specification","text":"Calling dbGetQuery() query format ⁠SELECT 1 ...⁠ returns data frame identifier, unquoted, column name. Quoted identifiers can used table column names SQL queries, particular queries like ⁠SELECT 1 ...⁠ ⁠SELECT * (SELECT 1) ...⁠. method must use quoting mechanism unambiguously different quoting mechanism used strings, query like ⁠SELECT ... (SELECT 1 ...)⁠ throws error column names match. method can quote column names contain special characters space, dot, comma, quotes used mark strings identifiers, database supports . case, checking validity identifier performed executing query, dbQuoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-12","dir":"Articles","previous_headings":"Quote identifiers","what":"Examples","title":"DBI specification","text":"","code":"# Quoting ensures that arbitrary input is safe for use in a query name <- \"Robert'); DROP TABLE Students;--\" dbQuoteIdentifier(ANSI(), name)  # Use Id() to specify other components such as the schema id_name <- Id(schema = \"schema_name\", table = \"table_name\") id_name dbQuoteIdentifier(ANSI(), id_name)  # SQL vectors are always passed through as is var_name <- SQL(\"select\") var_name dbQuoteIdentifier(ANSI(), var_name)  # This mechanism is used to prevent double escaping dbQuoteIdentifier(ANSI(), dbQuoteIdentifier(ANSI(), name))"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"read-database-tables-as-data-frames","dir":"Articles","previous_headings":"","what":"Read database tables as data frames","title":"DBI specification","text":"section describes behavior following method:","code":"dbReadTable(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-12","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Description","title":"DBI specification","text":"Reads database table data frame, optionally converting column row names converting column names valid R identifiers.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"arguments-12","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Arguments","title":"DBI specification","text":"DBIConnection object, returned dbConnect(). table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. “table_name”, call Id() components fully qualified table name, e.g. Id(schema = “my_schema”, table = “table_name”) call SQL() quoted fully qualified table name given verbatim, e.g. SQL(‘“my_schema”.”table_name”’) parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"additional-arguments-4","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Additional arguments","title":"DBI specification","text":"following arguments part dbReadTable() generic (improve compatibility across backends) part DBI specification: row.names (default: FALSE) check.names must provided named arguments. See “Value” section details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-11","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Specification","title":"DBI specification","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbReadTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-7","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Details","title":"DBI specification","text":"function returns data frame. Use dbReadTableArrow() obtain Arrow object.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-12","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Value","title":"DBI specification","text":"dbReadTable() returns data frame contains complete data remote table, effectively result calling dbGetQuery() ⁠SELECT * <name>⁠. empty table returned data frame zero rows. presence rownames depends row.names argument, see sqlColumnToRownames() details: FALSE NULL, returned data frame doesn’t row names. TRUE, column named “row_names” converted row names. NA, column named “row_names” converted row names exists, otherwise translation occurs. string, specifies name column remote table contains row names. default row.names = FALSE. database supports identifiers special characters, columns returned data frame converted valid R identifiers check.names argument TRUE, check.names = FALSE, returned table non-syntactic column names without quotes.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-11","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Failure modes","title":"DBI specification","text":"error raised table exist. error raised row.names TRUE “row_names” column exists, error raised row.names set string corresponding column exists. error raised calling method closed invalid connection. error raised name processed dbQuoteIdentifier() results non-scalar. Unsupported values row.names check.names (non-scalars, unsupported data types, NA check.names) also raise error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-13","dir":"Articles","previous_headings":"Read database tables as data frames","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars[1:10, ]) dbReadTable(con, \"mtcars\")  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"copy-data-frames-to-database-tables","dir":"Articles","previous_headings":"","what":"Copy data frames to database tables","title":"DBI specification","text":"section describes behavior following methods:","code":"dbWriteTable(conn, name, value, ...)  dbWriteTableArrow(conn, name, value, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-13","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Description","title":"DBI specification","text":"Writes, overwrites appends data frame database table, optionally converting row names column specifying SQL data types fields.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"arguments-13","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Arguments","title":"DBI specification","text":"DBIConnection object, returned dbConnect(). table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. “table_name”, call Id() components fully qualified table name, e.g. Id(schema = “my_schema”, table = “table_name”) call SQL() quoted fully qualified table name given verbatim, e.g. SQL(‘“my_schema”.”table_name”’) dbWriteTable(), data.frame (coercible data.frame). dbWriteTableArrow(), object coercible Arrow RecordBatchReader. parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"additional-arguments-5","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Additional arguments","title":"DBI specification","text":"following arguments part dbWriteTable() generic (improve compatibility across backends) part DBI specification: row.names (default: FALSE) overwrite (default: FALSE) append (default: FALSE) field.types (default: NULL) temporary (default: FALSE) must provided named arguments. See “Specification” “Value” sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-12","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Specification","title":"DBI specification","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbWriteTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done value argument must data frame subset columns existing table append = TRUE. order columns matter append = TRUE. overwrite argument TRUE, existing table name overwritten. argument doesn’t change behavior table exist yet. append argument TRUE, rows existing table preserved, new data appended. table doesn’t exist yet, created. temporary argument TRUE, table available second connection gone reconnecting. backends support argument. regular, non-temporary table visible second connection, pre-existing connection, reconnecting database. SQL keywords can used freely table names, column names, data. Quotes, commas, spaces, special characters newlines tabs, can also used data, , database supports non-syntactic identifiers, also table names column names. following data types must supported least, read identically dbReadTable(): integer numeric (behavior Inf NaN specified) logical NA NULL 64-bit values (using \"bigint\" field type); result can converted numeric, may lose precision, converted character vector, gives full decimal representation written another table read unchanged character (UTF-8 native encodings), supporting empty strings non-empty string factor (returned character) list raw (supported database) objects type blob::blob (supported database) date (supported database; returned Date), also dates prior 1970 1900 2038 time (supported database; returned objects inherit difftime) timestamp (supported database; returned POSIXct respecting time zone necessarily preserving input time zone), also timestamps prior 1970 1900 2038 respecting time zone necessarily preserving input time zone) Mixing column types table supported. field.types argument must named character vector one entry column. indicates SQL data type used new column. column missed field.types, type inferred input data dbDataType(). interpretation rownames depends row.names argument, see sqlRownamesToColumn() details: FALSE NULL, row names ignored. TRUE, row names converted column named “row_names”, even input data frame natural row names 1 nrow(...). NA, column named “row_names” created data custom row names, extra column created case natural row names. string, specifies name column remote table contains row names, even input data frame natural row names. default row.names = FALSE.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-8","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Details","title":"DBI specification","text":"function useful want create load table time. Use dbAppendTable() dbAppendTableArrow() appending data existing table, dbCreateTable() dbCreateTableArrow() creating table, dbExistsTable() dbRemoveTable() overwriting tables. DBI standardizes writing data frames ArrowTabular objects. backends might implement methods can consume CSV files data formats. details, see documentation individual methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-13","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Value","title":"DBI specification","text":"dbWriteTable() returns TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-12","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Failure modes","title":"DBI specification","text":"table exists, append overwrite arguments unset, append = TRUE data frame new data different column names, error raised; remote table remains unchanged. error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar. Invalid values additional arguments row.names, overwrite, append, field.types, temporary (non-scalars, unsupported data types, NA, incompatible values, duplicate missing names, incompatible columns) also raise error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-14","dir":"Articles","previous_headings":"Copy data frames to database tables","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars[1:5, ]) dbReadTable(con, \"mtcars\")  dbWriteTable(con, \"mtcars\", mtcars[6:10, ], append = TRUE) dbReadTable(con, \"mtcars\")  dbWriteTable(con, \"mtcars\", mtcars[1:10, ], overwrite = TRUE) dbReadTable(con, \"mtcars\")  # No row names dbWriteTable(con, \"mtcars\", mtcars[1:10, ], overwrite = TRUE, row.names = FALSE) dbReadTable(con, \"mtcars\")"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"list-remote-tables","dir":"Articles","previous_headings":"","what":"List remote tables","title":"DBI specification","text":"section describes behavior following method:","code":"dbListTables(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-14","dir":"Articles","previous_headings":"List remote tables","what":"Description","title":"DBI specification","text":"Returns unquoted names remote tables accessible connection. include views temporary objects, database backends (particular RMariaDB RMySQL) support .","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-14","dir":"Articles","previous_headings":"List remote tables","what":"Value","title":"DBI specification","text":"dbListTables() returns character vector enumerates tables views database. Tables added dbWriteTable() part list. soon table removed database, also removed list database tables. applies temporary tables supported database. returned names suitable quoting dbQuoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-13","dir":"Articles","previous_headings":"List remote tables","what":"Failure modes","title":"DBI specification","text":"error raised calling method closed invalid connection.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-15","dir":"Articles","previous_headings":"List remote tables","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbListTables(con) dbWriteTable(con, \"mtcars\", mtcars) dbListTables(con)  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"does-a-table-exist","dir":"Articles","previous_headings":"","what":"Does a table exist?","title":"DBI specification","text":"section describes behavior following method:","code":"dbExistsTable(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-15","dir":"Articles","previous_headings":"Does a table exist?","what":"Description","title":"DBI specification","text":"Returns table given name exists database.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"arguments-15","dir":"Articles","previous_headings":"Does a table exist?","what":"Arguments","title":"DBI specification","text":"DBIConnection object, returned dbConnect(). table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. “table_name”, call Id() components fully qualified table name, e.g. Id(schema = “my_schema”, table = “table_name”) call SQL() quoted fully qualified table name given verbatim, e.g. SQL(‘“my_schema”.”table_name”’) parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-15","dir":"Articles","previous_headings":"Does a table exist?","what":"Value","title":"DBI specification","text":"dbExistsTable() returns logical scalar, TRUE table view specified name argument exists, FALSE otherwise. includes temporary tables supported database.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-14","dir":"Articles","previous_headings":"Does a table exist?","what":"Failure modes","title":"DBI specification","text":"error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-13","dir":"Articles","previous_headings":"Does a table exist?","what":"Specification","title":"DBI specification","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbExistsTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done tables listed dbListTables(), dbExistsTable() returns TRUE.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-16","dir":"Articles","previous_headings":"Does a table exist?","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbExistsTable(con, \"iris\") dbWriteTable(con, \"iris\", iris) dbExistsTable(con, \"iris\")  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"remove-a-table-from-the-database","dir":"Articles","previous_headings":"","what":"Remove a table from the database","title":"DBI specification","text":"section describes behavior following method:","code":"dbRemoveTable(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-16","dir":"Articles","previous_headings":"Remove a table from the database","what":"Description","title":"DBI specification","text":"Remove remote table (e.g., created dbWriteTable()) database.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"arguments-16","dir":"Articles","previous_headings":"Remove a table from the database","what":"Arguments","title":"DBI specification","text":"DBIConnection object, returned dbConnect(). table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. “table_name”, call Id() components fully qualified table name, e.g. Id(schema = “my_schema”, table = “table_name”) call SQL() quoted fully qualified table name given verbatim, e.g. SQL(‘“my_schema”.”table_name”’) parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"additional-arguments-6","dir":"Articles","previous_headings":"Remove a table from the database","what":"Additional arguments","title":"DBI specification","text":"following arguments part dbRemoveTable() generic (improve compatibility across backends) part DBI specification: temporary (default: FALSE) fail_if_missing (default: TRUE) arguments must provided named arguments. temporary TRUE, call dbRemoveTable() consider temporary tables. backends support argument. particular, permanent tables name left untouched. fail_if_missing FALSE, call dbRemoveTable() succeeds table exist.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-14","dir":"Articles","previous_headings":"Remove a table from the database","what":"Specification","title":"DBI specification","text":"table removed dbRemoveTable() doesn’t appear list tables returned dbListTables(), dbExistsTable() returns FALSE. removal propagates immediately connections database. function can also used remove temporary table. name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbRemoveTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-16","dir":"Articles","previous_headings":"Remove a table from the database","what":"Value","title":"DBI specification","text":"dbRemoveTable() returns TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-15","dir":"Articles","previous_headings":"Remove a table from the database","what":"Failure modes","title":"DBI specification","text":"table exist, error raised. attempt remove view function may result error. error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-17","dir":"Articles","previous_headings":"Remove a table from the database","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbExistsTable(con, \"iris\") dbWriteTable(con, \"iris\", iris) dbExistsTable(con, \"iris\") dbRemoveTable(con, \"iris\") dbExistsTable(con, \"iris\")  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"list-field-names-of-a-remote-table","dir":"Articles","previous_headings":"","what":"List field names of a remote table","title":"DBI specification","text":"section describes behavior following method:","code":"dbListFields(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-17","dir":"Articles","previous_headings":"List field names of a remote table","what":"Description","title":"DBI specification","text":"Returns field names remote table character vector.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"arguments-17","dir":"Articles","previous_headings":"List field names of a remote table","what":"Arguments","title":"DBI specification","text":"DBIConnection object, returned dbConnect(). table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. “table_name”, call Id() components fully qualified table name, e.g. Id(schema = “my_schema”, table = “table_name”) call SQL() quoted fully qualified table name given verbatim, e.g. SQL(‘“my_schema”.”table_name”’) parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-17","dir":"Articles","previous_headings":"List field names of a remote table","what":"Value","title":"DBI specification","text":"dbListFields() returns character vector enumerates fields table correct order. also works temporary tables supported database. returned names suitable quoting dbQuoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-16","dir":"Articles","previous_headings":"List field names of a remote table","what":"Failure modes","title":"DBI specification","text":"table exist, error raised. Invalid types name argument (e.g., character length equal one, numeric) lead error. error also raised calling method closed invalid connection.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-15","dir":"Articles","previous_headings":"List field names of a remote table","what":"Specification","title":"DBI specification","text":"name argument can string return value dbQuoteIdentifier() value table column return value dbListObjects() is_prefix FALSE column named row_names treated like column.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-18","dir":"Articles","previous_headings":"List field names of a remote table","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) dbListFields(con, \"mtcars\")  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"is-this-dbms-object-still-valid","dir":"Articles","previous_headings":"","what":"Is this DBMS object still valid?","title":"DBI specification","text":"section describes behavior following method:","code":"dbIsValid(dbObj, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-18","dir":"Articles","previous_headings":"Is this DBMS object still valid?","what":"Description","title":"DBI specification","text":"generic tests whether database object still valid (.e. hasn’t disconnected cleared).","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-18","dir":"Articles","previous_headings":"Is this DBMS object still valid?","what":"Value","title":"DBI specification","text":"dbIsValid() returns logical scalar, TRUE object specified dbObj valid, FALSE otherwise. DBIConnection object initially valid, becomes invalid disconnecting dbDisconnect(). invalid connection object (e.g., drivers object saved file restored), method also returns FALSE. DBIResult object valid call dbSendQuery(), stays valid even rows fetched; clearing dbClearResult() invalidates . DBIResult object also valid call dbSendStatement(), stays valid querying number rows affected; clearing dbClearResult() invalidates . connection database system dropped (e.g., due connectivity problems, server failure, etc.), dbIsValid() return FALSE. tested automatically.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-19","dir":"Articles","previous_headings":"Is this DBMS object still valid?","what":"Examples","title":"DBI specification","text":"","code":"dbIsValid(RSQLite::SQLite())  con <- dbConnect(RSQLite::SQLite(), \":memory:\") dbIsValid(con)  rs <- dbSendQuery(con, \"SELECT 1\") dbIsValid(rs)  dbClearResult(rs) dbIsValid(rs)  dbDisconnect(con) dbIsValid(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"completion-status","dir":"Articles","previous_headings":"","what":"Completion status","title":"DBI specification","text":"section describes behavior following method:","code":"dbHasCompleted(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-19","dir":"Articles","previous_headings":"Completion status","what":"Description","title":"DBI specification","text":"method returns operation completed. SELECT query completed rows fetched. data manipulation statement always completed.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-19","dir":"Articles","previous_headings":"Completion status","what":"Value","title":"DBI specification","text":"dbHasCompleted() returns logical scalar. query initiated dbSendQuery() non-empty result set, dbHasCompleted() returns FALSE initially TRUE calling dbFetch() without limit. query initiated dbSendStatement(), dbHasCompleted() always returns TRUE.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-data-retrieval-flow-4","dir":"Articles","previous_headings":"Completion status","what":"The data retrieval flow","title":"DBI specification","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell ’re done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-17","dir":"Articles","previous_headings":"Completion status","what":"Failure modes","title":"DBI specification","text":"Attempting query completion status result set cleared dbClearResult() gives error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-16","dir":"Articles","previous_headings":"Completion status","what":"Specification","title":"DBI specification","text":"completion status query guaranteed set FALSE attempting fetch past end entire result. Therefore, query empty result set, initial return value unspecified, result value TRUE trying fetch one row. Similarly, query result set length n, return value unspecified fetching n rows, result value TRUE trying fetch one row.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-20","dir":"Articles","previous_headings":"Completion status","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars\")  dbHasCompleted(rs) ret1 <- dbFetch(rs, 10) dbHasCompleted(rs) ret2 <- dbFetch(rs) dbHasCompleted(rs)  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"get-the-statement-associated-with-a-result-set","dir":"Articles","previous_headings":"","what":"Get the statement associated with a result set","title":"DBI specification","text":"section describes behavior following method:","code":"dbGetStatement(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-20","dir":"Articles","previous_headings":"Get the statement associated with a result set","what":"Description","title":"DBI specification","text":"Returns statement passed dbSendQuery() dbSendStatement().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-20","dir":"Articles","previous_headings":"Get the statement associated with a result set","what":"Value","title":"DBI specification","text":"dbGetStatement() returns string, query used either dbSendQuery() dbSendStatement().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-18","dir":"Articles","previous_headings":"Get the statement associated with a result set","what":"Failure modes","title":"DBI specification","text":"Attempting query statement result set cleared dbClearResult() gives error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-21","dir":"Articles","previous_headings":"Get the statement associated with a result set","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars\") dbGetStatement(rs)  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-number-of-rows-fetched-so-far","dir":"Articles","previous_headings":"","what":"The number of rows fetched so far","title":"DBI specification","text":"section describes behavior following method:","code":"dbGetRowCount(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-21","dir":"Articles","previous_headings":"The number of rows fetched so far","what":"Description","title":"DBI specification","text":"Returns total number rows actually fetched calls dbFetch() result set.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-21","dir":"Articles","previous_headings":"The number of rows fetched so far","what":"Value","title":"DBI specification","text":"dbGetRowCount() returns scalar number (integer numeric), number rows fetched far. calling dbSendQuery(), row count initially zero. call dbFetch() without limit, row count matches total number rows returned. Fetching limited number rows increases number rows number rows returned, even fetching past end result set. queries empty result set, zero returned even fetching. data manipulation statements issued dbSendStatement(), zero returned calling dbFetch().","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-19","dir":"Articles","previous_headings":"The number of rows fetched so far","what":"Failure modes","title":"DBI specification","text":"Attempting get row count result set cleared dbClearResult() gives error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-22","dir":"Articles","previous_headings":"The number of rows fetched so far","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars\")  dbGetRowCount(rs) ret1 <- dbFetch(rs, 10) dbGetRowCount(rs) ret2 <- dbFetch(rs) dbGetRowCount(rs) nrow(ret1) + nrow(ret2)  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-number-of-rows-affected","dir":"Articles","previous_headings":"","what":"The number of rows affected","title":"DBI specification","text":"section describes behavior following method:","code":"dbGetRowsAffected(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-22","dir":"Articles","previous_headings":"The number of rows affected","what":"Description","title":"DBI specification","text":"method returns number rows added, deleted, updated data manipulation statement.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-22","dir":"Articles","previous_headings":"The number of rows affected","what":"Value","title":"DBI specification","text":"dbGetRowsAffected() returns scalar number (integer numeric), number rows affected data manipulation statement issued dbSendStatement(). value available directly call change calling dbFetch(). NA_integer_ NA_numeric_ allowed number rows affected known. queries issued dbSendQuery(), zero returned call dbFetch(). NA values allowed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-command-execution-flow-3","dir":"Articles","previous_headings":"The number of rows affected","what":"The command execution flow","title":"DBI specification","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-20","dir":"Articles","previous_headings":"The number of rows affected","what":"Failure modes","title":"DBI specification","text":"Attempting get rows affected result set cleared dbClearResult() gives error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-23","dir":"Articles","previous_headings":"The number of rows affected","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendStatement(con, \"DELETE FROM mtcars\") dbGetRowsAffected(rs) nrow(mtcars)  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"information-about-result-types","dir":"Articles","previous_headings":"","what":"Information about result types","title":"DBI specification","text":"section describes behavior following method:","code":"dbColumnInfo(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-23","dir":"Articles","previous_headings":"Information about result types","what":"Description","title":"DBI specification","text":"Produces data.frame describes output query. data.frame many rows output fields result set, column data.frame describes aspect result set field (field name, type, etc.)","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-23","dir":"Articles","previous_headings":"Information about result types","what":"Value","title":"DBI specification","text":"dbColumnInfo() returns data frame least two columns \"name\" \"type\" (order) (optional columns start dot). \"name\" \"type\" columns contain names types R columns data frame returned dbFetch(). \"type\" column type character information. compute \"type\" column, instead use dbFetch(res, n = 0) create zero-row data frame initialized correct data types.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"the-data-retrieval-flow-5","dir":"Articles","previous_headings":"Information about result types","what":"The data retrieval flow","title":"DBI specification","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ⁠?⁠ ⁠\\$1⁠, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell ’re done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-21","dir":"Articles","previous_headings":"Information about result types","what":"Failure modes","title":"DBI specification","text":"attempt query columns closed result set raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-17","dir":"Articles","previous_headings":"Information about result types","what":"Specification","title":"DBI specification","text":"column named row_names treated like column. column names always consistent data returned dbFetch(). query returns unnamed columns, non-empty non-NA names assigned. Column names correspond SQL R keywords left unchanged.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-24","dir":"Articles","previous_headings":"Information about result types","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  rs <- dbSendQuery(con, \"SELECT 1 AS a, 2 AS b\") dbColumnInfo(rs) dbFetch(rs)  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"begincommitrollback-sql-transactions","dir":"Articles","previous_headings":"","what":"Begin/commit/rollback SQL transactions","title":"DBI specification","text":"section describes behavior following methods:","code":"dbBegin(conn, ...)  dbCommit(conn, ...)  dbRollback(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-24","dir":"Articles","previous_headings":"Begin/commit/rollback SQL transactions","what":"Description","title":"DBI specification","text":"transaction encapsulates several SQL statements atomic unit. initiated dbBegin() either made persistent dbCommit() undone dbRollback(). case, DBMS guarantees either none statements permanent effect. helps ensuring consistency write operations multiple tables.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-9","dir":"Articles","previous_headings":"Begin/commit/rollback SQL transactions","what":"Details","title":"DBI specification","text":"database engines implement transaction management, case methods implemented specific DBIConnection subclass.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-24","dir":"Articles","previous_headings":"Begin/commit/rollback SQL transactions","what":"Value","title":"DBI specification","text":"dbBegin(), dbCommit() dbRollback() return TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-22","dir":"Articles","previous_headings":"Begin/commit/rollback SQL transactions","what":"Failure modes","title":"DBI specification","text":"implementations expected raise error case failure, tested. way, generics throw error closed invalid connection. addition, call dbCommit() dbRollback() without prior call dbBegin() raises error. Nested transactions supported DBI, attempt call dbBegin() twice yields error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-18","dir":"Articles","previous_headings":"Begin/commit/rollback SQL transactions","what":"Specification","title":"DBI specification","text":"Actual support transactions may vary backends. transaction initiated call dbBegin() committed call dbCommit(). Data written transaction must persist transaction committed. example, record missing transaction started created transaction must exist transaction, also new connection. transaction can also aborted dbRollback(). data written transaction must removed transaction rolled back. example, record missing transaction started created transaction must exist anymore rollback. Disconnection connection open transaction effectively rolls back transaction. data written transaction must removed transaction rolled back. behavior specified arguments passed functions. particular, RSQLite issues named transactions support nesting name argument set. transaction isolation level specified DBI.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-25","dir":"Articles","previous_headings":"Begin/commit/rollback SQL transactions","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cash\", data.frame(amount = 100)) dbWriteTable(con, \"account\", data.frame(amount = 2000))  # All operations are carried out as logical unit: dbBegin(con) withdrawal <- 300 dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal)) dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal)) dbCommit(con)  dbReadTable(con, \"cash\") dbReadTable(con, \"account\")  # Rolling back after detecting negative value on account: dbBegin(con) withdrawal <- 5000 dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal)) dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal)) if (dbReadTable(con, \"account\")\\$amount >= 0) {   dbCommit(con) } else {   dbRollback(con) }  dbReadTable(con, \"cash\") dbReadTable(con, \"account\")  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"self-contained-sql-transactions","dir":"Articles","previous_headings":"","what":"Self-contained SQL transactions","title":"DBI specification","text":"section describes behavior following methods:","code":"dbWithTransaction(conn, code, ...)  dbBreak()"},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"description-25","dir":"Articles","previous_headings":"Self-contained SQL transactions","what":"Description","title":"DBI specification","text":"Given transactions implemented, function allows pass code run transaction. default method dbWithTransaction() calls dbBegin() executing code, dbCommit() successful completion, dbRollback() case error. advantage don’t remember dbBegin() dbCommit() dbRollback() – taken care . special function dbBreak() allows early exit rollback, can called inside dbWithTransaction().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"details-10","dir":"Articles","previous_headings":"Self-contained SQL transactions","what":"Details","title":"DBI specification","text":"DBI implements dbWithTransaction(), backends need override generic implement specialized handling.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"value-25","dir":"Articles","previous_headings":"Self-contained SQL transactions","what":"Value","title":"DBI specification","text":"dbWithTransaction() returns value executed code.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"failure-modes-23","dir":"Articles","previous_headings":"Self-contained SQL transactions","what":"Failure modes","title":"DBI specification","text":"Failure initiate transaction (e.g., connection closed invalid dbBegin() called already) gives error.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"specification-19","dir":"Articles","previous_headings":"Self-contained SQL transactions","what":"Specification","title":"DBI specification","text":"dbWithTransaction() initiates transaction dbBegin(), executes code given code argument, commits transaction dbCommit(). code raises error, transaction instead aborted dbRollback(), error propagated. code calls dbBreak(), execution code stops transaction silently aborted. side effects caused code (creation new variables) propagate calling environment.","code":""},{"path":"https://dbi.r-dbi.org/dev/articles/spec.html","id":"examples-26","dir":"Articles","previous_headings":"Self-contained SQL transactions","what":"Examples","title":"DBI specification","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cash\", data.frame(amount = 100)) dbWriteTable(con, \"account\", data.frame(amount = 2000))  # All operations are carried out as logical unit: dbWithTransaction(   con,   {     withdrawal <- 300     dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))     dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))   } )  # The code is executed as if in the curent environment: withdrawal  # The changes are committed to the database after successful execution: dbReadTable(con, \"cash\") dbReadTable(con, \"account\")  # Rolling back with dbBreak(): dbWithTransaction(   con,   {     withdrawal <- 5000     dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))     dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))     if (dbReadTable(con, \"account\")\\$amount < 0) {       dbBreak()     }   } )  # These changes were not committed to the database: dbReadTable(con, \"cash\") dbReadTable(con, \"account\")  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"R Special Interest Group Databases (R-SIG-DB). Author. Hadley Wickham. Author. Kirill Müller. Author, maintainer. R Consortium. Funder.","code":""},{"path":"https://dbi.r-dbi.org/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"R Special Interest Group Databases (R-SIG-DB), Wickham H, Müller K (2023). DBI: R Database Interface. R package version 1.2.0.9003, https://github.com/r-dbi/DBI, https://dbi.r-dbi.org.","code":"@Manual{,   title = {DBI: R Database Interface},   author = {{R Special Interest Group on Databases (R-SIG-DB)} and Hadley Wickham and Kirill Müller},   year = {2023},   note = {R package version 1.2.0.9003, https://github.com/r-dbi/DBI},   url = {https://dbi.r-dbi.org}, }"},{"path":"https://dbi.r-dbi.org/dev/index.html","id":"dbi","dir":"","previous_headings":"","what":"R Database Interface","title":"R Database Interface","text":"DBI package helps connecting R database management systems (DBMS). DBI separates connectivity DBMS “front-end” “back-end”. package defines interface implemented DBI backends : RPostgres, RMariaDB, RSQLite, odbc, bigrquery, many , see list backends. R scripts packages use DBI access various databases DBI backends. interface defines small set classes methods similar spirit Perl’s DBI, Java’s JDBC, Python’s DB-API, Microsoft’s ODBC. supports following operations: connect/disconnect DBMS create execute statements DBMS extract results/output statements error/exception handling information (meta-data) database objects transaction management (optional)","code":""},{"path":"https://dbi.r-dbi.org/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"R Database Interface","text":"users want access database need install DBI directly. installed automatically install one database backends: RPostgres PostgreSQL, RMariaDB MariaDB MySQL, RSQLite SQLite, odbc databases can access via ODBC, bigrquery, … . can install released version DBI CRAN : development version GitHub :","code":"install.packages(\"DBI\") # install.packages(\"devtools\") devtools::install_github(\"r-dbi/DBI\")"},{"path":"https://dbi.r-dbi.org/dev/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"R Database Interface","text":"following example illustrates DBI capabilities:","code":"library(DBI) # Create an ephemeral in-memory RSQLite database con <- dbConnect(RSQLite::SQLite(), dbname = \":memory:\")  dbListTables(con) #> character(0) dbWriteTable(con, \"mtcars\", mtcars) dbListTables(con) #> [1] \"mtcars\"  dbListFields(con, \"mtcars\") #>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" #> [11] \"carb\" dbReadTable(con, \"mtcars\") #>    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7 14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8 24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9 22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 23 rows ]  # You can fetch all results: res <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(res) #>    mpg cyl  disp hp drat    wt  qsec vs am gear carb #> 1 22.8   4 108.0 93 3.85 2.320 18.61  1  1    4    1 #> 2 24.4   4 146.7 62 3.69 3.190 20.00  1  0    4    2 #> 3 22.8   4 140.8 95 3.92 3.150 22.90  1  0    4    2 #> 4 32.4   4  78.7 66 4.08 2.200 19.47  1  1    4    1 #> 5 30.4   4  75.7 52 4.93 1.615 18.52  1  1    4    2 #> 6 33.9   4  71.1 65 4.22 1.835 19.90  1  1    4    1 #> 7 21.5   4 120.1 97 3.70 2.465 20.01  1  0    3    1 #> 8 27.3   4  79.0 66 4.08 1.935 18.90  1  1    4    1 #> 9 26.0   4 120.3 91 4.43 2.140 16.70  0  1    5    2 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 2 rows ] dbClearResult(res)  # Or a chunk at a time res <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") while(!dbHasCompleted(res)){   chunk <- dbFetch(res, n = 5)   print(nrow(chunk)) } #> [1] 5 #> [1] 5 #> [1] 1 dbClearResult(res)  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/index.html","id":"class-structure","dir":"","previous_headings":"","what":"Class structure","title":"R Database Interface","text":"four main DBI classes. Three extended individual database backends: DBIObject: common base class DBI. DBIDriver: base class representing overall DBMS properties. Typically generator functions instantiate driver objects like RSQLite(), RPostgreSQL(), RMySQL() etc. DBIConnection: represents connection specific database DBIResult: result DBMS query statement. classes virtual: instantiated directly instead must subclassed.","code":""},{"path":"https://dbi.r-dbi.org/dev/index.html","id":"further-reading","dir":"","previous_headings":"","what":"Further Reading","title":"R Database Interface","text":"Databases using R describes tools best practices ecosystem. DBI project site hosts blog recent developments presented. history DBI David James, driving force behind development DBI, many packages implement . Please note DBI project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/ANSI.html","id":null,"dir":"Reference","previous_headings":"","what":"A dummy DBI connector that simulates ANSI-SQL compliance — ANSI","title":"A dummy DBI connector that simulates ANSI-SQL compliance — ANSI","text":"dummy DBI connector simulates ANSI-SQL compliance","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/ANSI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dummy DBI connector that simulates ANSI-SQL compliance — ANSI","text":"","code":"ANSI()"},{"path":"https://dbi.r-dbi.org/dev/reference/ANSI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A dummy DBI connector that simulates ANSI-SQL compliance — ANSI","text":"","code":"ANSI() #> <AnsiConnection>"},{"path":"https://dbi.r-dbi.org/dev/reference/DBI-package.html","id":null,"dir":"Reference","previous_headings":"","what":"DBI: R Database Interface — DBI-package","title":"DBI: R Database Interface — DBI-package","text":"DBI defines interface communication R relational database management systems. classes package virtual need extended various R/DBMS implementations (-called DBI backends).","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBI-package.html","id":"definition","dir":"Reference","previous_headings":"","what":"Definition","title":"DBI: R Database Interface — DBI-package","text":"DBI backend R package imports DBI methods packages. better worse, names many existing backends start ‘R’, e.g., RSQLite, RMySQL, RSQLServer; backend author adopt convention .","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBI-package.html","id":"dbi-classes-and-methods","dir":"Reference","previous_headings":"","what":"DBI classes and methods","title":"DBI: R Database Interface — DBI-package","text":"backend defines three classes, subclasses DBIDriver, DBIConnection, DBIResult. backend provides implementation methods base classes defined implemented DBI. methods defined DBI reexported (package can used without attach DBI), ellipsis ... formals extensibility.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBI-package.html","id":"construction-of-the-dbidriver-object","dir":"Reference","previous_headings":"","what":"Construction of the DBIDriver object","title":"DBI: R Database Interface — DBI-package","text":"backend must support creation instance DBIDriver subclass constructor function. default, name package name without leading ‘R’ (exists), e.g., SQLite RSQLite package. However, backend authors may choose different name. constructor must exported, must function callable without arguments. DBI recommends define constructor empty argument list.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/DBI-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"DBI: R Database Interface — DBI-package","text":"Maintainer: Kirill Müller kirill@cynkra.com (ORCID) Authors: R Special Interest Group Databases (R-SIG-DB) Hadley Wickham contributors: R Consortium [funder]","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBI-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBI: R Database Interface — DBI-package","text":"","code":"RSQLite::SQLite() #> <SQLiteDriver>"},{"path":"https://dbi.r-dbi.org/dev/reference/DBIConnection-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIConnection class — DBIConnection-class","title":"DBIConnection class — DBIConnection-class","text":"virtual class encapsulates connection DBMS, provides access dynamic queries, result sets, DBMS session management (transactions), etc.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBIConnection-class.html","id":"implementation-note","dir":"Reference","previous_headings":"","what":"Implementation note","title":"DBIConnection class — DBIConnection-class","text":"Individual drivers free implement single multiple simultaneous connections.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/DBIConnection-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBIConnection class — DBIConnection-class","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") con #> <SQLiteConnection> #>   Path: :memory: #>   Extensions: TRUE dbDisconnect(con) if (FALSE) { con <- dbConnect(RPostgreSQL::PostgreSQL(), \"username\", \"passsword\") con dbDisconnect(con) }"},{"path":"https://dbi.r-dbi.org/dev/reference/DBIConnector-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIConnector class — DBIConnector-class","title":"DBIConnector class — DBIConnector-class","text":"Wraps objects DBIDriver class include connection options. purpose class store driver connection options. database connection can established call dbConnect(), passing object without additional arguments.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBIConnector-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBIConnector class — DBIConnector-class","text":"prevent leakage passwords credentials, class supports delayed evaluation. arguments can optionally function (callable without arguments). case, function evaluated transparently connecting dbGetConnectArgs().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/DBIConnector-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBIConnector class — DBIConnector-class","text":"","code":"# Create a connector: cnr <- new(\"DBIConnector\",   .drv = RSQLite::SQLite(),   .conn_args = list(dbname = \":memory:\") ) cnr #> <DBIConnector><SQLiteDriver> #> Arguments: #> $dbname #> [1] \":memory:\" #>   # Establish a connection through this connector: con <- dbConnect(cnr) con #> <SQLiteConnection> #>   Path: :memory: #>   Extensions: TRUE  # Access the database through this connection: dbGetQuery(con, \"SELECT 1 AS a\") #>   a #> 1 1 dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/DBIDriver-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIDriver class — DBIDriver-class","title":"DBIDriver class — DBIDriver-class","text":"Base class DBMS drivers (e.g., RSQLite, MySQL, PostgreSQL). virtual class DBIDriver defines operations creating connections defining data type mappings.  Actual driver classes, instance RPostgres, RMariaDB, etc. implement operations DBMS-specific manner.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/DBIObject-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIObject class — DBIObject-class","title":"DBIObject class — DBIObject-class","text":"Base class DBI classes (e.g., drivers, connections). virtual Class: objects may created .","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBIObject-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DBIObject class — DBIObject-class","text":"generally, DBI defines small set classes generics allows users applications access DBMS common interface.  virtual classes DBIDriver individual drivers extend, DBIConnection represent instances DBMS connections, DBIResult represent result DBMS statement.  three classes extend basic class DBIObject, serves root parent class hierarchy.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBIObject-class.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation notes","title":"DBIObject class — DBIObject-class","text":"implementation MUST provide methods following generics: dbGetInfo(). MAY also provide methods : summary(). Print concise description object. default method invokes dbGetInfo(dbObj) prints name-value pairs one per line.  Individual implementations may tailor appropriately.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/DBIObject-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DBIObject class — DBIObject-class","text":"","code":"drv <- RSQLite::SQLite() con <- dbConnect(drv)  rs <- dbSendQuery(con, \"SELECT 1\") is(drv, \"DBIObject\")   ## True #> [1] TRUE is(con, \"DBIObject\")   ## True #> [1] TRUE is(rs, \"DBIObject\") #> [1] TRUE  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/DBIResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"DBIResult class — DBIResult-class","title":"DBIResult class — DBIResult-class","text":"virtual class describes result state execution DBMS statement (statement, query non-query).  result set keeps track whether statement produces output many rows affected operation, many rows fetched (statement query), whether rows fetch, etc.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/DBIResult-class.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation notes","title":"DBIResult class — DBIResult-class","text":"Individual drivers free allow single multiple active results per connection. default show method displays summary query using DBI generics.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/Id.html","id":null,"dir":"Reference","previous_headings":"","what":"Refer to a table nested in a hierarchy (e.g. within a schema) — Id-class","title":"Refer to a table nested in a hierarchy (e.g. within a schema) — Id-class","text":"Objects class Id single slot name, character vector. dbQuoteIdentifier() method converts Id objects strings. Support Id objects depends database backend. can used following methods name table argument: dbCreateTable() dbAppendTable() dbReadTable() dbWriteTable() dbExistsTable() dbRemoveTable() Objects class also returned dbListObjects().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/Id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Refer to a table nested in a hierarchy (e.g. within a schema) — Id-class","text":"","code":"Id(...)"},{"path":"https://dbi.r-dbi.org/dev/reference/Id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Refer to a table nested in a hierarchy (e.g. within a schema) — Id-class","text":"... Components hierarchy, e.g. cluster, catalog, schema, table, depending database backend. concepts, see https://stackoverflow.com/questions/7022755/","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/Id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Refer to a table nested in a hierarchy (e.g. within a schema) — Id-class","text":"","code":"# Identifies a table in a specific schema: Id(\"dbo\", \"Customer\") #> <Id> \"dbo\".\"Customer\" # You can name the components if you want, but it's not needed Id(table = \"Customer\", schema = \"dbo\") #> <Id> \"dbo\".\"Customer\"  # Create a SQL expression for an identifier: dbQuoteIdentifier(ANSI(), Id(\"nycflights13\", \"flights\")) #> <SQL> \"nycflights13\".\"flights\"  # Write a table in a specific schema: if (FALSE) { dbWriteTable(con, Id(\"myschema\", \"mytable\"), data.frame(a = 1)) }"},{"path":"https://dbi.r-dbi.org/dev/reference/SQL.html","id":null,"dir":"Reference","previous_headings":"","what":"SQL quoting — SQL","title":"SQL quoting — SQL","text":"set classes generics make possible flexibly deal SQL escaping needs. default, user supplied input query escaped using either dbQuoteIdentifier() dbQuoteString() depending whether refers table variable name, literal string. functions may return object SQL class, tells DBI functions character string need escaped anymore, prevent double escaping. SQL class associated SQL() constructor function.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/SQL.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SQL quoting — SQL","text":"","code":"SQL(x, ..., names = NULL)"},{"path":"https://dbi.r-dbi.org/dev/reference/SQL.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SQL quoting — SQL","text":"x character vector label escaped SQL. ... arguments passed methods. otherwise used. names Names returned object, must length x.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/SQL.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SQL quoting — SQL","text":"object class SQL.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/SQL.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation notes","title":"SQL quoting — SQL","text":"DBI provides default generics SQL-92 compatible quoting. database uses different convention, need provide methods. Note way S4 dispatch finds methods SQL inherits character, implement (e.g.) method dbQuoteString(MyConnection, character), also need implement dbQuoteString(MyConnection, SQL) - simply return x unchanged.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/SQL.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SQL quoting — SQL","text":"","code":"dbQuoteIdentifier(ANSI(), \"SELECT\") #> <SQL> \"SELECT\" dbQuoteString(ANSI(), \"SELECT\") #> <SQL> 'SELECT'  # SQL vectors are always passed through as is var_name <- SQL(\"SELECT\") var_name #> <SQL> SELECT  dbQuoteIdentifier(ANSI(), var_name) #> <SQL> SELECT dbQuoteString(ANSI(), var_name) #> <SQL> SELECT  # This mechanism is used to prevent double escaping dbQuoteString(ANSI(), dbQuoteString(ANSI(), \"SELECT\")) #> <SQL> 'SELECT'"},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Insert rows into a table — dbAppendTable","title":"Insert rows into a table — dbAppendTable","text":"dbAppendTable() method assumes table created beforehand, e.g. dbCreateTable(). default implementation calls sqlAppendTableTemplate() dbExecute() param argument. Backends compliant ANSI SQL 99 use ? placeholder prepared queries need override . Backends different SQL syntax use ? placeholder prepared queries can override sqlAppendTable(). backends (different placeholders entirely different ways create tables) need override dbAppendTable() method.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Insert rows into a table — dbAppendTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. DatabaseConnector::dbAppendTable(\"DatabaseConnectorConnection\", \"character\", \"\") duckdb::dbAppendTable(\"duckdb_connection\", \"\", \"\") odbc::dbAppendTable(\"OdbcConnection\", \"\", \"\") pool::dbAppendTable(\"Pool\", \"\", \"\") RMariaDB::dbAppendTable(\"MariaDBConnection\", \"\", \"\") RPostgres::dbAppendTable(\"PqConnection\", \"\", \"\") RPresto::dbAppendTable(\"PrestoConnection\", \"\", \"data.frame\") RSQLite::dbAppendTable(\"SQLiteConnection\", \"\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Insert rows into a table — dbAppendTable","text":"","code":"dbAppendTable(conn, name, value, ..., row.names = NULL)  dbAppendTableArrow(conn, name, value, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Insert rows into a table — dbAppendTable","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') value dbAppendTable(), data.frame (coercible data.frame). dbAppendTableArrow(), object coercible Arrow RecordBatchReader. ... parameters passed methods. row.names Must NULL.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Insert rows into a table — dbAppendTable","text":"dbAppendTable() returns scalar numeric.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Insert rows into a table — dbAppendTable","text":"row.names argument supported method. Process values sqlRownamesToColumn() calling method.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Insert rows into a table — dbAppendTable","text":"table exist, new data values data frame different column names, error raised; remote table remains unchanged. error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar. Invalid values row.names argument (non-scalars, unsupported data types, NA) also raise error. Passing value argument different NULL row.names argument (particular TRUE, NA, string) raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Insert rows into a table — dbAppendTable","text":"SQL keywords can used freely table names, column names, data. Quotes, commas, spaces, special characters newlines tabs, can also used data, , database supports non-syntactic identifiers, also table names column names. following data types must supported least, read identically dbReadTable(): integer numeric (behavior Inf NaN specified) logical NA NULL 64-bit values (using \"bigint\" field type); result can converted numeric, may lose precision, converted character vector, gives full decimal representation written another table read unchanged character (UTF-8 native encodings), supporting empty strings (non-empty strings) factor (returned character, warning) list raw (supported database) objects type blob::blob (supported database) date (supported database; returned Date) also dates prior 1970 1900 2038 time (supported database; returned objects inherit difftime) timestamp (supported database; returned POSIXct respecting time zone necessarily preserving input time zone), also timestamps prior 1970 1900 2038 respecting time zone necessarily preserving input time zone) Mixing column types table supported. name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbAppendTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done support databases allow non-syntactic names objects: row.names argument must NULL, default value. Row names ignored. value argument must data frame subset columns existing table. order columns matter.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbAppendTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Insert rows into a table — dbAppendTable","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") dbCreateTable(con, \"iris\", iris) dbAppendTable(con, \"iris\", iris) #> Warning: Factors converted to character #> [1] 150 dbReadTable(con, \"iris\") #>     Sepal.Length Sepal.Width Petal.Length Petal.Width    Species #> 1            5.1         3.5          1.4         0.2     setosa #> 2            4.9         3.0          1.4         0.2     setosa #> 3            4.7         3.2          1.3         0.2     setosa #> 4            4.6         3.1          1.5         0.2     setosa #> 5            5.0         3.6          1.4         0.2     setosa #> 6            5.4         3.9          1.7         0.4     setosa #> 7            4.6         3.4          1.4         0.3     setosa #> 8            5.0         3.4          1.5         0.2     setosa #> 9            4.4         2.9          1.4         0.2     setosa #> 10           4.9         3.1          1.5         0.1     setosa #> 11           5.4         3.7          1.5         0.2     setosa #> 12           4.8         3.4          1.6         0.2     setosa #> 13           4.8         3.0          1.4         0.1     setosa #> 14           4.3         3.0          1.1         0.1     setosa #> 15           5.8         4.0          1.2         0.2     setosa #> 16           5.7         4.4          1.5         0.4     setosa #> 17           5.4         3.9          1.3         0.4     setosa #> 18           5.1         3.5          1.4         0.3     setosa #> 19           5.7         3.8          1.7         0.3     setosa #> 20           5.1         3.8          1.5         0.3     setosa #> 21           5.4         3.4          1.7         0.2     setosa #> 22           5.1         3.7          1.5         0.4     setosa #> 23           4.6         3.6          1.0         0.2     setosa #> 24           5.1         3.3          1.7         0.5     setosa #> 25           4.8         3.4          1.9         0.2     setosa #> 26           5.0         3.0          1.6         0.2     setosa #> 27           5.0         3.4          1.6         0.4     setosa #> 28           5.2         3.5          1.5         0.2     setosa #> 29           5.2         3.4          1.4         0.2     setosa #> 30           4.7         3.2          1.6         0.2     setosa #> 31           4.8         3.1          1.6         0.2     setosa #> 32           5.4         3.4          1.5         0.4     setosa #> 33           5.2         4.1          1.5         0.1     setosa #> 34           5.5         4.2          1.4         0.2     setosa #> 35           4.9         3.1          1.5         0.2     setosa #> 36           5.0         3.2          1.2         0.2     setosa #> 37           5.5         3.5          1.3         0.2     setosa #> 38           4.9         3.6          1.4         0.1     setosa #> 39           4.4         3.0          1.3         0.2     setosa #> 40           5.1         3.4          1.5         0.2     setosa #> 41           5.0         3.5          1.3         0.3     setosa #> 42           4.5         2.3          1.3         0.3     setosa #> 43           4.4         3.2          1.3         0.2     setosa #> 44           5.0         3.5          1.6         0.6     setosa #> 45           5.1         3.8          1.9         0.4     setosa #> 46           4.8         3.0          1.4         0.3     setosa #> 47           5.1         3.8          1.6         0.2     setosa #> 48           4.6         3.2          1.4         0.2     setosa #> 49           5.3         3.7          1.5         0.2     setosa #> 50           5.0         3.3          1.4         0.2     setosa #> 51           7.0         3.2          4.7         1.4 versicolor #> 52           6.4         3.2          4.5         1.5 versicolor #> 53           6.9         3.1          4.9         1.5 versicolor #> 54           5.5         2.3          4.0         1.3 versicolor #> 55           6.5         2.8          4.6         1.5 versicolor #> 56           5.7         2.8          4.5         1.3 versicolor #> 57           6.3         3.3          4.7         1.6 versicolor #> 58           4.9         2.4          3.3         1.0 versicolor #> 59           6.6         2.9          4.6         1.3 versicolor #> 60           5.2         2.7          3.9         1.4 versicolor #> 61           5.0         2.0          3.5         1.0 versicolor #> 62           5.9         3.0          4.2         1.5 versicolor #> 63           6.0         2.2          4.0         1.0 versicolor #> 64           6.1         2.9          4.7         1.4 versicolor #> 65           5.6         2.9          3.6         1.3 versicolor #> 66           6.7         3.1          4.4         1.4 versicolor #> 67           5.6         3.0          4.5         1.5 versicolor #> 68           5.8         2.7          4.1         1.0 versicolor #> 69           6.2         2.2          4.5         1.5 versicolor #> 70           5.6         2.5          3.9         1.1 versicolor #> 71           5.9         3.2          4.8         1.8 versicolor #> 72           6.1         2.8          4.0         1.3 versicolor #> 73           6.3         2.5          4.9         1.5 versicolor #> 74           6.1         2.8          4.7         1.2 versicolor #> 75           6.4         2.9          4.3         1.3 versicolor #> 76           6.6         3.0          4.4         1.4 versicolor #> 77           6.8         2.8          4.8         1.4 versicolor #> 78           6.7         3.0          5.0         1.7 versicolor #> 79           6.0         2.9          4.5         1.5 versicolor #> 80           5.7         2.6          3.5         1.0 versicolor #> 81           5.5         2.4          3.8         1.1 versicolor #> 82           5.5         2.4          3.7         1.0 versicolor #> 83           5.8         2.7          3.9         1.2 versicolor #> 84           6.0         2.7          5.1         1.6 versicolor #> 85           5.4         3.0          4.5         1.5 versicolor #> 86           6.0         3.4          4.5         1.6 versicolor #> 87           6.7         3.1          4.7         1.5 versicolor #> 88           6.3         2.3          4.4         1.3 versicolor #> 89           5.6         3.0          4.1         1.3 versicolor #> 90           5.5         2.5          4.0         1.3 versicolor #> 91           5.5         2.6          4.4         1.2 versicolor #> 92           6.1         3.0          4.6         1.4 versicolor #> 93           5.8         2.6          4.0         1.2 versicolor #> 94           5.0         2.3          3.3         1.0 versicolor #> 95           5.6         2.7          4.2         1.3 versicolor #> 96           5.7         3.0          4.2         1.2 versicolor #> 97           5.7         2.9          4.2         1.3 versicolor #> 98           6.2         2.9          4.3         1.3 versicolor #> 99           5.1         2.5          3.0         1.1 versicolor #> 100          5.7         2.8          4.1         1.3 versicolor #> 101          6.3         3.3          6.0         2.5  virginica #> 102          5.8         2.7          5.1         1.9  virginica #> 103          7.1         3.0          5.9         2.1  virginica #> 104          6.3         2.9          5.6         1.8  virginica #> 105          6.5         3.0          5.8         2.2  virginica #> 106          7.6         3.0          6.6         2.1  virginica #> 107          4.9         2.5          4.5         1.7  virginica #> 108          7.3         2.9          6.3         1.8  virginica #> 109          6.7         2.5          5.8         1.8  virginica #> 110          7.2         3.6          6.1         2.5  virginica #> 111          6.5         3.2          5.1         2.0  virginica #> 112          6.4         2.7          5.3         1.9  virginica #> 113          6.8         3.0          5.5         2.1  virginica #> 114          5.7         2.5          5.0         2.0  virginica #> 115          5.8         2.8          5.1         2.4  virginica #> 116          6.4         3.2          5.3         2.3  virginica #> 117          6.5         3.0          5.5         1.8  virginica #> 118          7.7         3.8          6.7         2.2  virginica #> 119          7.7         2.6          6.9         2.3  virginica #> 120          6.0         2.2          5.0         1.5  virginica #> 121          6.9         3.2          5.7         2.3  virginica #> 122          5.6         2.8          4.9         2.0  virginica #> 123          7.7         2.8          6.7         2.0  virginica #> 124          6.3         2.7          4.9         1.8  virginica #> 125          6.7         3.3          5.7         2.1  virginica #> 126          7.2         3.2          6.0         1.8  virginica #> 127          6.2         2.8          4.8         1.8  virginica #> 128          6.1         3.0          4.9         1.8  virginica #> 129          6.4         2.8          5.6         2.1  virginica #> 130          7.2         3.0          5.8         1.6  virginica #> 131          7.4         2.8          6.1         1.9  virginica #> 132          7.9         3.8          6.4         2.0  virginica #> 133          6.4         2.8          5.6         2.2  virginica #> 134          6.3         2.8          5.1         1.5  virginica #> 135          6.1         2.6          5.6         1.4  virginica #> 136          7.7         3.0          6.1         2.3  virginica #> 137          6.3         3.4          5.6         2.4  virginica #> 138          6.4         3.1          5.5         1.8  virginica #> 139          6.0         3.0          4.8         1.8  virginica #> 140          6.9         3.1          5.4         2.1  virginica #> 141          6.7         3.1          5.6         2.4  virginica #> 142          6.9         3.1          5.1         2.3  virginica #> 143          5.8         2.7          5.1         1.9  virginica #> 144          6.8         3.2          5.9         2.3  virginica #> 145          6.7         3.3          5.7         2.5  virginica #> 146          6.7         3.0          5.2         2.3  virginica #> 147          6.3         2.5          5.0         1.9  virginica #> 148          6.5         3.0          5.2         2.0  virginica #> 149          6.2         3.4          5.4         2.3  virginica #> 150          5.9         3.0          5.1         1.8  virginica dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":null,"dir":"Reference","previous_headings":"","what":"Bind values to a parameterized/prepared statement — dbBind","title":"Bind values to a parameterized/prepared statement — dbBind","text":"parametrized prepared statements, dbSendQuery(), dbSendQueryArrow(), dbSendStatement() functions can called statements contain placeholders values. dbBind() dbBindArrow() functions bind placeholders actual values, intended called result set calling dbFetch() dbFetchArrow(). values passed dbBind() lists data frames, dbBindArrow() stream created nanoarrow::as_nanoarrow_array_stream(). works combinations. dbSendQuery() compatible dbBindArrow(), dbSendQueryArrow() compatible dbBind().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Bind values to a parameterized/prepared statement — dbBind","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbBind(\"BigQueryResult\") duckdb::dbBind(\"duckdb_result\") odbc::dbBind(\"OdbcResult\") RMariaDB::dbBind(\"MariaDBResult\") RPostgres::dbBind(\"PqResult\") RSQLite::dbBind(\"SQLiteResult\") sparklyr::dbBind(\"DBISparkResult\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bind values to a parameterized/prepared statement — dbBind","text":"","code":"dbBind(res, params, ...)  dbBindArrow(res, params, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bind values to a parameterized/prepared statement — dbBind","text":"res object inheriting DBIResult. params dbBind(), list values, named unnamed, data frame, one element/column per query parameter. dbBindArrow(), values nanoarrow stream, one column per query parameter. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bind values to a parameterized/prepared statement — dbBind","text":"dbBind() returns result set, invisibly, queries issued dbSendQuery() dbSendQueryArrow() also data manipulation statements issued dbSendStatement().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Bind values to a parameterized/prepared statement — dbBind","text":"DBI supports parametrized (prepared) queries statements via dbBind() dbBindArrow() generics. Parametrized queries different normal queries allow arbitrary number placeholders, later substituted actual values. Parametrized queries (statements) serve two purposes: query can executed different values. DBMS may cache intermediate information query, execution plan, execute faster. Separation query syntax parameters protects SQL injection. placeholder format currently specified DBI; future, uniform placeholder syntax may supported. Consult backend documentation supported formats. automated testing, backend authors specify placeholder syntax placeholder_pattern tweak. Known examples : ? (positional matching order appearance) RMariaDB RSQLite $1 (positional matching index) RPostgres RSQLite :name $name (named matching) RSQLite","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"the-data-retrieval-flow","dir":"Reference","previous_headings":"","what":"The data retrieval flow","title":"Bind values to a parameterized/prepared statement — dbBind","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"the-data-retrieval-flow-for-arrow-streams","dir":"Reference","previous_headings":"","what":"The data retrieval flow for Arrow streams","title":"Bind values to a parameterized/prepared statement — dbBind","text":"section gives complete overview flow execution queries return tabular data Arrow stream. flow, except repeated calling dbBindArrow() dbBind(), implemented dbGetQueryArrow(), sufficient unless parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQueryArrow() create result set object class DBIResultArrow. Optionally, bind query parameters dbBindArrow() dbBind(). required query contains placeholders ? $1, depending database backend. Use dbFetchArrow() get data stream. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"the-command-execution-flow","dir":"Reference","previous_headings":"","what":"The command execution flow","title":"Bind values to a parameterized/prepared statement — dbBind","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Bind values to a parameterized/prepared statement — dbBind","text":"Calling dbBind() query without parameters raises error. Binding many enough values, parameters wrong names unequal length, also raises error. placeholders query named, parameter values must names (must empty NA), vice versa, otherwise error raised. behavior mixing placeholders different types (particular mixing positional named placeholders) specified. Calling dbBind() result set already cleared dbClearResult() also raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Bind values to a parameterized/prepared statement — dbBind","text":"DBI clients execute parametrized statements follows: Call dbSendQuery(), dbSendQueryArrow() dbSendStatement() query statement contains placeholders, store returned DBIResult object variable. Mixing placeholders (particular, named unnamed ones) recommended. good practice register call dbClearResult() via .exit() right calling dbSendQuery() dbSendStatement() (see last enumeration item). dbBind() called, returned result set object following behavior: dbFetch() raises error (dbSendQuery()) dbGetRowCount() returns zero (dbSendQuery()) dbGetRowsAffected() returns integer NA (dbSendStatement()) dbIsValid() returns TRUE dbHasCompleted() returns FALSE Construct list parameters specify actual values placeholders. list must named unnamed, depending kind placeholders used. Named values matched named parameters, unnamed values matched position list parameters. elements list must lengths contain values supported backend; data.frame internally stored list. parameter list passed call dbBind() DBIResult object. Retrieve data number affected rows DBIResult object. queries issued dbSendQuery(), call dbFetch(). statements issued dbSendStatements(), call dbGetRowsAffected(). (Execution begins immediately dbBind() call, statement processed entirely function returns.) Repeat 2. 3. necessary. Close result set via dbClearResult(). elements params argument need scalars, vectors arbitrary length (including length 0) supported. queries, calling dbFetch() binding parameters returns concatenated results, equivalent binding fetching set values connecting via rbind(). data manipulation statements, dbGetRowsAffected() returns total number rows affected binding non-scalar parameters. dbBind() also accepts repeated calls result set queries data manipulation statements, even results fetched calls dbBind(), queries data manipulation statements. placeholders query named, order params argument important. least following data types accepted input (including NA): integer numeric logical Boolean values character (also special characters spaces, newlines, quotes, backslashes) factor (bound character, warning) Date (also stored internally integer) POSIXct timestamps POSIXlt timestamps difftime values (also units seconds value stored integer) lists raw blobs (NULL entries SQL NULL values) objects type blob::blob","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbBind.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bind values to a parameterized/prepared statement — dbBind","text":"","code":"# Data frame flow: con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"iris\", iris)  # Using the same query for different values iris_result <- dbSendQuery(con, \"SELECT * FROM iris WHERE [Petal.Width] > ?\") dbBind(iris_result, list(2.3)) dbFetch(iris_result) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1          6.3         3.3          6.0         2.5 virginica #> 2          7.2         3.6          6.1         2.5 virginica #> 3          5.8         2.8          5.1         2.4 virginica #> 4          6.3         3.4          5.6         2.4 virginica #> 5          6.7         3.1          5.6         2.4 virginica #> 6          6.7         3.3          5.7         2.5 virginica dbBind(iris_result, list(3)) dbFetch(iris_result) #> [1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species      #> <0 rows> (or 0-length row.names) dbClearResult(iris_result)  # Executing the same statement with different values at once iris_result <- dbSendStatement(con, \"DELETE FROM iris WHERE [Species] = $species\") dbBind(iris_result, list(species = c(\"setosa\", \"versicolor\", \"unknown\"))) dbGetRowsAffected(iris_result) #> [1] 100 dbClearResult(iris_result)  nrow(dbReadTable(con, \"iris\")) #> [1] 50  dbDisconnect(con)  # Arrow flow: con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"iris\", iris)  # Using the same query for different values iris_result <- dbSendQueryArrow(con, \"SELECT * FROM iris WHERE [Petal.Width] > ?\") dbBindArrow(   iris_result,   nanoarrow::as_nanoarrow_array_stream(data.frame(2.3, fix.empty.names = FALSE)) ) as.data.frame(dbFetchArrow(iris_result)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width   Species #> 1          6.3         3.3          6.0         2.5 virginica #> 2          7.2         3.6          6.1         2.5 virginica #> 3          5.8         2.8          5.1         2.4 virginica #> 4          6.3         3.4          5.6         2.4 virginica #> 5          6.7         3.1          5.6         2.4 virginica #> 6          6.7         3.3          5.7         2.5 virginica dbBindArrow(   iris_result,   nanoarrow::as_nanoarrow_array_stream(data.frame(3, fix.empty.names = FALSE)) ) as.data.frame(dbFetchArrow(iris_result)) #> [1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species      #> <0 rows> (or 0-length row.names) dbClearResult(iris_result)  # Executing the same statement with different values at once iris_result <- dbSendStatement(con, \"DELETE FROM iris WHERE [Species] = $species\") dbBindArrow(iris_result, nanoarrow::as_nanoarrow_array_stream(data.frame(   species = c(\"setosa\", \"versicolor\", \"unknown\") ))) dbGetRowsAffected(iris_result) #> [1] 100 dbClearResult(iris_result)  nrow(dbReadTable(con, \"iris\")) #> [1] 50  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbCallProc.html","id":null,"dir":"Reference","previous_headings":"","what":"Call an SQL stored procedure — dbCallProc","title":"Call an SQL stored procedure — dbCallProc","text":"Deprecated since 2014","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCallProc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call an SQL stored procedure — dbCallProc","text":"","code":"dbCallProc(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbCallProc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call an SQL stored procedure — dbCallProc","text":"conn DBIConnection object, returned dbConnect(). ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCallProc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Call an SQL stored procedure — dbCallProc","text":"recommended way calling stored procedure now dbGetQuery result set returned dbExecute  data manipulation cases result set returned","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCanConnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a connection to a DBMS can be established — dbCanConnect","title":"Check if a connection to a DBMS can be established — dbCanConnect","text":"Like dbConnect(), checks validity without actually returning connection object.  default implementation opens connection disconnects success, individual backends might implement lighter-weight check.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCanConnect.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Check if a connection to a DBMS can be established — dbCanConnect","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbCanConnect(\"AzureKustoDriver\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCanConnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a connection to a DBMS can be established — dbCanConnect","text":"","code":"dbCanConnect(drv, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbCanConnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a connection to a DBMS can be established — dbCanConnect","text":"drv object inherits DBIDriver, existing DBIConnection object (order clone existing connection). ... authentication arguments needed DBMS instance; typically include user, password, host, port, dbname, etc. details see appropriate DBIDriver.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCanConnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if a connection to a DBMS can be established — dbCanConnect","text":"scalar logical.  FALSE, \"reason\" attribute indicates reason failure.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbCanConnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a connection to a DBMS can be established — dbCanConnect","text":"","code":"# SQLite only needs a path to the database. (Here, \":memory:\" is a special # path that creates an in-memory database.) Other database drivers # will require more details (like user, password, host, port, etc.) dbCanConnect(RSQLite::SQLite(), \":memory:\") #> [1] TRUE"},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":null,"dir":"Reference","previous_headings":"","what":"Clear a result set — dbClearResult","title":"Clear a result set — dbClearResult","text":"Frees resources (local remote) associated result set. step mandatory objects obtained calling dbSendQuery() dbSendStatement().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Clear a result set — dbClearResult","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbClearResult(\"BigQueryResult\") DatabaseConnector::dbClearResult(\"DatabaseConnectorDbiResult\") DatabaseConnector::dbClearResult(\"DatabaseConnectorJdbcResult\") dittodb::dbClearResult(\"DBIMockResult\") duckdb::dbClearResult(\"duckdb_result\") lazysf::dbClearResult(\"SFSQLResult\") odbc::dbClearResult(\"OdbcResult\") RAthena::dbClearResult(\"AthenaResult\") RJDBC::dbClearResult(\"JDBCResult\") RMariaDB::dbClearResult(\"MariaDBResult\") RMySQL::dbClearResult(\"MySQLResult\") RPostgres::dbClearResult(\"PqResult\") RPostgreSQL::dbClearResult(\"PostgreSQLResult\") RPresto::dbClearResult(\"PrestoResult\") RSQLite::dbClearResult(\"SQLiteResult\") sergeant::dbClearResult(\"DrillResult\") sparklyr::dbClearResult(\"DBISparkResult\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clear a result set — dbClearResult","text":"","code":"dbClearResult(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clear a result set — dbClearResult","text":"res object inheriting DBIResult. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clear a result set — dbClearResult","text":"dbClearResult() returns TRUE, invisibly, result sets obtained dbSendQuery(), dbSendStatement(), dbSendQueryArrow(),","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"the-data-retrieval-flow","dir":"Reference","previous_headings":"","what":"The data retrieval flow","title":"Clear a result set — dbClearResult","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"the-command-execution-flow","dir":"Reference","previous_headings":"","what":"The command execution flow","title":"Clear a result set — dbClearResult","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Clear a result set — dbClearResult","text":"attempt close already closed result set issues warning dbSendQuery(), dbSendStatement(), dbSendQueryArrow(),","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Clear a result set — dbClearResult","text":"dbClearResult() frees resources associated retrieving result query update operation. DBI backend can expect call dbClearResult() dbSendQuery() dbSendStatement() call.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbClearResult.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clear a result set — dbClearResult","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  rs <- dbSendQuery(con, \"SELECT 1\") print(dbFetch(rs)) #>   1 #> 1 1  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Information about result types — dbColumnInfo","title":"Information about result types — dbColumnInfo","text":"Produces data.frame describes output query. data.frame many rows output fields result set, column data.frame describes aspect result set field (field name, type, etc.)","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Information about result types — dbColumnInfo","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbColumnInfo(\"AzureKustoResult\") bigrquery::dbColumnInfo(\"BigQueryResult\") DatabaseConnector::dbColumnInfo(\"DatabaseConnectorDbiResult\") DatabaseConnector::dbColumnInfo(\"DatabaseConnectorJdbcResult\") dittodb::dbColumnInfo(\"DBIMockResult\") duckdb::dbColumnInfo(\"duckdb_result\") odbc::dbColumnInfo(\"OdbcResult\") RAthena::dbColumnInfo(\"AthenaResult\") RJDBC::dbColumnInfo(\"JDBCResult\") RMariaDB::dbColumnInfo(\"MariaDBResult\") RMySQL::dbColumnInfo(\"MySQLConnection\") RMySQL::dbColumnInfo(\"MySQLResult\") RPostgres::dbColumnInfo(\"PqResult\") RPostgreSQL::dbColumnInfo(\"PostgreSQLResult\") RSQLite::dbColumnInfo(\"SQLiteResult\") sparklyr::dbColumnInfo(\"DBISparkResult\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Information about result types — dbColumnInfo","text":"","code":"dbColumnInfo(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Information about result types — dbColumnInfo","text":"res object inheriting DBIResult. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Information about result types — dbColumnInfo","text":"dbColumnInfo() returns data frame least two columns \"name\" \"type\" (order) (optional columns start dot). \"name\" \"type\" columns contain names types R columns data frame returned dbFetch(). \"type\" column type character information. compute \"type\" column, instead use dbFetch(res, n = 0) create zero-row data frame initialized correct data types.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"the-data-retrieval-flow","dir":"Reference","previous_headings":"","what":"The data retrieval flow","title":"Information about result types — dbColumnInfo","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Information about result types — dbColumnInfo","text":"attempt query columns closed result set raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Information about result types — dbColumnInfo","text":"column named row_names treated like column. column names always consistent data returned dbFetch(). query returns unnamed columns, non-empty non-NA names assigned. Column names correspond SQL R keywords left unchanged.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbColumnInfo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Information about result types — dbColumnInfo","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  rs <- dbSendQuery(con, \"SELECT 1 AS a, 2 AS b\") dbColumnInfo(rs) #>   name    type #> 1    a integer #> 2    b integer dbFetch(rs) #>   a b #> 1 1 2  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbConnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a connection to a DBMS — dbConnect","title":"Create a connection to a DBMS — dbConnect","text":"Connect DBMS going appropriate authentication procedure. implementations may allow multiple connections open, may invoke function repeatedly assigning output different objects. authentication mechanism left unspecified, check documentation individual drivers details. Use dbCanConnect() check connection can established.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbConnect.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Create a connection to a DBMS — dbConnect","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbConnect(\"AzureKustoDriver\") bigrquery::dbConnect(\"BigQueryDriver\") bigrquery::dbConnect(\"bq_dataset\") DatabaseConnector::dbConnect(\"DatabaseConnectorDriver\") duckdb::dbConnect(\"duckdb_driver\") lazysf::dbConnect(\"SFSQLDriver\") odbc::dbConnect(\"DatabricksOdbcDriver\") odbc::dbConnect(\"OdbcDriver\") RAthena::dbConnect(\"AthenaDriver\") RH2::dbConnect(\"H2Driver\") RJDBC::dbConnect(\"JDBCDriver\") RMariaDB::dbConnect(\"MariaDBDriver\") RMySQL::dbConnect(\"MySQLConnection\") RMySQL::dbConnect(\"MySQLDriver\") RPostgres::dbConnect(\"PqDriver\") RPostgres::dbConnect(\"RedshiftDriver\") RPostgreSQL::dbConnect(\"character\") RPostgreSQL::dbConnect(\"PostgreSQLConnection\") RPostgreSQL::dbConnect(\"PostgreSQLDriver\") RPresto::dbConnect(\"PrestoDriver\") RSQLite::dbConnect(\"SQLiteConnection\") RSQLite::dbConnect(\"SQLiteDriver\") sergeant::dbConnect(\"DrillDriver\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbConnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a connection to a DBMS — dbConnect","text":"","code":"dbConnect(drv, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbConnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a connection to a DBMS — dbConnect","text":"drv object inherits DBIDriver, existing DBIConnection object (order clone existing connection). ... authentication arguments needed DBMS instance; typically include user, password, host, port, dbname, etc. details see appropriate DBIDriver.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbConnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a connection to a DBMS — dbConnect","text":"dbConnect() returns S4 object inherits DBIConnection. object used communicate database engine. format() method defined connection object. returns string consists single line text.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbConnect.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Create a connection to a DBMS — dbConnect","text":"DBI recommends using following argument names authentication parameters, NULL default: user user name (default: current user) password password host host name (default: local connection) port port number (default: local connection) dbname name database host, database file name defaults provide reasonable behavior, particular local connection host = NULL.  DBMS (e.g., PostgreSQL), different TCP/IP connection localhost. addition, DBI supports bigint argument governs 64-bit integer data returned.  following values supported: \"integer\": always return integer, silently overflow \"numeric\": always return numeric, silently round \"character\": always return decimal representation character \"integer64\": return data type can coerced using .integer() (warning overflow), .numeric() .character()","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbConnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a connection to a DBMS — dbConnect","text":"","code":"# SQLite only needs a path to the database. (Here, \":memory:\" is a special # path that creates an in-memory database.) Other database drivers # will require more details (like user, password, host, port, etc.) con <- dbConnect(RSQLite::SQLite(), \":memory:\") con #> <SQLiteConnection> #>   Path: :memory: #>   Extensions: TRUE  dbListTables(con) #> character(0)  dbDisconnect(con)  # Bad, for subtle reasons: # This code fails when RSQLite isn't loaded yet, # because dbConnect() doesn't know yet about RSQLite. dbListTables(con <- dbConnect(RSQLite::SQLite(), \":memory:\")) #> character(0)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a table in the database — dbCreateTable","title":"Create a table in the database — dbCreateTable","text":"default dbCreateTable() method calls sqlCreateTable() dbExecute(). Backends compliant ANSI SQL 99 need override . Backends different SQL syntax can override sqlCreateTable(), backends entirely different ways create tables need override method.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Create a table in the database — dbCreateTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbCreateTable(\"AzureKustoConnection\") DatabaseConnector::dbCreateTable(\"DatabaseConnectorConnection\") pool::dbCreateTable(\"Pool\") RPresto::dbCreateTable(\"PrestoConnection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a table in the database — dbCreateTable","text":"","code":"dbCreateTable(conn, name, fields, ..., row.names = NULL, temporary = FALSE)  dbCreateTableArrow(conn, name, value, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a table in the database — dbCreateTable","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') fields Either character vector data frame. named character vector: Names column names, values types. Names escaped dbQuoteIdentifier(). Field types unescaped. data frame: field types generated using dbDataType(). ... parameters passed methods. row.names Must NULL. temporary TRUE, generate temporary table statement. value object coercible Arrow RecordBatchReader.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a table in the database — dbCreateTable","text":"dbCreateTable() returns TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a table in the database — dbCreateTable","text":"row.names argument supported method. Process values sqlRownamesToColumn() calling method. argument order different sqlCreateTable() method, latter adapted later release DBI.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Create a table in the database — dbCreateTable","text":"table exists, error raised; remote table remains unchanged. error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar. Invalid values row.names temporary arguments (non-scalars, unsupported data types, NA, incompatible values, duplicate names) also raise error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Create a table in the database — dbCreateTable","text":"following arguments part dbCreateTable() generic (improve compatibility across backends) part DBI specification: temporary (default: FALSE) must provided named arguments. See \"Specification\" \"Value\" sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Create a table in the database — dbCreateTable","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbCreateTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done temporary argument TRUE, table available second connection gone reconnecting. backends support argument. regular, non-temporary table visible second connection, pre-existing connection, reconnecting database. SQL keywords can used freely table names, column names, data. Quotes, commas, spaces can also used  table names column names, database supports non-syntactic identifiers. row.names argument must missing NULL, default value. values row.names argument (particular TRUE, NA, string) raise error.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbCreateTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a table in the database — dbCreateTable","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") dbCreateTable(con, \"iris\", iris) dbReadTable(con, \"iris\") #> [1] Sepal.Length Sepal.Width  Petal.Length Petal.Width  Species      #> <0 rows> (or 0-length row.names) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the SQL data type of an object — dbDataType","title":"Determine the SQL data type of an object — dbDataType","text":"Returns SQL string describes SQL data type used object. default implementation generic determines SQL type R object according SQL 92 specification, may serve starting point driver implementations. DBI also provides implementation data.frame return character vector giving type column dataframe.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Determine the SQL data type of an object — dbDataType","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbDataType(\"BigQueryConnection\", \"\") bigrquery::dbDataType(\"BigQueryDriver\", \"\") duckdb::dbDataType(\"duckdb_connection\", \"\") duckdb::dbDataType(\"duckdb_driver\", \"\") lazysf::dbDataType(\"SFSQLDriver\", \"\") odbc::dbDataType(\"OdbcConnection\", \"\") odbc::dbDataType(\"OdbcConnection\", \"data.frame\") odbc::dbDataType(\"OdbcDriver\", \"\") odbc::dbDataType(\"OdbcDriver\", \"data.frame\") odbc::dbDataType(\"OdbcDriver\", \"list\") pool::dbDataType(\"Pool\", \"\") RAthena::dbDataType(\"AthenaConnection\", \"\") RAthena::dbDataType(\"AthenaConnection\", \"data.frame\") RAthena::dbDataType(\"AthenaDriver\", \"\") RAthena::dbDataType(\"AthenaDriver\", \"list\") RH2::dbDataType(\"H2Connection\", \"\") RJDBC::dbDataType(\"JDBCConnection\", \"\") RMariaDB::dbDataType(\"MariaDBConnection\", \"\") RMariaDB::dbDataType(\"MariaDBDriver\", \"\") RMySQL::dbDataType(\"MySQLConnection\", \"\") RMySQL::dbDataType(\"MySQLDriver\", \"\") RPostgres::dbDataType(\"PqConnection\", \"\") RPostgres::dbDataType(\"PqDriver\", \"\") RPostgreSQL::dbDataType(\"PostgreSQLObject\", \"\") RPresto::dbDataType(\"PrestoDriver\", \"\") RSQLite::dbDataType(\"SQLiteConnection\", \"\") RSQLite::dbDataType(\"SQLiteDriver\", \"\") sergeant::dbDataType(\"DrillConnection\", \"\") sf::dbDataType(\"DBIObject\", \"sf\") sf::dbDataType(\"PostgreSQLConnection\", \"sf\") sparklyr::dbDataType(\"spark_connection\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the SQL data type of an object — dbDataType","text":"","code":"dbDataType(dbObj, obj, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the SQL data type of an object — dbDataType","text":"dbObj object inheriting DBIDriver DBIConnection obj R object whose SQL type want determine. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the SQL data type of an object — dbDataType","text":"dbDataType() returns SQL type corresponds obj argument non-empty character string. data frames, character vector one element per column returned.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Determine the SQL data type of an object — dbDataType","text":"data types supported databases different data types R, mapping primitive types straightforward: many fixed varying length character types mapped character vectors Fixed-precision (non-IEEE) numbers mapped either numeric integer vectors. Notice many DBMS follow IEEE arithmetic, potential problems /overflows loss precision.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Determine the SQL data type of an object — dbDataType","text":"error raised invalid values obj argument NULL value.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Determine the SQL data type of an object — dbDataType","text":"backend can override dbDataType() generic driver class. generic expects arbitrary object second argument. query values returned default implementation, run example(dbDataType, package = \"DBI\"). backend needs override generic, must accept basic R data types second argument, namely logical, integer, numeric, character, dates (see Dates), date-time (see DateTimeClasses), difftime. database supports blobs, method also must accept lists raw vectors, blob::blob objects. -objects (.e., wrapped ()) must supported return results unwrapped counterparts. SQL data type factor ordered character. behavior object types specified. data types returned dbDataType() usable SQL statement form \"CREATE TABLE test (...)\".","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbDataType.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Determine the SQL data type of an object — dbDataType","text":"","code":"dbDataType(ANSI(), 1:5) #> [1] \"INT\" dbDataType(ANSI(), 1) #> [1] \"DOUBLE\" dbDataType(ANSI(), TRUE) #> [1] \"SMALLINT\" dbDataType(ANSI(), Sys.Date()) #> [1] \"DATE\" dbDataType(ANSI(), Sys.time()) #> [1] \"TIMESTAMP\" dbDataType(ANSI(), Sys.time() - as.POSIXct(Sys.Date())) #> [1] \"TIME\" dbDataType(ANSI(), c(\"x\", \"abc\")) #> [1] \"TEXT\" dbDataType(ANSI(), list(raw(10), raw(20))) #> [1] \"BLOB\" dbDataType(ANSI(), I(3)) #> [1] \"DOUBLE\"  dbDataType(ANSI(), iris) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species  #>     \"DOUBLE\"     \"DOUBLE\"     \"DOUBLE\"     \"DOUBLE\"       \"TEXT\"   con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbDataType(con, 1:5) #> [1] \"INTEGER\" dbDataType(con, 1) #> [1] \"REAL\" dbDataType(con, TRUE) #> [1] \"INTEGER\" dbDataType(con, Sys.Date()) #> [1] \"REAL\" dbDataType(con, Sys.time()) #> [1] \"REAL\" dbDataType(con, Sys.time() - as.POSIXct(Sys.Date())) #> [1] \"REAL\" dbDataType(con, c(\"x\", \"abc\")) #> [1] \"TEXT\" dbDataType(con, list(raw(10), raw(20))) #> [1] \"BLOB\" dbDataType(con, I(3)) #> [1] \"REAL\"  dbDataType(con, iris) #> Sepal.Length  Sepal.Width Petal.Length  Petal.Width      Species  #>     \"DOUBLE\"     \"DOUBLE\"     \"DOUBLE\"     \"DOUBLE\"       \"TEXT\"   dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbDisconnect.html","id":null,"dir":"Reference","previous_headings":"","what":"Disconnect (close) a connection — dbDisconnect","title":"Disconnect (close) a connection — dbDisconnect","text":"closes connection, discards pending work, frees resources (e.g., memory, sockets).","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDisconnect.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Disconnect (close) a connection — dbDisconnect","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbDisconnect(\"AzureKustoDriver\") bigrquery::dbDisconnect(\"BigQueryConnection\") DatabaseConnector::dbDisconnect(\"DatabaseConnectorConnection\") dittodb::dbDisconnect(\"DBIMockConnection\") duckdb::dbDisconnect(\"duckdb_connection\") implyr::dbDisconnect(\"src_impala\") lazysf::dbDisconnect(\"SFSQLConnection\") odbc::dbDisconnect(\"OdbcConnection\") pool::dbDisconnect(\"Pool\") RAthena::dbDisconnect(\"AthenaConnection\") RJDBC::dbDisconnect(\"JDBCConnection\") RMariaDB::dbDisconnect(\"MariaDBConnection\") RMySQL::dbDisconnect(\"MySQLConnection\") RPostgres::dbDisconnect(\"PqConnection\") RPostgreSQL::dbDisconnect(\"PostgreSQLConnection\") RPresto::dbDisconnect(\"PrestoConnection\") RSQLite::dbDisconnect(\"SQLiteConnection\") sergeant::dbDisconnect(\"DrillConnection\") sparklyr::dbDisconnect(\"spark_connection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDisconnect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Disconnect (close) a connection — dbDisconnect","text":"","code":"dbDisconnect(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbDisconnect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Disconnect (close) a connection — dbDisconnect","text":"conn DBIConnection object, returned dbConnect(). ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDisconnect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Disconnect (close) a connection — dbDisconnect","text":"dbDisconnect() returns TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDisconnect.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Disconnect (close) a connection — dbDisconnect","text":"warning issued garbage collection connection released without calling dbDisconnect(), tested automatically. warning issued immediately calling dbDisconnect() already disconnected invalid connection.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbDisconnect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Disconnect (close) a connection — dbDisconnect","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\") dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbDriver.html","id":null,"dir":"Reference","previous_headings":"","what":"Load and unload database drivers — dbDriver","title":"Load and unload database drivers — dbDriver","text":"methods deprecated, please consult documentation individual backends construction driver instances. dbDriver() helper method used create new driver object given name database corresponding R package. works convention: DBI-extending packages provide exported object name package. dbDriver() just looks object right places: know database connecting , call function directly. dbUnloadDriver() implemented modern backends.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDriver.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load and unload database drivers — dbDriver","text":"","code":"dbDriver(drvName, ...)  dbUnloadDriver(drv, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbDriver.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load and unload database drivers — dbDriver","text":"drvName character name driver instantiate. ... arguments passed driver drvName. drv object inherits DBIDriver created dbDriver.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDriver.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load and unload database drivers — dbDriver","text":"case dbDriver, driver object whose class extends DBIDriver. object may used create connections actual DBMS engine. case dbUnloadDriver, logical indicating whether operation succeeded .","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbDriver.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Load and unload database drivers — dbDriver","text":"client part database communication initialized (typically dynamically loading C code, etc.) note connecting database engine needs done calls dbConnect.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbDriver.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load and unload database drivers — dbDriver","text":"","code":"# Create a RSQLite driver with a string d <- dbDriver(\"SQLite\") d #> <SQLiteDriver>  # But better, access the object directly RSQLite::SQLite() #> <SQLiteDriver>"},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"Executes statement returns number rows affected. dbExecute() comes default implementation (work backends) calls dbSendStatement(), dbGetRowsAffected(), ensuring result always free-d dbClearResult(). passing query parameters, see dbBind(), particular \"command execution flow\" section.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbExecute(\"AzureKustoConnection\", \"character\") DatabaseConnector::dbExecute(\"DatabaseConnectorConnection\", \"character\") implyr::dbExecute(\"src_impala\", \"character\") pool::dbExecute(\"Pool\", \"\") RAthena::dbExecute(\"AthenaConnection\", \"character\") sparklyr::dbExecute(\"spark_connection\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"","code":"dbExecute(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"conn DBIConnection object, returned dbConnect(). statement character string containing SQL. ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"dbExecute() always returns scalar numeric specifies number rows affected statement.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"can also use dbExecute() call stored procedure performs data manipulation actions return result set. execute stored procedure returns result set, data manipulation query also returns result set INSERT ... RETURNING ..., use dbGetQuery() instead.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation notes","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"Subclasses override method provide sort performance optimization.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"error raised issuing statement closed invalid connection, syntax statement invalid, statement non-NA string.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"following arguments part dbExecute() generic (improve compatibility across backends) part DBI specification: params (default: NULL) immediate (default: NULL) must provided named arguments. See \"Specification\" sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"specification-for-the-immediate-argument","dir":"Reference","previous_headings":"","what":"Specification for the immediate argument","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"immediate argument supports distinguishing \"direct\" \"prepared\" APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via \"direct\" API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed \"special\" query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbExecute.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute an update statement, query number of rows affected, and then close result set — dbExecute","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cars\", head(cars, 3)) dbReadTable(con, \"cars\")   # there are 3 rows #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 dbExecute(   con,   \"INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)\" ) #> [1] 3 dbReadTable(con, \"cars\")   # there are now 6 rows #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     1    1 #> 5     2    2 #> 6     3    3  # Pass values using the param argument: dbExecute(   con,   \"INSERT INTO cars (speed, dist) VALUES (?, ?)\",   params = list(4:7, 5:8) ) #> [1] 4 dbReadTable(con, \"cars\")   # there are now 10 rows #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      1    1 #> 5      2    2 #> 6      3    3 #> 7      4    5 #> 8      5    6 #> 9      6    7 #> 10     7    8  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a table exist? — dbExistsTable","title":"Does a table exist? — dbExistsTable","text":"Returns table given name exists database.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Does a table exist? — dbExistsTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbExistsTable(\"AzureKustoConnection\", \"\") bigrquery::dbExistsTable(\"BigQueryConnection\", \"character\") DatabaseConnector::dbExistsTable(\"DatabaseConnectorConnection\", \"character\") dittodb::dbExistsTable(\"DBIMockConnection\", \"character\") dittodb::dbExistsTable(\"DBIMockConnection\", \"Id\") duckdb::dbExistsTable(\"duckdb_connection\", \"character\") lazysf::dbExistsTable(\"SFSQLConnection\", \"\") odbc::dbExistsTable(\"Microsoft SQL Server\", \"character\") odbc::dbExistsTable(\"Microsoft SQL Server\", \"Id\") odbc::dbExistsTable(\"Microsoft SQL Server\", \"SQL\") odbc::dbExistsTable(\"OdbcConnection\", \"character\") odbc::dbExistsTable(\"OdbcConnection\", \"Id\") odbc::dbExistsTable(\"OdbcConnection\", \"SQL\") pool::dbExistsTable(\"Pool\", \"\") RAthena::dbExistsTable(\"AthenaConnection\", \"character\") RJDBC::dbExistsTable(\"JDBCConnection\", \"\") RMariaDB::dbExistsTable(\"MariaDBConnection\", \"character\") RMySQL::dbExistsTable(\"MySQLConnection\", \"character\") RPostgres::dbExistsTable(\"PqConnection\", \"character\") RPostgres::dbExistsTable(\"PqConnection\", \"Id\") RPostgreSQL::dbExistsTable(\"PostgreSQLConnection\", \"character\") RPresto::dbExistsTable(\"PrestoConnection\", \"\") RSQLite::dbExistsTable(\"SQLiteConnection\", \"character\") sparklyr::dbExistsTable(\"spark_connection\", \"character\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a table exist? — dbExistsTable","text":"","code":"dbExistsTable(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a table exist? — dbExistsTable","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a table exist? — dbExistsTable","text":"dbExistsTable() returns logical scalar, TRUE table view specified name argument exists, FALSE otherwise. includes temporary tables supported database.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Does a table exist? — dbExistsTable","text":"error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Does a table exist? — dbExistsTable","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbExistsTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done tables listed dbListTables(), dbExistsTable() returns TRUE.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbExistsTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does a table exist? — dbExistsTable","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbExistsTable(con, \"iris\") #> [1] FALSE dbWriteTable(con, \"iris\", iris) dbExistsTable(con, \"iris\") #> [1] TRUE  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch records from a previously executed query — dbFetch","title":"Fetch records from a previously executed query — dbFetch","text":"Fetch next n elements (rows) result set return data.frame.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Fetch records from a previously executed query — dbFetch","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbFetch(\"AzureKustoResult\", \"\") bigrquery::dbFetch(\"BigQueryResult\", \"\") DatabaseConnector::dbFetch(\"DatabaseConnectorDbiResult\", \"\") DatabaseConnector::dbFetch(\"DatabaseConnectorJdbcResult\", \"\") dittodb::dbFetch(\"DBIMockResult\", \"\") duckdb::dbFetch(\"duckdb_result\", \"\") lazysf::dbFetch(\"SFSQLResult\", \"\") odbc::dbFetch(\"OdbcResult\", \"\") RAthena::dbFetch(\"AthenaResult\", \"\") RMariaDB::dbFetch(\"MariaDBResult\", \"\") RMySQL::dbFetch(\"MySQLResult\", \"missing\") RMySQL::dbFetch(\"MySQLResult\", \"numeric\") RPostgres::dbFetch(\"PqResult\", \"\") RPresto::dbFetch(\"PrestoResult\", \"missing\") RPresto::dbFetch(\"PrestoResult\", \"numeric\") RSQLite::dbFetch(\"SQLiteResult\", \"\") sergeant::dbFetch(\"DrillResult\", \"\") sparklyr::dbFetch(\"DBISparkResult\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch records from a previously executed query — dbFetch","text":"","code":"dbFetch(res, n = -1, ...)  dbFetchArrow(res, ...)  dbFetchArrowChunk(res, ...)  fetch(res, n = -1, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch records from a previously executed query — dbFetch","text":"res object inheriting DBIResult, created dbSendQuery(). n maximum number records retrieve per fetch. Use n = -1 n = Inf retrieve pending records.  implementations may recognize special values. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch records from a previously executed query — dbFetch","text":"dbFetch() always returns data.frame many rows records fetched many columns fields result set, even result single value one zero rows. Passing n = NA supported returns arbitrary number rows (least one) specified driver, remaining rows result set.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch records from a previously executed query — dbFetch","text":"fetch() provided compatibility older DBI clients - new code strongly encouraged use dbFetch(). default implementation dbFetch() calls fetch() compatible existing code. Modern backends implement dbFetch() .","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"the-data-retrieval-flow","dir":"Reference","previous_headings":"","what":"The data retrieval flow","title":"Fetch records from a previously executed query — dbFetch","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Fetch records from a previously executed query — dbFetch","text":"attempt fetch closed result set raises error. n argument atomic whole number greater equal -1 Inf, error raised, subsequent call dbFetch() proper n argument succeeds. Calling dbFetch() result set data manipulation query created dbSendStatement() can fetched return empty data frame, warning.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Fetch records from a previously executed query — dbFetch","text":"Fetching multi-row queries one columns default returns entire result. Multi-row queries can also fetched progressively passing whole number (integer numeric) n argument. value Inf n argument supported also returns full result. rows available fetched, result returned full without warning. fewer rows requested returned, fetches return data frame zero rows. zero rows fetched, columns data frame still fully typed. Fetching fewer rows available permitted, warning issued clearing result set. column named row_names treated like column. column types returned data frame depend data returned: integer (coercible integer) integer values -2^31 2^31 - 1, NA SQL NULL values numeric numbers fractional component, NA SQL NULL values logical Boolean values (backends may return integer); NA SQL NULL values character text, NA SQL NULL values lists raw blobs NULL entries SQL NULL values coercible using .Date() dates, NA SQL NULL values (also applies return value SQL function current_date) coercible using hms::as_hms() times, NA SQL NULL values (also applies return value SQL function current_time) coercible using .POSIXct() timestamps, NA SQL NULL values (also applies return value SQL function current_timestamp) dates timestamps supported backend, following R types used: Date dates (also applies return value SQL function current_date) POSIXct timestamps (also applies return value SQL function current_timestamp) R built-type lossless support full range 64-bit larger integers. 64-bit integers returned query, following rules apply: Values returned container support full range valid 64-bit values (integer64 class bit64 package) Coercion numeric always returns number close possible true value Loss precision converting numeric gives warning Conversion character always returns lossless decimal representation data","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbFetch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch records from a previously executed query — dbFetch","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars)  # Fetch all results rs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(rs) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 dbClearResult(rs)  # Fetch in chunks rs <- dbSendQuery(con, \"SELECT * FROM mtcars\") while (!dbHasCompleted(rs)) {   chunk <- dbFetch(rs, 10)   print(nrow(chunk)) } #> [1] 10 #> [1] 10 #> [1] 10 #> [1] 2  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetConnectArgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Get connection arguments — dbGetConnectArgs","title":"Get connection arguments — dbGetConnectArgs","text":"Returns arguments stored DBIConnector object inspection, optionally evaluating . function called dbConnect() usually need called directly.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetConnectArgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get connection arguments — dbGetConnectArgs","text":"","code":"dbGetConnectArgs(drv, eval = TRUE, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetConnectArgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get connection arguments — dbGetConnectArgs","text":"drv object inheriting DBIConnector. eval Set FALSE return functions generate argument instead evaluating . ... arguments passed methods. otherwise used.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetConnectArgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get connection arguments — dbGetConnectArgs","text":"","code":"cnr <- new(\"DBIConnector\",   .drv = RSQLite::SQLite(),   .conn_args = list(dbname = \":memory:\", password = function() \"supersecret\") ) dbGetConnectArgs(cnr) #> $dbname #> [1] \":memory:\" #>  #> $password #> [1] \"supersecret\" #>  dbGetConnectArgs(cnr, eval = FALSE) #> $dbname #> [1] \":memory:\" #>  #> $password #> function() \"supersecret\" #> <environment: 0x556b88542fd0> #>"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetDBIVersion.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the current version of the package. — dbGetDBIVersion","title":"Determine the current version of the package. — dbGetDBIVersion","text":"Determine current version package.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetDBIVersion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the current version of the package. — dbGetDBIVersion","text":"","code":"dbGetDBIVersion()"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetException.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DBMS exceptions — dbGetException","title":"Get DBMS exceptions — dbGetException","text":"DEPRECATED. Backends use R's condition system signal errors warnings.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetException.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DBMS exceptions — dbGetException","text":"","code":"dbGetException(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetException.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DBMS exceptions — dbGetException","text":"conn DBIConnection object, returned dbConnect(). ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetException.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DBMS exceptions — dbGetException","text":"list elements errorNum (integer error number) errorMsg (character string) describing last error connection conn.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Get DBMS metadata — dbGetInfo","title":"Get DBMS metadata — dbGetInfo","text":"Retrieves information objects class DBIDriver, DBIConnection DBIResult.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetInfo.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Get DBMS metadata — dbGetInfo","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbGetInfo(\"BigQueryConnection\") bigrquery::dbGetInfo(\"BigQueryDriver\") DatabaseConnector::dbGetInfo(\"DatabaseConnectorConnection\") DatabaseConnector::dbGetInfo(\"DatabaseConnectorDriver\") dittodb::dbGetInfo(\"DBIMockConnection\") dittodb::dbGetInfo(\"DBIMockResult\") duckdb::dbGetInfo(\"duckdb_connection\") duckdb::dbGetInfo(\"duckdb_driver\") duckdb::dbGetInfo(\"duckdb_result\") lazysf::dbGetInfo(\"SFSQLDriver\") odbc::dbGetInfo(\"OdbcConnection\") odbc::dbGetInfo(\"OdbcDriver\") pool::dbGetInfo(\"Pool\") RAthena::dbGetInfo(\"AthenaConnection\") RAthena::dbGetInfo(\"AthenaResult\") RJDBC::dbGetInfo(\"JDBCConnection\") RJDBC::dbGetInfo(\"JDBCDriver\") RJDBC::dbGetInfo(\"JDBCResult\") RMariaDB::dbGetInfo(\"MariaDBConnection\") RMariaDB::dbGetInfo(\"MariaDBDriver\") RMySQL::dbGetInfo(\"MySQLConnection\") RMySQL::dbGetInfo(\"MySQLDriver\") RMySQL::dbGetInfo(\"MySQLResult\") RPostgres::dbGetInfo(\"PqConnection\") RPostgres::dbGetInfo(\"PqDriver\") RPostgreSQL::dbGetInfo(\"PostgreSQLConnection\") RPostgreSQL::dbGetInfo(\"PostgreSQLDriver\") RPostgreSQL::dbGetInfo(\"PostgreSQLResult\") RPresto::dbGetInfo(\"PrestoConnection\") RPresto::dbGetInfo(\"PrestoDriver\") RPresto::dbGetInfo(\"PrestoResult\") RSQLite::dbGetInfo(\"SQLiteConnection\") RSQLite::dbGetInfo(\"SQLiteDriver\") sergeant::dbGetInfo(\"DrillConnection\") sergeant::dbGetInfo(\"DrillDriver\") sparklyr::dbGetInfo(\"spark_connection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get DBMS metadata — dbGetInfo","text":"","code":"dbGetInfo(dbObj, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get DBMS metadata — dbGetInfo","text":"dbObj object inheriting DBIObject, .e. DBIDriver, DBIConnection, DBIResult ... arguments methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get DBMS metadata — dbGetInfo","text":"objects class DBIDriver, dbGetInfo() returns named list contains least following components: driver.version: package version DBI backend, client.version: version DBMS client library. objects class DBIConnection, dbGetInfo() returns named list contains least following components: db.version: version database server, dbname: database name, username: username connect database, host: hostname database server, port: port database server. must contain password component. Components applicable set NA. objects class DBIResult, dbGetInfo() returns named list contains least following components: statatment: statement used dbSendQuery() dbExecute(), returned dbGetStatement(), row.count: number rows fetched far (queries), returned dbGetRowCount(), rows.affected: number rows affected (statements), returned dbGetRowsAffected() .completed: logical indicates query statement completed, returned dbHasCompleted().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetInfo.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation notes","title":"Get DBMS metadata — dbGetInfo","text":"default implementation DBIResult objects constructs list return values corresponding methods, dbGetStatement(), dbGetRowCount(), dbGetRowsAffected(), dbHasCompleted().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Send query, retrieve results and then clear result set — dbGetQuery","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"Returns result query data frame. dbGetQuery() comes default implementation (work backends) calls dbSendQuery(), dbFetch(), ensuring result always free-d dbClearResult(). retrieving chunked/paged results passing query parameters, see dbSendQuery(), particular \"data retrieval flow\" section.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbGetQuery(\"AzureKustoConnection\", \"character\") DatabaseConnector::dbGetQuery(\"DatabaseConnectorConnection\", \"character\") dittodb::dbGetQuery(\"DBIMockRPostgreSQLConnection\", \"character\") implyr::dbGetQuery(\"src_impala\", \"character\") odbc::dbGetQuery(\"OdbcConnection\", \"character\") pool::dbGetQuery(\"Pool\", \"\") RAthena::dbGetQuery(\"AthenaConnection\", \"character\") RH2::dbGetQuery(\"H2Connection\", \"character\") RJDBC::dbGetQuery(\"JDBCConnection\", \"character\") RPostgreSQL::dbGetQuery(\"PostgreSQLConnection\", \"character\") RPresto::dbGetQuery(\"PrestoConnection\", \"character\") sparklyr::dbGetQuery(\"spark_connection\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"","code":"dbGetQuery(conn, statement, ...)  dbGetQueryArrow(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"conn DBIConnection object, returned dbConnect(). statement character string containing SQL. ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"dbGetQuery() always returns data.frame many rows records fetched many columns fields result set, even result single value one zero rows.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"method SELECT queries (incl. SQL statements return SELECT-alike result, e. g. execution stored procedure data manipulation queries like INSERT ... RETURNING ...). execute stored procedure return result set, use dbExecute(). backends may support data manipulation statements method compatibility reasons.  However, callers strongly advised use dbExecute() data manipulation statements.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"implementation-notes","dir":"Reference","previous_headings":"","what":"Implementation notes","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"Subclasses override method provide sort performance optimization.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"error raised issuing query closed invalid connection, syntax query invalid, query non-NA string. n argument atomic whole number greater equal -1 Inf, error raised, subsequent call dbGetQuery() proper n argument succeeds.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"following arguments part dbGetQuery() generic (improve compatibility across backends) part DBI specification: n (default: -1) params (default: NULL) immediate (default: NULL) must provided named arguments. See \"Specification\" \"Value\" sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"column named row_names treated like column. n argument specifies number rows fetched. omitted, fetching multi-row queries one columns returns entire result. value Inf n argument supported also returns full result. rows available fetched (passing large value n), result returned full without warning. zero rows requested, columns data frame still fully typed. Fetching fewer rows available permitted, warning issued. param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"specification-for-the-immediate-argument","dir":"Reference","previous_headings":"","what":"Specification for the immediate argument","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"immediate argument supports distinguishing \"direct\" \"prepared\" APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via \"direct\" API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed \"special\" query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Send query, retrieve results and then clear result set — dbGetQuery","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) dbGetQuery(con, \"SELECT * FROM mtcars\") #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 11 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 12 16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 13 17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 14 15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 15 10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 16 10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 17 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 18 32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 19 30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 20 33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 21 21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 22 15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 23 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 24 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 25 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 26 27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 27 26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 28 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 29 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 30 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> 31 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> 32 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 dbGetQuery(con, \"SELECT * FROM mtcars\", n = 6) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1  # Pass values using the param argument: # (This query runs eight times, once for each different # parameter. The resulting rows are combined into a single # data frame.) dbGetQuery(   con,   \"SELECT COUNT(*) FROM mtcars WHERE cyl = ?\",   params = list(1:8) ) #>   COUNT(*) #> 1        0 #> 2        0 #> 3        0 #> 4       11 #> 5        0 #> 6        7 #> 7        0 #> 8       14  dbDisconnect(con) # Retrieve data as arrow table con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) dbGetQueryArrow(con, \"SELECT * FROM mtcars\") #> <nanoarrow_array_stream struct<mpg: double, cyl: double, disp: double, hp: double, drat: double, wt: double, qsec: double, vs: double, am: double, gear: double, carb: double>> #>  $ get_schema:function ()   #>  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   #>  $ release   :function ()    dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowCount.html","id":null,"dir":"Reference","previous_headings":"","what":"The number of rows fetched so far — dbGetRowCount","title":"The number of rows fetched so far — dbGetRowCount","text":"Returns total number rows actually fetched calls dbFetch() result set.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowCount.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"The number of rows fetched so far — dbGetRowCount","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbGetRowCount(\"BigQueryResult\") DatabaseConnector::dbGetRowCount(\"DatabaseConnectorDbiResult\") DatabaseConnector::dbGetRowCount(\"DatabaseConnectorJdbcResult\") duckdb::dbGetRowCount(\"duckdb_result\") odbc::dbGetRowCount(\"OdbcResult\") RMariaDB::dbGetRowCount(\"MariaDBResult\") RMySQL::dbGetRowCount(\"MySQLResult\") RPostgres::dbGetRowCount(\"PqResult\") RPostgreSQL::dbGetRowCount(\"PostgreSQLResult\") RPresto::dbGetRowCount(\"PrestoResult\") RSQLite::dbGetRowCount(\"SQLiteResult\") sparklyr::dbGetRowCount(\"DBISparkResult\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowCount.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The number of rows fetched so far — dbGetRowCount","text":"","code":"dbGetRowCount(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowCount.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The number of rows fetched so far — dbGetRowCount","text":"res object inheriting DBIResult. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowCount.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The number of rows fetched so far — dbGetRowCount","text":"dbGetRowCount() returns scalar number (integer numeric), number rows fetched far. calling dbSendQuery(), row count initially zero. call dbFetch() without limit, row count matches total number rows returned. Fetching limited number rows increases number rows number rows returned, even fetching past end result set. queries empty result set, zero returned even fetching. data manipulation statements issued dbSendStatement(), zero returned calling dbFetch().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowCount.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"The number of rows fetched so far — dbGetRowCount","text":"Attempting get row count result set cleared dbClearResult() gives error.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowCount.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The number of rows fetched so far — dbGetRowCount","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars\")  dbGetRowCount(rs) #> [1] 0 ret1 <- dbFetch(rs, 10) dbGetRowCount(rs) #> [1] 10 ret2 <- dbFetch(rs) dbGetRowCount(rs) #> [1] 32 nrow(ret1) + nrow(ret2) #> [1] 32  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":null,"dir":"Reference","previous_headings":"","what":"The number of rows affected — dbGetRowsAffected","title":"The number of rows affected — dbGetRowsAffected","text":"method returns number rows added, deleted, updated data manipulation statement.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"The number of rows affected — dbGetRowsAffected","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbGetRowsAffected(\"BigQueryResult\") DatabaseConnector::dbGetRowsAffected(\"DatabaseConnectorDbiResult\") DatabaseConnector::dbGetRowsAffected(\"DatabaseConnectorJdbcResult\") dittodb::dbGetRowsAffected(\"DBIMockResult\") duckdb::dbGetRowsAffected(\"duckdb_result\") odbc::dbGetRowsAffected(\"OdbcResult\") RMariaDB::dbGetRowsAffected(\"MariaDBResult\") RMySQL::dbGetRowsAffected(\"MySQLResult\") RPostgres::dbGetRowsAffected(\"PqResult\") RPostgreSQL::dbGetRowsAffected(\"PostgreSQLResult\") RPresto::dbGetRowsAffected(\"PrestoResult\") RSQLite::dbGetRowsAffected(\"SQLiteResult\") sparklyr::dbGetRowsAffected(\"DBISparkResult\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The number of rows affected — dbGetRowsAffected","text":"","code":"dbGetRowsAffected(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The number of rows affected — dbGetRowsAffected","text":"res object inheriting DBIResult. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The number of rows affected — dbGetRowsAffected","text":"dbGetRowsAffected() returns scalar number (integer numeric), number rows affected data manipulation statement issued dbSendStatement(). value available directly call change calling dbFetch(). NA_integer_ NA_numeric_ allowed number rows affected known. queries issued dbSendQuery(), zero returned call dbFetch(). NA values allowed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":"the-command-execution-flow","dir":"Reference","previous_headings":"","what":"The command execution flow","title":"The number of rows affected — dbGetRowsAffected","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"The number of rows affected — dbGetRowsAffected","text":"Attempting get rows affected result set cleared dbClearResult() gives error.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetRowsAffected.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The number of rows affected — dbGetRowsAffected","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendStatement(con, \"DELETE FROM mtcars\") dbGetRowsAffected(rs) #> [1] 32 nrow(mtcars) #> [1] 32  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetStatement.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the statement associated with a result set — dbGetStatement","title":"Get the statement associated with a result set — dbGetStatement","text":"Returns statement passed dbSendQuery() dbSendStatement().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetStatement.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Get the statement associated with a result set — dbGetStatement","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbGetStatement(\"BigQueryResult\") DatabaseConnector::dbGetStatement(\"DatabaseConnectorDbiResult\") DatabaseConnector::dbGetStatement(\"DatabaseConnectorJdbcResult\") duckdb::dbGetStatement(\"duckdb_result\") odbc::dbGetStatement(\"OdbcResult\") RAthena::dbGetStatement(\"AthenaResult\") RMariaDB::dbGetStatement(\"MariaDBResult\") RMySQL::dbGetStatement(\"MySQLResult\") RPostgres::dbGetStatement(\"PqResult\") RPostgreSQL::dbGetStatement(\"PostgreSQLResult\") RPresto::dbGetStatement(\"PrestoResult\") RSQLite::dbGetStatement(\"SQLiteResult\") sergeant::dbGetStatement(\"DrillResult\") sparklyr::dbGetStatement(\"DBISparkResult\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetStatement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the statement associated with a result set — dbGetStatement","text":"","code":"dbGetStatement(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetStatement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the statement associated with a result set — dbGetStatement","text":"res object inheriting DBIResult. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetStatement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the statement associated with a result set — dbGetStatement","text":"dbGetStatement() returns string, query used either dbSendQuery() dbSendStatement().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetStatement.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Get the statement associated with a result set — dbGetStatement","text":"Attempting query statement result set cleared dbClearResult() gives error.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbGetStatement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the statement associated with a result set — dbGetStatement","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars\") dbGetStatement(rs) #> [1] \"SELECT * FROM mtcars\"  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":null,"dir":"Reference","previous_headings":"","what":"Completion status — dbHasCompleted","title":"Completion status — dbHasCompleted","text":"method returns operation completed. SELECT query completed rows fetched. data manipulation statement always completed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Completion status — dbHasCompleted","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbHasCompleted(\"BigQueryResult\") DatabaseConnector::dbHasCompleted(\"DatabaseConnectorDbiResult\") DatabaseConnector::dbHasCompleted(\"DatabaseConnectorJdbcResult\") dittodb::dbHasCompleted(\"DBIMockResult\") duckdb::dbHasCompleted(\"duckdb_result\") lazysf::dbHasCompleted(\"SFSQLResult\") odbc::dbHasCompleted(\"OdbcResult\") RAthena::dbHasCompleted(\"AthenaResult\") RJDBC::dbHasCompleted(\"JDBCResult\") RMariaDB::dbHasCompleted(\"MariaDBResult\") RMySQL::dbHasCompleted(\"MySQLResult\") RPostgres::dbHasCompleted(\"PqResult\") RPostgreSQL::dbHasCompleted(\"PostgreSQLResult\") RPresto::dbHasCompleted(\"PrestoResult\") RSQLite::dbHasCompleted(\"SQLiteResult\") sergeant::dbHasCompleted(\"DrillResult\") sparklyr::dbHasCompleted(\"DBISparkResult\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Completion status — dbHasCompleted","text":"","code":"dbHasCompleted(res, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Completion status — dbHasCompleted","text":"res object inheriting DBIResult. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Completion status — dbHasCompleted","text":"dbHasCompleted() returns logical scalar. query initiated dbSendQuery() non-empty result set, dbHasCompleted() returns FALSE initially TRUE calling dbFetch() without limit. query initiated dbSendStatement(), dbHasCompleted() always returns TRUE.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"the-data-retrieval-flow","dir":"Reference","previous_headings":"","what":"The data retrieval flow","title":"Completion status — dbHasCompleted","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Completion status — dbHasCompleted","text":"Attempting query completion status result set cleared dbClearResult() gives error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Completion status — dbHasCompleted","text":"completion status query guaranteed set FALSE attempting fetch past end entire result. Therefore, query empty result set, initial return value unspecified, result value TRUE trying fetch one row. Similarly, query result set length n, return value unspecified fetching n rows, result value TRUE trying fetch one row.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbHasCompleted.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Completion status — dbHasCompleted","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars\")  dbHasCompleted(rs) #> [1] FALSE ret1 <- dbFetch(rs, 10) dbHasCompleted(rs) #> [1] FALSE ret2 <- dbFetch(rs) dbHasCompleted(rs) #> [1] TRUE  dbClearResult(rs) dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsReadOnly.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this DBMS object read only? — dbIsReadOnly","title":"Is this DBMS object read only? — dbIsReadOnly","text":"generic tests whether database object read .","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsReadOnly.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Is this DBMS object read only? — dbIsReadOnly","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. pool::dbIsReadOnly(\"Pool\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsReadOnly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this DBMS object read only? — dbIsReadOnly","text":"","code":"dbIsReadOnly(dbObj, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsReadOnly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this DBMS object read only? — dbIsReadOnly","text":"dbObj object inheriting DBIObject, .e. DBIDriver, DBIConnection, DBIResult ... arguments methods.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsReadOnly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is this DBMS object read only? — dbIsReadOnly","text":"","code":"dbIsReadOnly(ANSI()) #> [1] FALSE"},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsValid.html","id":null,"dir":"Reference","previous_headings":"","what":"Is this DBMS object still valid? — dbIsValid","title":"Is this DBMS object still valid? — dbIsValid","text":"generic tests whether database object still valid (.e. disconnected cleared).","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsValid.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Is this DBMS object still valid? — dbIsValid","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbIsValid(\"BigQueryConnection\") bigrquery::dbIsValid(\"BigQueryDriver\") bigrquery::dbIsValid(\"BigQueryResult\") DatabaseConnector::dbIsValid(\"DatabaseConnectorDbiConnection\") DatabaseConnector::dbIsValid(\"DatabaseConnectorJdbcConnection\") duckdb::dbIsValid(\"duckdb_connection\") duckdb::dbIsValid(\"duckdb_driver\") duckdb::dbIsValid(\"duckdb_result\") lazysf::dbIsValid(\"SFSQLDriver\") odbc::dbIsValid(\"OdbcConnection\") odbc::dbIsValid(\"OdbcDriver\") odbc::dbIsValid(\"OdbcResult\") pool::dbIsValid(\"Pool\") RAthena::dbIsValid(\"AthenaConnection\") RAthena::dbIsValid(\"AthenaResult\") RJDBC::dbIsValid(\"JDBCConnection\") RJDBC::dbIsValid(\"JDBCResult\") RMariaDB::dbIsValid(\"MariaDBConnection\") RMariaDB::dbIsValid(\"MariaDBDriver\") RMariaDB::dbIsValid(\"MariaDBResult\") RMySQL::dbIsValid(\"MySQLConnection\") RMySQL::dbIsValid(\"MySQLDriver\") RMySQL::dbIsValid(\"MySQLResult\") RPostgres::dbIsValid(\"PqConnection\") RPostgres::dbIsValid(\"PqDriver\") RPostgres::dbIsValid(\"PqResult\") RPresto::dbIsValid(\"PrestoResult\") RSQLite::dbIsValid(\"SQLiteConnection\") RSQLite::dbIsValid(\"SQLiteDriver\") RSQLite::dbIsValid(\"SQLiteResult\") sergeant::dbIsValid(\"DrillConnection\") sparklyr::dbIsValid(\"DBISparkResult\") sparklyr::dbIsValid(\"spark_connection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsValid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Is this DBMS object still valid? — dbIsValid","text":"","code":"dbIsValid(dbObj, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsValid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Is this DBMS object still valid? — dbIsValid","text":"dbObj object inheriting DBIObject, .e. DBIDriver, DBIConnection, DBIResult ... arguments methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsValid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Is this DBMS object still valid? — dbIsValid","text":"dbIsValid() returns logical scalar, TRUE object specified dbObj valid, FALSE otherwise. DBIConnection object initially valid, becomes invalid disconnecting dbDisconnect(). invalid connection object (e.g., drivers object saved file restored), method also returns FALSE. DBIResult object valid call dbSendQuery(), stays valid even rows fetched; clearing dbClearResult() invalidates . DBIResult object also valid call dbSendStatement(), stays valid querying number rows affected; clearing dbClearResult() invalidates . connection database system dropped (e.g., due connectivity problems, server failure, etc.), dbIsValid() return FALSE. tested automatically.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbIsValid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Is this DBMS object still valid? — dbIsValid","text":"","code":"dbIsValid(RSQLite::SQLite()) #> [1] TRUE  con <- dbConnect(RSQLite::SQLite(), \":memory:\") dbIsValid(con) #> [1] TRUE  rs <- dbSendQuery(con, \"SELECT 1\") dbIsValid(rs) #> [1] TRUE  dbClearResult(rs) dbIsValid(rs) #> [1] FALSE  dbDisconnect(con) dbIsValid(con) #> [1] FALSE"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListConnections.html","id":null,"dir":"Reference","previous_headings":"","what":"List currently open connections — dbListConnections","title":"List currently open connections — dbListConnections","text":"DEPRECATED, drivers longer required implement method. Keep track connections opened require list.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListConnections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List currently open connections — dbListConnections","text":"","code":"dbListConnections(drv, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListConnections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List currently open connections — dbListConnections","text":"drv object inheriting DBIDriver ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListConnections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List currently open connections — dbListConnections","text":"list","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":null,"dir":"Reference","previous_headings":"","what":"List field names of a remote table — dbListFields","title":"List field names of a remote table — dbListFields","text":"Returns field names remote table character vector.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"List field names of a remote table — dbListFields","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbListFields(\"AzureKustoConnection\", \"character\") bigrquery::dbListFields(\"BigQueryConnection\", \"character\") DatabaseConnector::dbListFields(\"DatabaseConnectorConnection\", \"character\") dittodb::dbListFields(\"DBIMockConnection\", \"\") dittodb::dbListFields(\"DBIMockConnection\", \"character\") dittodb::dbListFields(\"DBIMockConnection\", \"Id\") duckdb::dbListFields(\"duckdb_connection\", \"character\") odbc::dbListFields(\"OdbcConnection\", \"character\") pool::dbListFields(\"Pool\", \"\") RAthena::dbListFields(\"AthenaConnection\", \"character\") RJDBC::dbListFields(\"JDBCConnection\", \"\") RMySQL::dbListFields(\"MySQLConnection\", \"character\") RMySQL::dbListFields(\"MySQLResult\", \"missing\") RPostgres::dbListFields(\"PqConnection\", \"character\") RPostgres::dbListFields(\"PqConnection\", \"Id\") RPostgreSQL::dbListFields(\"PostgreSQLConnection\", \"character\") RPostgreSQL::dbListFields(\"PostgreSQLResult\", \"missing\") RPresto::dbListFields(\"PrestoConnection\", \"\") RPresto::dbListFields(\"PrestoConnection\", \"character\") RPresto::dbListFields(\"PrestoConnection\", \"dbplyr_schema\") RPresto::dbListFields(\"PrestoConnection\", \"Id\") RPresto::dbListFields(\"PrestoConnection\", \"SQL\") RPresto::dbListFields(\"PrestoResult\", \"missing\") sergeant::dbListFields(\"DrillConnection\", \"character\") sergeant::dbListFields(\"DrillResult\", \"missing\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List field names of a remote table — dbListFields","text":"","code":"dbListFields(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List field names of a remote table — dbListFields","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List field names of a remote table — dbListFields","text":"dbListFields() returns character vector enumerates fields table correct order. also works temporary tables supported database. returned names suitable quoting dbQuoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"List field names of a remote table — dbListFields","text":"table exist, error raised. Invalid types name argument (e.g., character length equal one, numeric) lead error. error also raised calling method closed invalid connection.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"List field names of a remote table — dbListFields","text":"name argument can string return value dbQuoteIdentifier() value table column return value dbListObjects() is_prefix FALSE column named row_names treated like column.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbListFields.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List field names of a remote table — dbListFields","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) dbListFields(con, \"mtcars\") #>  [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\" #> [11] \"carb\"  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":null,"dir":"Reference","previous_headings":"","what":"List remote objects — dbListObjects","title":"List remote objects — dbListObjects","text":"Returns names remote objects accessible connection data frame. include temporary objects, database backends (particular RMariaDB RMySQL) support . Compared dbListTables(), method also enumerates tables views schemas, returns fully qualified identifiers access objects. allows exploration database objects available current user, including can accessed giving full namespace.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"List remote objects — dbListObjects","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. pool::dbListObjects(\"Pool\") RMariaDB::dbListObjects(\"MariaDBConnection\") RPostgres::dbListObjects(\"PqConnection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List remote objects — dbListObjects","text":"","code":"dbListObjects(conn, prefix = NULL, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List remote objects — dbListObjects","text":"conn DBIConnection object, returned dbConnect(). prefix fully qualified path database's namespace, NULL. argument processed dbUnquoteIdentifier(). given method return objects accessible prefix. ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List remote objects — dbListObjects","text":"dbListObjects() returns data frame columns table is_prefix (order), optionally columns dot (.) prefix. table column type list. object list suitable use argument dbQuoteIdentifier(). is_prefix column logical. data frame contains one row object (schema, table view) accessible prefix (passed) global namespace (prefix omitted). Tables added dbWriteTable() part data frame. soon table removed database, also removed data frame database objects. applies temporary objects supported database. returned names suitable quoting dbQuoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"List remote objects — dbListObjects","text":"error raised calling method closed invalid connection.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"List remote objects — dbListObjects","text":"prefix column indicates table value refers table prefix. call default prefix = NULL, table values is_prefix == FALSE correspond tables returned dbListTables(), table object can quoted dbQuoteIdentifier(). result quoting can passed dbUnquoteIdentifier(). (assume resulting identifier table, one always tell quoted identifier alone whether table schema example. consequence, quote-unquote roundtrip works tables (possibly schema-qualified), database objects like schemata columns.) unquoted results equal original table object. (backends may convenient use Id class, required.) Values table column is_prefix == TRUE can passed prefix argument another call dbListObjects(). data frame returned dbListObject() call prefix argument set, table values is_prefix FALSE can used call dbExistsTable() returns TRUE.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbListObjects.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List remote objects — dbListObjects","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbListObjects(con) #> [1] table     is_prefix #> <0 rows> (or 0-length row.names) dbWriteTable(con, \"mtcars\", mtcars) dbListObjects(con) #>           table is_prefix #> 1 <Id> \"mtcars\"     FALSE  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListResults.html","id":null,"dir":"Reference","previous_headings":"","what":"A list of all pending results — dbListResults","title":"A list of all pending results — dbListResults","text":"DEPRECATED. DBI currenty supports one open result set per connection, need keep track result sets open need functionality.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListResults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A list of all pending results — dbListResults","text":"","code":"dbListResults(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A list of all pending results — dbListResults","text":"conn DBIConnection object, returned dbConnect(). ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListResults.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A list of all pending results — dbListResults","text":"list. results active, empty list. single result active, list one element.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbListTables.html","id":null,"dir":"Reference","previous_headings":"","what":"List remote tables — dbListTables","title":"List remote tables — dbListTables","text":"Returns unquoted names remote tables accessible connection. include views temporary objects, database backends (particular RMariaDB RMySQL) support .","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListTables.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"List remote tables — dbListTables","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbListTables(\"AzureKustoConnection\") bigrquery::dbListTables(\"BigQueryConnection\") DatabaseConnector::dbListTables(\"DatabaseConnectorConnection\") dittodb::dbListTables(\"DBIMockConnection\") duckdb::dbListTables(\"duckdb_connection\") lazysf::dbListTables(\"SFSQLConnection\") odbc::dbListTables(\"OdbcConnection\") pool::dbListTables(\"Pool\") RAthena::dbListTables(\"AthenaConnection\") RJDBC::dbListTables(\"JDBCConnection\") RMariaDB::dbListTables(\"MariaDBConnection\") RMySQL::dbListTables(\"MySQLConnection\") RPostgres::dbListTables(\"PqConnection\") RPostgreSQL::dbListTables(\"PostgreSQLConnection\") RPresto::dbListTables(\"PrestoConnection\") RSQLite::dbListTables(\"SQLiteConnection\") sparklyr::dbListTables(\"spark_connection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListTables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List remote tables — dbListTables","text":"","code":"dbListTables(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbListTables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List remote tables — dbListTables","text":"conn DBIConnection object, returned dbConnect(). ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListTables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List remote tables — dbListTables","text":"dbListTables() returns character vector enumerates tables views database. Tables added dbWriteTable() part list. soon table removed database, also removed list database tables. applies temporary tables supported database. returned names suitable quoting dbQuoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbListTables.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"List remote tables — dbListTables","text":"error raised calling method closed invalid connection.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbListTables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List remote tables — dbListTables","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbListTables(con) #> character(0) dbWriteTable(con, \"mtcars\", mtcars) dbListTables(con) #> [1] \"mtcars\"  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Quote identifiers — dbQuoteIdentifier","title":"Quote identifiers — dbQuoteIdentifier","text":"Call method generate string suitable use query column table name, make sure generate valid SQL protect SQL injection attacks. inverse operation dbUnquoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Quote identifiers — dbQuoteIdentifier","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbQuoteIdentifier(\"BigQueryConnection\", \"character\") bigrquery::dbQuoteIdentifier(\"BigQueryConnection\", \"SQL\") DatabaseConnector::dbQuoteIdentifier(\"DatabaseConnectorConnection\", \"character\") dittodb::dbQuoteIdentifier(\"DBIMockRPostgresConnection\", \"character\") dittodb::dbQuoteIdentifier(\"DBIMockRPostgresConnection\", \"SQL\") duckdb::dbQuoteIdentifier(\"duckdb_connection\", \"\") duckdb::dbQuoteIdentifier(\"duckdb_connection\", \"character\") duckdb::dbQuoteIdentifier(\"duckdb_connection\", \"Id\") duckdb::dbQuoteIdentifier(\"duckdb_connection\", \"SQL\") implyr::dbQuoteIdentifier(\"impala_connection\", \"character\") implyr::dbQuoteIdentifier(\"impala_connection\", \"ident\") odbc::dbQuoteIdentifier(\"OdbcConnection\", \"character\") pool::dbQuoteIdentifier(\"Pool\", \"\") RMariaDB::dbQuoteIdentifier(\"MariaDBConnection\", \"character\") RMariaDB::dbQuoteIdentifier(\"MariaDBConnection\", \"Id\") RMariaDB::dbQuoteIdentifier(\"MariaDBConnection\", \"SQL\") RMySQL::dbQuoteIdentifier(\"MySQLConnection\", \"character\") RPostgres::dbQuoteIdentifier(\"PqConnection\", \"character\") RPostgres::dbQuoteIdentifier(\"PqConnection\", \"Id\") RPostgres::dbQuoteIdentifier(\"PqConnection\", \"SQL\") RPresto::dbQuoteIdentifier(\"PrestoConnection\", \"dbplyr_schema\") RSQLite::dbQuoteIdentifier(\"SQLiteConnection\", \"character\") RSQLite::dbQuoteIdentifier(\"SQLiteConnection\", \"SQL\") sparklyr::dbQuoteIdentifier(\"spark_connection\", \"character\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quote identifiers — dbQuoteIdentifier","text":"","code":"dbQuoteIdentifier(conn, x, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quote identifiers — dbQuoteIdentifier","text":"conn DBIConnection object, returned dbConnect(). x character vector, SQL Id object quote identifier. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quote identifiers — dbQuoteIdentifier","text":"dbQuoteIdentifier() returns object can coerced character, length input. empty character vector function returns length-0 object. names input argument preserved output. passing returned object dbQuoteIdentifier() x argument, returned unchanged. Passing objects class SQL also return unchanged. (backends may convenient return SQL objects achieve behavior, required.)","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Quote identifiers — dbQuoteIdentifier","text":"error raised input contains NA, empty string.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Quote identifiers — dbQuoteIdentifier","text":"Calling dbGetQuery() query format SELECT 1 ... returns data frame identifier, unquoted, column name. Quoted identifiers can used table column names SQL queries, particular queries like SELECT 1 ... SELECT * (SELECT 1) .... method must use quoting mechanism unambiguously different quoting mechanism used strings, query like SELECT ... (SELECT 1 ...) throws error column names match. method can quote column names contain special characters space, dot, comma, quotes used mark strings identifiers, database supports . case, checking validity identifier performed executing query, dbQuoteIdentifier().","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteIdentifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quote identifiers — dbQuoteIdentifier","text":"","code":"# Quoting ensures that arbitrary input is safe for use in a query name <- \"Robert'); DROP TABLE Students;--\" dbQuoteIdentifier(ANSI(), name) #> <SQL> \"Robert'); DROP TABLE Students;--\"  # Use Id() to specify other components such as the schema id_name <- Id(schema = \"schema_name\", table = \"table_name\") id_name #> <Id> \"schema_name\".\"table_name\" dbQuoteIdentifier(ANSI(), id_name) #> <SQL> \"schema_name\".\"table_name\"  # SQL vectors are always passed through as is var_name <- SQL(\"select\") var_name #> <SQL> select dbQuoteIdentifier(ANSI(), var_name) #> <SQL> select  # This mechanism is used to prevent double escaping dbQuoteIdentifier(ANSI(), dbQuoteIdentifier(ANSI(), name)) #> <SQL> \"Robert'); DROP TABLE Students;--\""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":null,"dir":"Reference","previous_headings":"","what":"Quote literal values — dbQuoteLiteral","title":"Quote literal values — dbQuoteLiteral","text":"Call methods generate string suitable use query literal value correct type, make sure generate valid SQL protect SQL injection attacks.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Quote literal values — dbQuoteLiteral","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. duckdb::dbQuoteLiteral(\"duckdb_connection\") pool::dbQuoteLiteral(\"Pool\") RMariaDB::dbQuoteLiteral(\"MariaDBConnection\") RPostgres::dbQuoteLiteral(\"PqConnection\") RPresto::dbQuoteLiteral(\"PrestoConnection\") sparklyr::dbQuoteLiteral(\"spark_connection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quote literal values — dbQuoteLiteral","text":"","code":"dbQuoteLiteral(conn, x, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quote literal values — dbQuoteLiteral","text":"conn DBIConnection object, returned dbConnect(). x vector quote string. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quote literal values — dbQuoteLiteral","text":"dbQuoteLiteral() returns object can coerced character, length input. empty integer, numeric, character, logical, date, time, blob vector, function returns length-0 object. passing returned object dbQuoteLiteral() x argument, returned unchanged. Passing objects class SQL also return unchanged. (backends may convenient return SQL objects achieve behavior, required.)","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Quote literal values — dbQuoteLiteral","text":"Passing list x argument raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Quote literal values — dbQuoteLiteral","text":"returned expression can used SELECT ... query, value dbGetQuery(paste0(\"SELECT \", dbQuoteLiteral(x)))[[1]] must equal x scalar integer, numeric, string, logical. x NA, result must merely satisfy .na(). literals \"NA\" \"NULL\" treated specially. NA translated unquoted SQL NULL, query SELECT * (SELECT 1) ... NULL returns one row.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteLiteral.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quote literal values — dbQuoteLiteral","text":"","code":"# Quoting ensures that arbitrary input is safe for use in a query name <- \"Robert'); DROP TABLE Students;--\" dbQuoteLiteral(ANSI(), name) #> <SQL> 'Robert''); DROP TABLE Students;--'  # NAs become NULL dbQuoteLiteral(ANSI(), c(1:3, NA)) #> <SQL> 1 #> <SQL> 2 #> <SQL> 3 #> <SQL> NULL  # Logicals become integers by default dbQuoteLiteral(ANSI(), c(TRUE, FALSE, NA)) #> <SQL> 1 #> <SQL> 0 #> <SQL> NULL  # Raw vectors become hex strings by default dbQuoteLiteral(ANSI(), list(as.raw(1:3), NULL)) #> <SQL> X'010203' #> <SQL> NULL  # SQL vectors are always passed through as is var_name <- SQL(\"select\") var_name #> <SQL> select dbQuoteLiteral(ANSI(), var_name) #> <SQL> select  # This mechanism is used to prevent double escaping dbQuoteLiteral(ANSI(), dbQuoteLiteral(ANSI(), name)) #> <SQL> 'Robert''); DROP TABLE Students;--'"},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":null,"dir":"Reference","previous_headings":"","what":"Quote literal strings — dbQuoteString","title":"Quote literal strings — dbQuoteString","text":"Call method generate string suitable use query string literal, make sure generate valid SQL protect SQL injection attacks.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Quote literal strings — dbQuoteString","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbQuoteString(\"BigQueryConnection\", \"character\") bigrquery::dbQuoteString(\"BigQueryConnection\", \"SQL\") DatabaseConnector::dbQuoteString(\"DatabaseConnectorConnection\", \"character\") dittodb::dbQuoteString(\"DBIMockMariaDBConnection\", \"character\") dittodb::dbQuoteString(\"DBIMockMariaDBConnection\", \"SQL\") dittodb::dbQuoteString(\"DBIMockRPostgresConnection\", \"character\") dittodb::dbQuoteString(\"DBIMockRPostgresConnection\", \"SQL\") odbc::dbQuoteString(\"Hive\", \"character\") pool::dbQuoteString(\"Pool\", \"\") RAthena::dbQuoteString(\"AthenaConnection\", \"character\") RAthena::dbQuoteString(\"AthenaConnection\", \"Date\") RAthena::dbQuoteString(\"AthenaConnection\", \"POSIXct\") RMariaDB::dbQuoteString(\"MariaDBConnection\", \"character\") RMariaDB::dbQuoteString(\"MariaDBConnection\", \"SQL\") RMySQL::dbQuoteString(\"MySQLConnection\", \"character\") RMySQL::dbQuoteString(\"MySQLConnection\", \"SQL\") RPostgres::dbQuoteString(\"PqConnection\", \"character\") RPostgres::dbQuoteString(\"PqConnection\", \"SQL\") sparklyr::dbQuoteString(\"spark_connection\", \"character\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quote literal strings — dbQuoteString","text":"","code":"dbQuoteString(conn, x, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quote literal strings — dbQuoteString","text":"conn DBIConnection object, returned dbConnect(). x character vector quote string. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quote literal strings — dbQuoteString","text":"dbQuoteString() returns object can coerced character, length input. empty character vector function returns length-0 object. passing returned object dbQuoteString() x argument, returned unchanged. Passing objects class SQL also return unchanged. (backends may convenient return SQL objects achieve behavior, required.)","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Quote literal strings — dbQuoteString","text":"Passing numeric, integer, logical, raw vector, list x argument raises error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Quote literal strings — dbQuoteString","text":"returned expression can used SELECT ... query, scalar character x value dbGetQuery(paste0(\"SELECT \", dbQuoteString(x)))[[1]] must identical x, even x contains spaces, tabs, quotes (single double), backticks, newlines (combination) result dbQuoteString() call coerced back character (even repeatedly). x NA, result must merely satisfy .na(). strings \"NA\" \"NULL\" treated specially. NA translated unquoted SQL NULL, query SELECT * (SELECT 1) ... NULL returns one row.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbQuoteString.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quote literal strings — dbQuoteString","text":"","code":"# Quoting ensures that arbitrary input is safe for use in a query name <- \"Robert'); DROP TABLE Students;--\" dbQuoteString(ANSI(), name) #> <SQL> 'Robert''); DROP TABLE Students;--'  # NAs become NULL dbQuoteString(ANSI(), c(\"x\", NA)) #> <SQL> 'x' #> <SQL> NULL  # SQL vectors are always passed through as is var_name <- SQL(\"select\") var_name #> <SQL> select dbQuoteString(ANSI(), var_name) #> <SQL> select  # This mechanism is used to prevent double escaping dbQuoteString(ANSI(), dbQuoteString(ANSI(), name)) #> <SQL> 'Robert''); DROP TABLE Students;--'"},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Read database tables as data frames — dbReadTable","title":"Read database tables as data frames — dbReadTable","text":"Reads database table data frame, optionally converting column row names converting column names valid R identifiers.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Read database tables as data frames — dbReadTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbReadTable(\"AzureKustoConnection\", \"character\") bigrquery::dbReadTable(\"BigQueryConnection\", \"character\") DatabaseConnector::dbReadTable(\"DatabaseConnectorConnection\", \"character\") lazysf::dbReadTable(\"SFSQLConnection\", \"character\") pool::dbReadTable(\"Pool\", \"\") RJDBC::dbReadTable(\"JDBCConnection\", \"\") RJDBC::dbReadTable(\"JDBCConnection\", \"character\") RMariaDB::dbReadTable(\"MariaDBConnection\", \"character\") RMySQL::dbReadTable(\"MySQLConnection\", \"character\") RPostgres::dbReadTable(\"PqConnection\", \"character\") RPostgreSQL::dbReadTable(\"PostgreSQLConnection\", \"character\") RPresto::dbReadTable(\"PrestoConnection\", \"\") RPresto::dbReadTable(\"PrestoConnection\", \"character\") RPresto::dbReadTable(\"PrestoConnection\", \"dbplyr_schema\") RPresto::dbReadTable(\"PrestoConnection\", \"Id\") RPresto::dbReadTable(\"PrestoConnection\", \"SQL\") RSQLite::dbReadTable(\"SQLiteConnection\", \"character\") sparklyr::dbReadTable(\"spark_connection\", \"character\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read database tables as data frames — dbReadTable","text":"","code":"dbReadTable(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read database tables as data frames — dbReadTable","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read database tables as data frames — dbReadTable","text":"dbReadTable() returns data frame contains complete data remote table, effectively result calling dbGetQuery() SELECT * <name>. empty table returned data frame zero rows. presence rownames depends row.names argument, see sqlColumnToRownames() details: FALSE NULL, returned data frame row names. TRUE, column named \"row_names\" converted row names. NA, column named \"row_names\" converted row names exists, otherwise translation occurs. string, specifies name column remote table contains row names. default row.names = FALSE. database supports identifiers special characters, columns returned data frame converted valid R identifiers check.names argument TRUE, check.names = FALSE, returned table non-syntactic column names without quotes.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read database tables as data frames — dbReadTable","text":"function returns data frame. Use dbReadTableArrow() obtain Arrow object.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Read database tables as data frames — dbReadTable","text":"error raised table exist. error raised row.names TRUE \"row_names\" column exists, error raised row.names set string corresponding column exists. error raised calling method closed invalid connection. error raised name processed dbQuoteIdentifier() results non-scalar. Unsupported values row.names check.names (non-scalars, unsupported data types, NA check.names) also raise error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Read database tables as data frames — dbReadTable","text":"following arguments part dbReadTable() generic (improve compatibility across backends) part DBI specification: row.names (default: FALSE) check.names must provided named arguments. See \"Value\" section details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Read database tables as data frames — dbReadTable","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbReadTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read database tables as data frames — dbReadTable","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars[1:10, ]) dbReadTable(con, \"mtcars\") #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":null,"dir":"Reference","previous_headings":"","what":"Read database tables as Arrow objects — dbReadTableArrow","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"Reads database table Arrow object.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"","code":"dbReadTableArrow(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"dbReadTableArrow() returns data frame contains complete data remote table, effectively result calling dbGetQueryArrow() SELECT * <name>. empty table returned data frame zero rows.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"function returns Arrow object. Convert data frame .data.frame() use dbReadTable() obtain data frame.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"error raised table exist. error raised calling method closed invalid connection. error raised name processed dbQuoteIdentifier() results non-scalar.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbReadTableArrow() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbReadTableArrow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read database tables as Arrow objects — dbReadTableArrow","text":"","code":"# Read data as Arrow table con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars[1:10, ]) dbReadTableArrow(con, \"mtcars\") #> <nanoarrow_array_stream struct<mpg: double, cyl: double, disp: double, hp: double, drat: double, wt: double, qsec: double, vs: double, am: double, gear: double, carb: double>> #>  $ get_schema:function ()   #>  $ get_next  :function (schema = x$get_schema(), validate = TRUE)   #>  $ release   :function ()    dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove a table from the database — dbRemoveTable","title":"Remove a table from the database — dbRemoveTable","text":"Remove remote table (e.g., created dbWriteTable()) database.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Remove a table from the database — dbRemoveTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbRemoveTable(\"AzureKustoConnection\", \"\") bigrquery::dbRemoveTable(\"BigQueryConnection\", \"character\") DatabaseConnector::dbRemoveTable(\"DatabaseConnectorConnection\", \"\") dittodb::dbRemoveTable(\"DBIMockConnection\", \"character\") duckdb::dbRemoveTable(\"duckdb_connection\", \"character\") odbc::dbRemoveTable(\"OdbcConnection\", \"character\") pool::dbRemoveTable(\"Pool\", \"\") RAthena::dbRemoveTable(\"AthenaConnection\", \"character\") RJDBC::dbRemoveTable(\"JDBCConnection\", \"\") RMariaDB::dbRemoveTable(\"MariaDBConnection\", \"character\") RMySQL::dbRemoveTable(\"MySQLConnection\", \"character\") RPostgres::dbRemoveTable(\"PqConnection\", \"character\") RPostgreSQL::dbRemoveTable(\"PostgreSQLConnection\", \"character\") RPresto::dbRemoveTable(\"PrestoConnection\", \"\") RSQLite::dbRemoveTable(\"SQLiteConnection\", \"character\") sparklyr::dbRemoveTable(\"spark_connection\", \"character\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove a table from the database — dbRemoveTable","text":"","code":"dbRemoveTable(conn, name, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove a table from the database — dbRemoveTable","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove a table from the database — dbRemoveTable","text":"dbRemoveTable() returns TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Remove a table from the database — dbRemoveTable","text":"table exist, error raised. attempt remove view function may result error. error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Remove a table from the database — dbRemoveTable","text":"following arguments part dbRemoveTable() generic (improve compatibility across backends) part DBI specification: temporary (default: FALSE) fail_if_missing (default: TRUE) arguments must provided named arguments. temporary TRUE, call dbRemoveTable() consider temporary tables. backends support argument. particular, permanent tables name left untouched. fail_if_missing FALSE, call dbRemoveTable() succeeds table exist.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Remove a table from the database — dbRemoveTable","text":"table removed dbRemoveTable() appear list tables returned dbListTables(), dbExistsTable() returns FALSE. removal propagates immediately connections database. function can also used remove temporary table. name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbRemoveTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbRemoveTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove a table from the database — dbRemoveTable","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbExistsTable(con, \"iris\") #> [1] FALSE dbWriteTable(con, \"iris\", iris) dbExistsTable(con, \"iris\") #> [1] TRUE dbRemoveTable(con, \"iris\") dbExistsTable(con, \"iris\") #> [1] FALSE  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a query on a given database connection — dbSendQuery","title":"Execute a query on a given database connection — dbSendQuery","text":"dbSendQuery() method submits synchronously executes SQL query database engine.  extract records --- need use dbFetch() method, must call dbClearResult() finish fetching records need. interactive use, almost always prefer dbGetQuery().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Execute a query on a given database connection — dbSendQuery","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbSendQuery(\"AzureKustoConnection\", \"\") bigrquery::dbSendQuery(\"BigQueryConnection\", \"character\") DatabaseConnector::dbSendQuery(\"DatabaseConnectorDbiConnection\", \"character\") DatabaseConnector::dbSendQuery(\"DatabaseConnectorJdbcConnection\", \"character\") dittodb::dbSendQuery(\"DBIMockConnection\", \"character\") dittodb::dbSendQuery(\"DBIMockConnection\", \"SQL\") duckdb::dbSendQuery(\"duckdb_connection\", \"character\") lazysf::dbSendQuery(\"SFSQLConnection\", \"\") odbc::dbSendQuery(\"OdbcConnection\", \"character\") pool::dbSendQuery(\"Pool\", \"\") RAthena::dbSendQuery(\"AthenaConnection\", \"character\") RH2::dbSendQuery(\"H2Connection\", \"character\") RJDBC::dbSendQuery(\"JDBCConnection\", \"character\") RMariaDB::dbSendQuery(\"MariaDBConnection\", \"character\") RMySQL::dbSendQuery(\"MySQLConnection\", \"character\") RPostgres::dbSendQuery(\"PqConnection\", \"\") RPostgreSQL::dbSendQuery(\"PostgreSQLConnection\", \"character\") RPresto::dbSendQuery(\"PrestoConnection\", \"character\") RSQLite::dbSendQuery(\"SQLiteConnection\", \"character\") sergeant::dbSendQuery(\"DrillConnection\", \"\") sparklyr::dbSendQuery(\"spark_connection\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a query on a given database connection — dbSendQuery","text":"","code":"dbSendQuery(conn, statement, ...)  dbSendQueryArrow(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a query on a given database connection — dbSendQuery","text":"conn DBIConnection object, returned dbConnect(). statement character string containing SQL. ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a query on a given database connection — dbSendQuery","text":"dbSendQuery() returns S4 object inherits DBIResult. result set can used dbFetch() extract records. finished using result, make sure clear dbClearResult().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute a query on a given database connection — dbSendQuery","text":"method SELECT queries .  backends may support data manipulation queries method compatibility reasons.  However, callers strongly encouraged use dbSendStatement() data manipulation statements. query submitted database server DBMS executes , possibly generating vast amounts data. data live driver-specific: drivers may choose leave output server transfer piecemeal R, others may transfer data client -- necessarily memory R manages. See individual drivers' dbSendQuery() documentation details.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"the-data-retrieval-flow","dir":"Reference","previous_headings":"","what":"The data retrieval flow","title":"Execute a query on a given database connection — dbSendQuery","text":"section gives complete overview flow execution queries return tabular data data frames. flow, except repeated calling dbBind() dbBindArrow(), implemented dbGetQuery(), sufficient unless want access results paged way parameterized query want reuse. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendQuery() create result set object class DBIResult. Optionally, bind query parameters dbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbColumnInfo() retrieve structure result set without retrieving actual data. Use dbFetch() get entire result set, page results, remaining rows. Fetching zero rows also possible retrieeve structure result set data frame. step can called multiple times. forward paging supported, need cache previous pages need navigate backwards. Use dbHasCompleted() tell done. method returns TRUE rows available fetching. Repeat last four steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Execute a query on a given database connection — dbSendQuery","text":"error raised issuing query closed invalid connection, query non-NA string. error also raised syntax query invalid query parameters given (passing params argument) immediate argument set TRUE.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Execute a query on a given database connection — dbSendQuery","text":"following arguments part dbSendQuery() generic (improve compatibility across backends) part DBI specification: params (default: NULL) immediate (default: NULL) must provided named arguments. See \"Specification\" sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Execute a query on a given database connection — dbSendQuery","text":"warnings occur normal conditions. done, DBIResult object must cleared call dbClearResult(). Failure clear result set leads warning connection closed. backend supports one open result set per connection, issuing second query invalidates already open result set raises warning. newly opened result set valid must cleared dbClearResult(). param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"specification-for-the-immediate-argument","dir":"Reference","previous_headings":"","what":"Specification for the immediate argument","title":"Execute a query on a given database connection — dbSendQuery","text":"immediate argument supports distinguishing \"direct\" \"prepared\" APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via \"direct\" API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed \"special\" query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendQuery.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a query on a given database connection — dbSendQuery","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(rs) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 dbClearResult(rs)  # Pass one set of values with the param argument: rs <- dbSendQuery(   con,   \"SELECT * FROM mtcars WHERE cyl = ?\",   params = list(4L) ) dbFetch(rs) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 dbClearResult(rs)  # Pass multiple sets of values with dbBind(): rs <- dbSendQuery(con, \"SELECT * FROM mtcars WHERE cyl = ?\") dbBind(rs, list(6L)) dbFetch(rs) #>    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3 21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 4 18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 5 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> 6 17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> 7 19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 dbBind(rs, list(8L)) dbFetch(rs) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 2  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 3  16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> 4  17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> 5  15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> 6  10.4   8 472.0 205 2.93 5.250 17.98  0  0    3    4 #> 7  10.4   8 460.0 215 3.00 5.424 17.82  0  0    3    4 #> 8  14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> 9  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> 10 15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> 11 13.3   8 350.0 245 3.73 3.840 15.41  0  0    3    4 #> 12 19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> 13 15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> 14 15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 dbClearResult(rs)  dbDisconnect(con) # Retrieve data as arrow table con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars) rs <- dbSendQueryArrow(con, \"SELECT * FROM mtcars WHERE cyl = 4\") dbFetch(rs) #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 2  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 3  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 4  32.4   4  78.7  66 4.08 2.200 19.47  1  1    4    1 #> 5  30.4   4  75.7  52 4.93 1.615 18.52  1  1    4    2 #> 6  33.9   4  71.1  65 4.22 1.835 19.90  1  1    4    1 #> 7  21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> 8  27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1 #> 9  26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> 10 30.4   4  95.1 113 3.77 1.513 16.90  1  1    5    2 #> 11 21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 dbClearResult(rs)  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":null,"dir":"Reference","previous_headings":"","what":"Execute a data manipulation statement on a given database connection — dbSendStatement","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"dbSendStatement() method submits synchronously executes SQL data manipulation statement (e.g., UPDATE, DELETE, INSERT , DROP TABLE, ...) database engine.  query number affected rows, call dbGetRowsAffected() returned result object.  must also call dbClearResult() . interactive use, almost always prefer dbExecute().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbSendStatement(\"AzureKustoConnection\", \"character\") DatabaseConnector::dbSendStatement(\"DatabaseConnectorConnection\", \"character\") dittodb::dbSendStatement(\"DBIMockConnection\", \"character\") odbc::dbSendStatement(\"OdbcConnection\", \"character\") pool::dbSendStatement(\"Pool\", \"\") RAthena::dbSendStatement(\"AthenaConnection\", \"character\") RMariaDB::dbSendStatement(\"MariaDBConnection\", \"character\") sparklyr::dbSendStatement(\"spark_connection\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"","code":"dbSendStatement(conn, statement, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"conn DBIConnection object, returned dbConnect(). statement character string containing SQL. ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"dbSendStatement() returns S4 object inherits DBIResult. result set can used dbGetRowsAffected() determine number rows affected query. finished using result, make sure clear dbClearResult().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"dbSendStatement() comes default implementation simply forwards dbSendQuery(), support backends implement latter.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"the-command-execution-flow","dir":"Reference","previous_headings":"","what":"The command execution flow","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"section gives complete overview flow execution SQL statements side effects stored procedures, inserting deleting data, setting database connection options. flow, except repeated calling dbBindArrow(), implemented dbExecute(), sufficient non-parameterized queries. flow requires active connection established dbConnect(). See also vignette(\"dbi-advanced\") walkthrough. Use dbSendStatement() create result set object class DBIResult. queries need pass immediate = TRUE. Optionally, bind query parameters withdbBind() dbBindArrow(). required query contains placeholders ? $1, depending database backend. Optionally, use dbGetRowsAffected() retrieve number rows affected query. Repeat last two steps necessary. Use dbClearResult() clean result set object. step mandatory even rows fetched error occurred processing. good practice use .exit() withr::defer() ensure step always executed.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"error raised issuing statement closed invalid connection, statement non-NA string. error also raised syntax query invalid query parameters given (passing params argument) immediate argument set TRUE.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"following arguments part dbSendStatement() generic (improve compatibility across backends) part DBI specification: params (default: NULL) immediate (default: NULL) must provided named arguments. See \"Specification\" sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"warnings occur normal conditions. done, DBIResult object must cleared call dbClearResult(). Failure clear result set leads warning connection closed. backend supports one open result set per connection, issuing second query invalidates already open result set raises warning. newly opened result set valid must cleared dbClearResult(). param argument allows passing query parameters, see dbBind() details.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"specification-for-the-immediate-argument","dir":"Reference","previous_headings":"","what":"Specification for the immediate argument","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"immediate argument supports distinguishing \"direct\" \"prepared\" APIs offered many database drivers. Passing immediate = TRUE leads immediate execution query statement, via \"direct\" API (supported driver). default NULL means backend choose whatever API makes sense database, (relevant) tries API first attempt fails. successful second attempt result message suggests passing correct immediate argument. Examples possible behaviors: DBI backend defaults immediate = TRUE internally query without parameters passed: query executed query parameters passed: params given: rejected immediately database syntax error query, backend tries immediate = FALSE (gives message) params given: query executed using immediate = FALSE DBI backend defaults immediate = FALSE internally query without parameters passed: simple query: query executed \"special\" query (setting config options): fails, backend tries immediate = TRUE (gives message) query parameters passed: params given: waiting parameters via dbBind() params given: query executed","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbSendStatement.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Execute a data manipulation statement on a given database connection — dbSendStatement","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cars\", head(cars, 3))  rs <- dbSendStatement(   con,   \"INSERT INTO cars (speed, dist) VALUES (1, 1), (2, 2), (3, 3)\" ) dbHasCompleted(rs) #> [1] TRUE dbGetRowsAffected(rs) #> [1] 3 dbClearResult(rs) dbReadTable(con, \"cars\")   # there are now 6 rows #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     1    1 #> 5     2    2 #> 6     3    3  # Pass one set of values directly using the param argument: rs <- dbSendStatement(   con,   \"INSERT INTO cars (speed, dist) VALUES (?, ?)\",   params = list(4L, 5L) ) dbClearResult(rs)  # Pass multiple sets of values using dbBind(): rs <- dbSendStatement(   con,   \"INSERT INTO cars (speed, dist) VALUES (?, ?)\" ) dbBind(rs, list(5:6, 6:7)) dbBind(rs, list(7L, 8L)) dbClearResult(rs) dbReadTable(con, \"cars\")   # there are now 10 rows #>    speed dist #> 1      4    2 #> 2      4   10 #> 3      7    4 #> 4      1    1 #> 5      2    2 #> 6      3    3 #> 7      4    5 #> 8      5    6 #> 9      6    7 #> 10     7    8  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbSetDataMappings.html","id":null,"dir":"Reference","previous_headings":"","what":"Set data mappings between an DBMS and R. — dbSetDataMappings","title":"Set data mappings between an DBMS and R. — dbSetDataMappings","text":"generic deprecated since working implementation ever produced.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSetDataMappings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set data mappings between an DBMS and R. — dbSetDataMappings","text":"","code":"dbSetDataMappings(res, flds, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbSetDataMappings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set data mappings between an DBMS and R. — dbSetDataMappings","text":"res object inheriting DBIResult. flds field description object returned dbColumnInfo. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbSetDataMappings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Set data mappings between an DBMS and R. — dbSetDataMappings","text":"Sets one conversion functions handle translation DBMS data types R objects.  needed non-primitive data, since DBI drivers handle common base types (integers, numeric, strings, etc.) details conversion functions (e.g., arguments, whether can invoke initializers /destructors) specified.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Unquote identifiers — dbUnquoteIdentifier","title":"Unquote identifiers — dbUnquoteIdentifier","text":"Call method convert SQL object created dbQuoteIdentifier() back list Id objects.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Unquote identifiers — dbUnquoteIdentifier","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. odbc::dbUnquoteIdentifier(\"Microsoft SQL Server\", \"SQL\") pool::dbUnquoteIdentifier(\"Pool\", \"\") RMariaDB::dbUnquoteIdentifier(\"MariaDBConnection\", \"SQL\") RPostgres::dbUnquoteIdentifier(\"PqConnection\", \"SQL\") RSQLite::dbUnquoteIdentifier(\"SQLiteConnection\", \"SQL\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unquote identifiers — dbUnquoteIdentifier","text":"","code":"dbUnquoteIdentifier(conn, x, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unquote identifiers — dbUnquoteIdentifier","text":"conn DBIConnection object, returned dbConnect(). x SQL Id object. ... arguments passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unquote identifiers — dbUnquoteIdentifier","text":"dbUnquoteIdentifier() returns list objects length input. empty vector, function returns length-0 object. names input argument preserved output. x value returned dbUnquoteIdentifier(), calling dbUnquoteIdentifier(..., dbQuoteIdentifier(..., x)) returns list(x). x object class Id, calling dbUnquoteIdentifier(..., x) returns list(x). (backends may convenient return Id objects achieve behavior, required.) Plain character vectors can also passed dbUnquoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Unquote identifiers — dbUnquoteIdentifier","text":"error raised character vectors missing value passed x argument.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Unquote identifiers — dbUnquoteIdentifier","text":"character vector length one, quoting (dbQuoteIdentifier()) unquoting quoting first element identical just quoting. also true strings contain special characters space, dot, comma, quotes used mark strings identifiers, database supports . Unquoting simple strings (consisting letters) wrapped SQL() quoting via dbQuoteIdentifier() gives result just quoting string. Similarly, unquoting expressions form SQL(\"schema.table\") quoting gives result quoting identifier constructed Id(\"schema\", \"table\").","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbUnquoteIdentifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unquote identifiers — dbUnquoteIdentifier","text":"","code":"# Unquoting allows to understand the structure of a # possibly complex quoted identifier dbUnquoteIdentifier(   ANSI(),   SQL(c('\"Catalog\".\"Schema\".\"Table\"', '\"Schema\".\"Table\"', '\"UnqualifiedTable\"')) ) #> [[1]] #> <Id> \"Catalog\".\"Schema\".\"Table\" #>  #> [[2]] #> <Id> \"Schema\".\"Table\" #>  #> [[3]] #> <Id> \"UnqualifiedTable\" #>   # The returned object is always a list, # also for Id objects dbUnquoteIdentifier(ANSI(), Id(\"Catalog\", \"Schema\", \"Table\")) #> [[1]] #> <Id> \"Catalog\".\"Schema\".\"Table\" #>   # Quoting and unquoting are inverses dbQuoteIdentifier(   ANSI(),   dbUnquoteIdentifier(ANSI(), SQL(\"UnqualifiedTable\"))[[1]] ) #> <SQL> \"UnqualifiedTable\"  dbQuoteIdentifier(   ANSI(),   dbUnquoteIdentifier(ANSI(), Id(\"Schema\", \"Table\"))[[1]] ) #> <SQL> \"Schema\".\"Table\""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":null,"dir":"Reference","previous_headings":"","what":"Self-contained SQL transactions — dbWithTransaction","title":"Self-contained SQL transactions — dbWithTransaction","text":"Given transactions implemented, function allows pass code run transaction. default method dbWithTransaction() calls dbBegin() executing code, dbCommit() successful completion, dbRollback() case error. advantage remember dbBegin() dbCommit() dbRollback() -- taken care . special function dbBreak() allows early exit rollback, can called inside dbWithTransaction().","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Self-contained SQL transactions — dbWithTransaction","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. pool::dbWithTransaction(\"Pool\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Self-contained SQL transactions — dbWithTransaction","text":"","code":"dbWithTransaction(conn, code, ...)  dbBreak()"},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Self-contained SQL transactions — dbWithTransaction","text":"conn DBIConnection object, returned dbConnect(). code arbitrary block R code. ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Self-contained SQL transactions — dbWithTransaction","text":"dbWithTransaction() returns value executed code.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Self-contained SQL transactions — dbWithTransaction","text":"DBI implements dbWithTransaction(), backends need override generic implement specialized handling.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Self-contained SQL transactions — dbWithTransaction","text":"Failure initiate transaction (e.g., connection closed invalid dbBegin() called already) gives error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Self-contained SQL transactions — dbWithTransaction","text":"dbWithTransaction() initiates transaction dbBegin(), executes code given code argument, commits transaction dbCommit(). code raises error, transaction instead aborted dbRollback(), error propagated. code calls dbBreak(), execution code stops transaction silently aborted. side effects caused code (creation new variables) propagate calling environment.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWithTransaction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Self-contained SQL transactions — dbWithTransaction","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cash\", data.frame(amount = 100)) dbWriteTable(con, \"account\", data.frame(amount = 2000))  # All operations are carried out as logical unit: dbWithTransaction(   con,   {     withdrawal <- 300     dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))     dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))   } ) #> [1] 1  # The code is executed as if in the curent environment: withdrawal #> [1] 300  # The changes are committed to the database after successful execution: dbReadTable(con, \"cash\") #>   amount #> 1    400 dbReadTable(con, \"account\") #>   amount #> 1   1700  # Rolling back with dbBreak(): dbWithTransaction(   con,   {     withdrawal <- 5000     dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal))     dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal))     if (dbReadTable(con, \"account\")$amount < 0) {       dbBreak()     }   } )  # These changes were not committed to the database: dbReadTable(con, \"cash\") #>   amount #> 1    400 dbReadTable(con, \"account\") #>   amount #> 1   1700  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Copy data frames to database tables — dbWriteTable","title":"Copy data frames to database tables — dbWriteTable","text":"Writes, overwrites appends data frame database table, optionally converting row names column specifying SQL data types fields.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Copy data frames to database tables — dbWriteTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. AzureKusto::dbWriteTable(\"AzureKustoConnection\", \"\", \"\") bigrquery::dbWriteTable(\"BigQueryConnection\", \"character\", \"data.frame\") DatabaseConnector::dbWriteTable(\"DatabaseConnectorConnection\", \"\", \"\") dittodb::dbWriteTable(\"DBIMockConnection\", \"character\", \"data.frame\") duckdb::dbWriteTable(\"duckdb_connection\", \"character\", \"data.frame\") odbc::dbWriteTable(\"OdbcConnection\", \"character\", \"data.frame\") odbc::dbWriteTable(\"OdbcConnection\", \"Id\", \"data.frame\") odbc::dbWriteTable(\"OdbcConnection\", \"SQL\", \"data.frame\") pool::dbWriteTable(\"Pool\", \"\", \"\") RAthena::dbWriteTable(\"AthenaConnection\", \"character\", \"data.frame\") RAthena::dbWriteTable(\"AthenaConnection\", \"Id\", \"data.frame\") RAthena::dbWriteTable(\"AthenaConnection\", \"SQL\", \"data.frame\") RH2::dbWriteTable(\"H2Connection\", \"character\", \"\") RH2::dbWriteTable(\"H2Connection\", \"character\", \"data.frame\") RJDBC::dbWriteTable(\"JDBCConnection\", \"\", \"\") RMariaDB::dbWriteTable(\"MariaDBConnection\", \"character\", \"character\") RMariaDB::dbWriteTable(\"MariaDBConnection\", \"character\", \"data.frame\") RMySQL::dbWriteTable(\"MySQLConnection\", \"character\", \"character\") RMySQL::dbWriteTable(\"MySQLConnection\", \"character\", \"data.frame\") RPostgres::dbWriteTable(\"PqConnection\", \"character\", \"data.frame\") RPostgreSQL::dbWriteTable(\"PostgreSQLConnection\", \"character\", \"character\") RPostgreSQL::dbWriteTable(\"PostgreSQLConnection\", \"character\", \"data.frame\") RPresto::dbWriteTable(\"PrestoConnection\", \"\", \"data.frame\") RSQLite::dbWriteTable(\"SQLiteConnection\", \"character\", \"character\") RSQLite::dbWriteTable(\"SQLiteConnection\", \"character\", \"data.frame\") sf::dbWriteTable(\"DBIObject\", \"character\", \"sf\") sf::dbWriteTable(\"PostgreSQLConnection\", \"character\", \"sf\") sparklyr::dbWriteTable(\"spark_connection\", \"\", \"\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Copy data frames to database tables — dbWriteTable","text":"","code":"dbWriteTable(conn, name, value, ...)  dbWriteTableArrow(conn, name, value, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Copy data frames to database tables — dbWriteTable","text":"conn DBIConnection object, returned dbConnect(). name table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') value dbWriteTable(), data.frame (coercible data.frame). dbWriteTableArrow(), object coercible Arrow RecordBatchReader. ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Copy data frames to database tables — dbWriteTable","text":"dbWriteTable() returns TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Copy data frames to database tables — dbWriteTable","text":"function useful want create load table time. Use dbAppendTable() dbAppendTableArrow() appending data existing table, dbCreateTable() dbCreateTableArrow() creating table, dbExistsTable() dbRemoveTable() overwriting tables. DBI standardizes writing data frames ArrowTabular objects. backends might implement methods can consume CSV files data formats. details, see documentation individual methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Copy data frames to database tables — dbWriteTable","text":"table exists, append overwrite arguments unset, append = TRUE data frame new data different column names, error raised; remote table remains unchanged. error raised calling method closed invalid connection. error also raised name processed dbQuoteIdentifier() results non-scalar. Invalid values additional arguments row.names, overwrite, append, field.types, temporary (non-scalars, unsupported data types, NA, incompatible values, duplicate missing names, incompatible columns) also raise error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"additional-arguments","dir":"Reference","previous_headings":"","what":"Additional arguments","title":"Copy data frames to database tables — dbWriteTable","text":"following arguments part dbWriteTable() generic (improve compatibility across backends) part DBI specification: row.names (default: FALSE) overwrite (default: FALSE) append (default: FALSE) field.types (default: NULL) temporary (default: FALSE) must provided named arguments. See \"Specification\" \"Value\" sections details usage.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Copy data frames to database tables — dbWriteTable","text":"name argument processed follows, support databases allow non-syntactic names objects: unquoted table name string: dbWriteTable() quoting, perhaps calling dbQuoteIdentifier(conn, x = name) result call dbQuoteIdentifier(): quoting done value argument must data frame subset columns existing table append = TRUE. order columns matter append = TRUE. overwrite argument TRUE, existing table name overwritten. argument change behavior table exist yet. append argument TRUE, rows existing table preserved, new data appended. table exist yet, created. temporary argument TRUE, table available second connection gone reconnecting. backends support argument. regular, non-temporary table visible second connection, pre-existing connection, reconnecting database. SQL keywords can used freely table names, column names, data. Quotes, commas, spaces, special characters newlines tabs, can also used data, , database supports non-syntactic identifiers, also table names column names. following data types must supported least, read identically dbReadTable(): integer numeric (behavior Inf NaN specified) logical NA NULL 64-bit values (using \"bigint\" field type); result can converted numeric, may lose precision, converted character vector, gives full decimal representation written another table read unchanged character (UTF-8 native encodings), supporting empty strings non-empty string factor (returned character) list raw (supported database) objects type blob::blob (supported database) date (supported database; returned Date), also dates prior 1970 1900 2038 time (supported database; returned objects inherit difftime) timestamp (supported database; returned POSIXct respecting time zone necessarily preserving input time zone), also timestamps prior 1970 1900 2038 respecting time zone necessarily preserving input time zone) Mixing column types table supported. field.types argument must named character vector one entry column. indicates SQL data type used new column. column missed field.types, type inferred input data dbDataType(). interpretation rownames depends row.names argument, see sqlRownamesToColumn() details: FALSE NULL, row names ignored. TRUE, row names converted column named \"row_names\", even input data frame natural row names 1 nrow(...). NA, column named \"row_names\" created data custom row names, extra column created case natural row names. string, specifies name column remote table contains row names, even input data frame natural row names. default row.names = FALSE.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/dbWriteTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Copy data frames to database tables — dbWriteTable","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"mtcars\", mtcars[1:5, ]) dbReadTable(con, \"mtcars\") #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2  dbWriteTable(con, \"mtcars\", mtcars[6:10, ], append = TRUE) dbReadTable(con, \"mtcars\") #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  dbWriteTable(con, \"mtcars\", mtcars[1:10, ], overwrite = TRUE) dbReadTable(con, \"mtcars\") #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4  # No row names dbWriteTable(con, \"mtcars\", mtcars[1:10, ], overwrite = TRUE, row.names = FALSE) dbReadTable(con, \"mtcars\") #>     mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> 1  21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> 2  21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> 3  22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> 4  21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> 5  18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> 6  18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> 7  14.3   8 360.0 245 3.21 3.570 15.84  0  0    3    4 #> 8  24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> 9  22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> 10 19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4"},{"path":"https://dbi.r-dbi.org/dev/reference/dot-SQL92Keywords.html","id":null,"dir":"Reference","previous_headings":"","what":"Keywords according to the SQL-92 sta — .SQL92Keywords","title":"Keywords according to the SQL-92 sta — .SQL92Keywords","text":"character vector SQL-92 keywords, uppercase.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dot-SQL92Keywords.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Keywords according to the SQL-92 sta — .SQL92Keywords","text":"","code":".SQL92Keywords"},{"path":"https://dbi.r-dbi.org/dev/reference/dot-SQL92Keywords.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Keywords according to the SQL-92 sta — .SQL92Keywords","text":"object class character length 220.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/dot-SQL92Keywords.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Keywords according to the SQL-92 sta — .SQL92Keywords","text":"","code":"\"SELECT\" %in% .SQL92Keywords #> [1] TRUE"},{"path":"https://dbi.r-dbi.org/dev/reference/hidden_aliases.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal page for hidden aliases — hidden_aliases","title":"Internal page for hidden aliases — hidden_aliases","text":"S4 methods require documentation entry clutter index.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/hidden_aliases.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal page for hidden aliases — hidden_aliases","text":"","code":"# S4 method for DBIObject SQLKeywords(dbObj, ...)  # S4 method for missing SQLKeywords(dbObj, ...)  # S4 method for DBIConnection dbAppendTableArrow(conn, name, value, ...)  # S4 method for DBIConnection dbAppendTable(conn, name, value, ..., row.names = NULL)  # S4 method for DBIResult dbBindArrow(res, params, ...)  # S4 method for DBIResultArrowDefault dbBindArrow(res, params, ...)  # S4 method for DBIResultArrow dbBind(res, params, ...)  # S4 method for DBIDriver dbCanConnect(drv, ...)  # S4 method for DBIResultArrow dbClearResult(res, ...)  # S4 method for DBIConnector dbConnect(drv, ...)  # S4 method for DBIConnection dbCreateTableArrow(conn, name, value, ..., temporary = FALSE)  # S4 method for DBIConnection dbCreateTable(conn, name, fields, ..., row.names = NULL, temporary = FALSE)  # S4 method for DBIConnector dbDataType(dbObj, obj, ...)  # S4 method for DBIObject dbDataType(dbObj, obj, ...)  # S4 method for character dbDriver(drvName, ...)  # S4 method for DBIConnection,character dbExecute(conn, statement, ...)  # S4 method for DBIConnection,Id dbExistsTable(conn, name, ...)  # S4 method for DBIResultArrow dbFetchArrowChunk(res, ...)  # S4 method for DBIResultArrow dbFetchArrow(res, ...)  # S4 method for DBIResult dbFetch(res, n = -1, ...)  # S4 method for DBIResultArrow dbFetch(res, n = -1, ...)  # S4 method for DBIConnector dbGetConnectArgs(drv, eval = TRUE, ...)  # S4 method for DBIResult dbGetInfo(dbObj, ...)  # S4 method for DBIResultArrow dbGetInfo(dbObj, ...)  # S4 method for DBIConnection dbGetQueryArrow(conn, statement, ...)  # S4 method for DBIConnection,character dbGetQuery(conn, statement, ..., n = -1L)  # S4 method for DBIResultArrow dbGetRowCount(res, ...)  # S4 method for DBIResultArrow dbGetRowsAffected(res, ...)  # S4 method for DBIResultArrow dbGetStatement(res, ...)  # S4 method for DBIResultArrow dbHasCompleted(res, ...)  # S4 method for DBIConnector dbIsReadOnly(dbObj, ...)  # S4 method for DBIObject dbIsReadOnly(dbObj, ...)  # S4 method for DBIResultArrowDefault dbIsValid(dbObj, ...)  # S4 method for DBIConnection,Id dbListFields(conn, name, ...)  # S4 method for DBIConnection,character dbListFields(conn, name, ...)  # S4 method for DBIConnection dbListObjects(conn, prefix = NULL, ...)  # S4 method for DBIConnection,ANY dbQuoteIdentifier(conn, x, ...)  # S4 method for DBIConnection,character dbQuoteIdentifier(conn, x, ...)  # S4 method for DBIConnection,SQL dbQuoteIdentifier(conn, x, ...)  # S4 method for DBIConnection,Id dbQuoteIdentifier(conn, x, ...)  # S4 method for DBIConnection dbQuoteLiteral(conn, x, ...)  # S4 method for DBIConnection,ANY dbQuoteString(conn, x, ...)  # S4 method for DBIConnection,character dbQuoteString(conn, x, ...)  # S4 method for DBIConnection,SQL dbQuoteString(conn, x, ...)  # S4 method for DBIConnection dbReadTableArrow(conn, name, ...)  # S4 method for DBIConnection,Id dbReadTable(conn, name, ...)  # S4 method for DBIConnection,character dbReadTable(conn, name, ..., row.names = FALSE, check.names = TRUE)  # S4 method for DBIConnection,Id dbRemoveTable(conn, name, ...)  # S4 method for DBIConnection dbSendQueryArrow(conn, statement, params = NULL, ...)  # S4 method for DBIConnection,character dbSendStatement(conn, statement, ...)  # S4 method for DBIConnection dbUnquoteIdentifier(conn, x, ...)  # S4 method for DBIConnection dbWithTransaction(conn, code)  # S4 method for DBIConnection dbWriteTableArrow(   conn,   name,   value,   append = FALSE,   overwrite = FALSE,   ...,   temporary = FALSE )  # S4 method for DBIConnection,Id dbWriteTable(conn, name, value, ...)  # S4 method for DBIObject,character isSQLKeyword(   dbObj,   name,   keywords = .SQL92Keywords,   case = c(\"lower\", \"upper\", \"any\")[3],   ... )  # S4 method for DBIObject,character make.db.names(   dbObj,   snames,   keywords = .SQL92Keywords,   unique = TRUE,   allow.keywords = TRUE,   ... )  # S4 method for AnsiConnection show(object)  # S4 method for DBIConnection show(object)  # S4 method for DBIConnector show(object)  # S4 method for DBIDriver show(object)  # S4 method for DBIResult show(object)  # S4 method for Id show(object)  # S4 method for SQL show(object)  # S4 method for DBIConnection sqlAppendTable(con, table, values, row.names = NA, ...)  # S4 method for DBIConnection sqlCreateTable(con, table, fields, row.names = NA, temporary = FALSE, ...)  # S4 method for DBIConnection sqlData(con, value, row.names = NA, ...)  # S4 method for DBIConnection sqlInterpolate(conn, sql, ..., .dots = list())  # S4 method for DBIConnection sqlParseVariables(conn, sql, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/hidden_aliases.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal page for hidden aliases — hidden_aliases","text":"n Number rows fetch, default -1 object Table object print","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/make.db.names.html","id":null,"dir":"Reference","previous_headings":"","what":"Make R identifiers into legal SQL identifiers — make.db.names.default","title":"Make R identifiers into legal SQL identifiers — make.db.names.default","text":"methods DEPRECATED. Please use dbQuoteIdentifier() (possibly dbQuoteString()) instead.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/make.db.names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make R identifiers into legal SQL identifiers — make.db.names.default","text":"","code":"make.db.names.default(   snames,   keywords = .SQL92Keywords,   unique = TRUE,   allow.keywords = TRUE )  isSQLKeyword.default(   name,   keywords = .SQL92Keywords,   case = c(\"lower\", \"upper\", \"any\")[3] )  isSQLKeyword(   dbObj,   name,   keywords = .SQL92Keywords,   case = c(\"lower\", \"upper\", \"any\")[3],   ... )  make.db.names(   dbObj,   snames,   keywords = .SQL92Keywords,   unique = TRUE,   allow.keywords = TRUE,   ... )"},{"path":"https://dbi.r-dbi.org/dev/reference/make.db.names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make R identifiers into legal SQL identifiers — make.db.names.default","text":"snames character vector R identifiers (symbols) need make SQL identifiers. keywords character vector SQL keywords, default .SQL92Keywords defined DBI. unique logical describing whether resulting set SQL names unique.  default TRUE.  Following SQL 92 standard, uniqueness SQL identifiers determined regardless whether letters upper lower case. allow.keywords logical describing whether SQL keywords allowed resulting set SQL names.  default TRUE name character vector database identifier candidates need determine whether legal SQL identifiers . case character string specifying whether make comparison lower case, upper case, two.  defaults . dbObj DBI object (e.g., DBIDriver). ... argument passed driver implementation.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/make.db.names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make R identifiers into legal SQL identifiers — make.db.names.default","text":"make.db.names returns character vector legal SQL identifiers corresponding snames argument. SQLKeywords returns character vector known keywords database-engine associated dbObj. isSQLKeyword returns logical vector parallel name.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/make.db.names.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make R identifiers into legal SQL identifiers — make.db.names.default","text":"algorithm make.db.names first invokes make.names replaces occurrence dot . underscore _.  allow.keywords FALSE identifiers collide SQL keywords, small integer appended identifier form \"_n\". set SQL keywords stored character vector .SQL92Keywords reflects SQL ANSI/ISO standard documented \"X/Open SQL RDA\", 1994, ISBN 1-872630-68-8.  Users can easily override update vector.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/make.db.names.html","id":"bugs","dir":"Reference","previous_headings":"","what":"Bugs","title":"Make R identifiers into legal SQL identifiers — make.db.names.default","text":"current mapping guaranteed fully reversible: SQL identifiers get mapped R identifiers make.names back SQL make.db.names() equal original SQL identifiers (e.g., compound SQL identifiers form username.tablename loose dot ``.'').","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/make.db.names.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Make R identifiers into legal SQL identifiers — make.db.names.default","text":"set SQL keywords stored character vector .SQL92Keywords reflects SQL ANSI/ISO standard documented \"X/Open SQL RDA\", 1994, ISBN 1-872630-68-8.  Users can easily override update vector.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/rownames.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert row names back and forth between columns — rownames","title":"Convert row names back and forth between columns — rownames","text":"functions provide reasonably automatic way preserving row names data frame back--forth translation SQL table. default, row names converted explicit column called \"row_names\", query returning column called \"row_names\" automatically set row names. methods mostly useful backend implementers.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/rownames.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert row names back and forth between columns — rownames","text":"","code":"sqlRownamesToColumn(df, row.names = NA)  sqlColumnToRownames(df, row.names = NA)"},{"path":"https://dbi.r-dbi.org/dev/reference/rownames.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert row names back and forth between columns — rownames","text":"df data frame row.names Either TRUE, FALSE, NA string. TRUE, always translate row names column called \"row_names\". FALSE, never translate row names. NA, translate rownames character vector. string equivalent TRUE, allows override default name. backward compatibility, NULL equivalent FALSE.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/rownames.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert row names back and forth between columns — rownames","text":"","code":"# If have row names sqlRownamesToColumn(head(mtcars)) #>           row_names  mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 sqlRownamesToColumn(head(mtcars), FALSE) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 sqlRownamesToColumn(head(mtcars), \"ROWNAMES\") #>            ROWNAMES  mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1         Mazda RX4 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2     Mazda RX4 Wag 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3        Datsun 710 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4    Hornet 4 Drive 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6           Valiant 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1  # If don't have sqlRownamesToColumn(head(iris)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1          5.1         3.5          1.4         0.2  setosa #> 2          4.9         3.0          1.4         0.2  setosa #> 3          4.7         3.2          1.3         0.2  setosa #> 4          4.6         3.1          1.5         0.2  setosa #> 5          5.0         3.6          1.4         0.2  setosa #> 6          5.4         3.9          1.7         0.4  setosa sqlRownamesToColumn(head(iris), TRUE) #>   row_names Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1         1          5.1         3.5          1.4         0.2  setosa #> 2         2          4.9         3.0          1.4         0.2  setosa #> 3         3          4.7         3.2          1.3         0.2  setosa #> 4         4          4.6         3.1          1.5         0.2  setosa #> 5         5          5.0         3.6          1.4         0.2  setosa #> 6         6          5.4         3.9          1.7         0.4  setosa sqlRownamesToColumn(head(iris), \"ROWNAMES\") #>   ROWNAMES Sepal.Length Sepal.Width Petal.Length Petal.Width Species #> 1        1          5.1         3.5          1.4         0.2  setosa #> 2        2          4.9         3.0          1.4         0.2  setosa #> 3        3          4.7         3.2          1.3         0.2  setosa #> 4        4          4.6         3.1          1.5         0.2  setosa #> 5        5          5.0         3.6          1.4         0.2  setosa #> 6        6          5.4         3.9          1.7         0.4  setosa"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlAppendTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose query to insert rows into a table — sqlAppendTable","title":"Compose query to insert rows into a table — sqlAppendTable","text":"sqlAppendTable() generates single SQL string inserts data frame existing table. sqlAppendTableTemplate() generates template suitable use dbBind(). default methods ANSI SQL 99 compliant. methods mostly useful backend implementers.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlAppendTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Compose query to insert rows into a table — sqlAppendTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. pool::sqlAppendTable(\"Pool\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlAppendTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose query to insert rows into a table — sqlAppendTable","text":"","code":"sqlAppendTable(con, table, values, row.names = NA, ...)  sqlAppendTableTemplate(   con,   table,   values,   row.names = NA,   prefix = \"?\",   ...,   pattern = \"\" )"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlAppendTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose query to insert rows into a table — sqlAppendTable","text":"con database connection. table table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') values data frame. Factors converted character vectors. Character vectors escaped dbQuoteString(). row.names Either TRUE, FALSE, NA string. TRUE, always translate row names column called \"row_names\". FALSE, never translate row names. NA, translate rownames character vector. string equivalent TRUE, allows override default name. backward compatibility, NULL equivalent FALSE. ... arguments used individual methods. prefix Parameter prefix use placeholders. pattern Parameter pattern use placeholders: \"\": pattern \"1\": position anything else: field name","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlAppendTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compose query to insert rows into a table — sqlAppendTable","text":"row.names argument must passed explicitly order avoid compatibility warning.  default changed later release.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlAppendTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose query to insert rows into a table — sqlAppendTable","text":"","code":"sqlAppendTable(ANSI(), \"iris\", head(iris)) #> Warning: Do not rely on the default value of the row.names argument for sqlAppendTable(), it will change in the future. #> <SQL> INSERT INTO \"iris\" #>   (\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\", \"Species\") #> VALUES #>   (5.1, 3.5, 1.4, 0.2, 'setosa'), #>   (4.9, 3, 1.4, 0.2, 'setosa'), #>   (4.7, 3.2, 1.3, 0.2, 'setosa'), #>   (4.6, 3.1, 1.5, 0.2, 'setosa'), #>   (5, 3.6, 1.4, 0.2, 'setosa'), #>   (5.4, 3.9, 1.7, 0.4, 'setosa')  sqlAppendTable(ANSI(), \"mtcars\", head(mtcars)) #> Warning: Do not rely on the default value of the row.names argument for sqlAppendTable(), it will change in the future. #> <SQL> INSERT INTO \"mtcars\" #>   (\"row_names\", \"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") #> VALUES #>   ('Mazda RX4', 21, 6, 160, 110, 3.9, 2.62, 16.46, 0, 1, 4, 4), #>   ('Mazda RX4 Wag', 21, 6, 160, 110, 3.9, 2.875, 17.02, 0, 1, 4, 4), #>   ('Datsun 710', 22.8, 4, 108, 93, 3.85, 2.32, 18.61, 1, 1, 4, 1), #>   ('Hornet 4 Drive', 21.4, 6, 258, 110, 3.08, 3.215, 19.44, 1, 0, 3, 1), #>   ('Hornet Sportabout', 18.7, 8, 360, 175, 3.15, 3.44, 17.02, 0, 0, 3, 2), #>   ('Valiant', 18.1, 6, 225, 105, 2.76, 3.46, 20.22, 1, 0, 3, 1) sqlAppendTable(ANSI(), \"mtcars\", head(mtcars), row.names = FALSE) #> <SQL> INSERT INTO \"mtcars\" #>   (\"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") #> VALUES #>   (21, 6, 160, 110, 3.9, 2.62, 16.46, 0, 1, 4, 4), #>   (21, 6, 160, 110, 3.9, 2.875, 17.02, 0, 1, 4, 4), #>   (22.8, 4, 108, 93, 3.85, 2.32, 18.61, 1, 1, 4, 1), #>   (21.4, 6, 258, 110, 3.08, 3.215, 19.44, 1, 0, 3, 1), #>   (18.7, 8, 360, 175, 3.15, 3.44, 17.02, 0, 0, 3, 2), #>   (18.1, 6, 225, 105, 2.76, 3.46, 20.22, 1, 0, 3, 1) sqlAppendTableTemplate(ANSI(), \"iris\", iris) #> Warning: Do not rely on the default value of the `row.names` argument to `sqlAppendTableTemplate()`, it will change in the future. #> <SQL> INSERT INTO \"iris\" #>   (\"Sepal.Length\", \"Sepal.Width\", \"Petal.Length\", \"Petal.Width\", \"Species\") #> VALUES #>   (?, ?, ?, ?, ?)  sqlAppendTableTemplate(ANSI(), \"mtcars\", mtcars) #> Warning: Do not rely on the default value of the `row.names` argument to `sqlAppendTableTemplate()`, it will change in the future. #> <SQL> INSERT INTO \"mtcars\" #>   (\"row_names\", \"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") #> VALUES #>   (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) sqlAppendTableTemplate(ANSI(), \"mtcars\", mtcars, row.names = FALSE) #> <SQL> INSERT INTO \"mtcars\" #>   (\"mpg\", \"cyl\", \"disp\", \"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") #> VALUES #>   (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlCreateTable.html","id":null,"dir":"Reference","previous_headings":"","what":"Compose query to create a simple table — sqlCreateTable","title":"Compose query to create a simple table — sqlCreateTable","text":"Exposes interface simple CREATE TABLE commands. default method ANSI SQL 99 compliant. method mostly useful backend implementers.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlCreateTable.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Compose query to create a simple table — sqlCreateTable","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. odbc::sqlCreateTable(\"DB2/AIX64\") odbc::sqlCreateTable(\"HDB\") odbc::sqlCreateTable(\"Microsoft SQL Server\") odbc::sqlCreateTable(\"OdbcConnection\") odbc::sqlCreateTable(\"Oracle\") odbc::sqlCreateTable(\"Teradata\") pool::sqlCreateTable(\"Pool\") RAthena::sqlCreateTable(\"AthenaConnection\") RPresto::sqlCreateTable(\"PrestoConnection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlCreateTable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compose query to create a simple table — sqlCreateTable","text":"","code":"sqlCreateTable(con, table, fields, row.names = NA, temporary = FALSE, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlCreateTable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compose query to create a simple table — sqlCreateTable","text":"con database connection. table table name, passed dbQuoteIdentifier(). Options : character string unquoted DBMS table name, e.g. \"table_name\", call Id() components fully qualified table name, e.g. Id(schema = \"my_schema\", table = \"table_name\") call SQL() quoted fully qualified table name given verbatim, e.g. SQL('\"my_schema\".\"table_name\"') fields Either character vector data frame. named character vector: Names column names, values types. Names escaped dbQuoteIdentifier(). Field types unescaped. data frame: field types generated using dbDataType(). row.names Either TRUE, FALSE, NA string. TRUE, always translate row names column called \"row_names\". FALSE, never translate row names. NA, translate rownames character vector. string equivalent TRUE, allows override default name. backward compatibility, NULL equivalent FALSE. temporary TRUE, generate temporary table statement. ... arguments used individual methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlCreateTable.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compose query to create a simple table — sqlCreateTable","text":"row.names argument must passed explicitly order avoid compatibility warning.  default changed later release.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlCreateTable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compose query to create a simple table — sqlCreateTable","text":"","code":"sqlCreateTable(ANSI(), \"my-table\", c(a = \"integer\", b = \"text\")) #> Warning: Do not rely on the default value of the row.names argument for sqlCreateTable(), it will change in the future. #> <SQL> CREATE TABLE \"my-table\" ( #>   \"a\" integer, #>   \"b\" text #> ) #>  sqlCreateTable(ANSI(), \"my-table\", iris) #> Warning: Do not rely on the default value of the row.names argument for sqlCreateTable(), it will change in the future. #> <SQL> CREATE TABLE \"my-table\" ( #>   \"Sepal.Length\" DOUBLE, #>   \"Sepal.Width\" DOUBLE, #>   \"Petal.Length\" DOUBLE, #>   \"Petal.Width\" DOUBLE, #>   \"Species\" TEXT #> ) #>   # By default, character row names are converted to a row_names colum sqlCreateTable(ANSI(), \"mtcars\", mtcars[, 1:5]) #> Warning: Do not rely on the default value of the row.names argument for sqlCreateTable(), it will change in the future. #> <SQL> CREATE TABLE \"mtcars\" ( #>   \"row_names\" TEXT, #>   \"mpg\" DOUBLE, #>   \"cyl\" DOUBLE, #>   \"disp\" DOUBLE, #>   \"hp\" DOUBLE, #>   \"drat\" DOUBLE #> ) #>  sqlCreateTable(ANSI(), \"mtcars\", mtcars[, 1:5], row.names = FALSE) #> <SQL> CREATE TABLE \"mtcars\" ( #>   \"mpg\" DOUBLE, #>   \"cyl\" DOUBLE, #>   \"disp\" DOUBLE, #>   \"hp\" DOUBLE, #>   \"drat\" DOUBLE #> ) #>"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlData.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a data frame into form suitable for upload to an SQL database — sqlData","title":"Convert a data frame into form suitable for upload to an SQL database — sqlData","text":"generic method coerces R objects vectors suitable upload database. output vary little method method depending whether main upload device single SQL string multiple parameterized queries. method mostly useful backend implementers.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlData.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Convert a data frame into form suitable for upload to an SQL database — sqlData","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. odbc::sqlData(\"OdbcConnection\") pool::sqlData(\"Pool\") RAthena::sqlData(\"AthenaConnection\") RMariaDB::sqlData(\"MariaDBConnection\") RPostgres::sqlData(\"PqConnection\") RSQLite::sqlData(\"SQLiteConnection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a data frame into form suitable for upload to an SQL database — sqlData","text":"","code":"sqlData(con, value, row.names = NA, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a data frame into form suitable for upload to an SQL database — sqlData","text":"con database connection. value data frame row.names Either TRUE, FALSE, NA string. TRUE, always translate row names column called \"row_names\". FALSE, never translate row names. NA, translate rownames character vector. string equivalent TRUE, allows override default name. backward compatibility, NULL equivalent FALSE. ... arguments used individual methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a data frame into form suitable for upload to an SQL database — sqlData","text":"default method: Converts factors characters Quotes strings dbQuoteIdentifier() Converts columns strings dbQuoteLiteral() Replaces NA NULL","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a data frame into form suitable for upload to an SQL database — sqlData","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  sqlData(con, head(iris)) #>   Sepal.Length Sepal.Width Petal.Length Petal.Width  Species #> 1          5.1         3.5          1.4         0.2 'setosa' #> 2          4.9         3.0          1.4         0.2 'setosa' #> 3          4.7         3.2          1.3         0.2 'setosa' #> 4          4.6         3.1          1.5         0.2 'setosa' #> 5          5.0         3.6          1.4         0.2 'setosa' #> 6          5.4         3.9          1.7         0.4 'setosa' sqlData(con, head(mtcars)) #>    mpg cyl disp  hp drat    wt  qsec vs am gear carb #> 1 21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 #> 2 21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 #> 3 22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 #> 4 21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 #> 5 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 #> 6 18.1   6  225 105 2.76 3.460 20.22  1  0    3    1  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlInterpolate.html","id":null,"dir":"Reference","previous_headings":"","what":"Safely interpolate values into an SQL string — sqlInterpolate","title":"Safely interpolate values into an SQL string — sqlInterpolate","text":"Accepts query string placeholders values, returns string values embedded. function careful quote inputs dbQuoteLiteral() protect SQL injection attacks. Placeholders can specified one two syntaxes: ?: occurrence standalone ? replaced value ?name1, ?name2, ...: values given named arguments named list, names used match values Mixing ? ?name syntaxes error. number names values supplied must correspond placeholders used query.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlInterpolate.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Safely interpolate values into an SQL string — sqlInterpolate","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. pool::sqlInterpolate(\"Pool\") sparklyr::sqlInterpolate(\"spark_connection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlInterpolate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Safely interpolate values into an SQL string — sqlInterpolate","text":"","code":"sqlInterpolate(conn, sql, ..., .dots = list())"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlInterpolate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Safely interpolate values into an SQL string — sqlInterpolate","text":"conn DBIConnection object, returned dbConnect(). sql SQL string containing variables interpolate. Variables must start question mark can valid R identifier, .e. must start letter ., followed letter, digit, . _. ..., .dots Values (...) list (.dots) interpolate string. Names required  sql uses ?name syntax placeholders. values first escaped dbQuoteLiteral() prior interpolation protect SQL injection attacks. Arguments created SQL() dbQuoteIdentifier() remain unchanged.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlInterpolate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Safely interpolate values into an SQL string — sqlInterpolate","text":"sql query values ... .dots safely embedded.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlInterpolate.html","id":"backend-authors","dir":"Reference","previous_headings":"","what":"Backend authors","title":"Safely interpolate values into an SQL string — sqlInterpolate","text":"implementing SQL backend non-ANSI quoting rules, need implement method sqlParseVariables(). Failure expose SQL injection attacks, (rarely) result errors matching supplied interpolated variables.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlInterpolate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Safely interpolate values into an SQL string — sqlInterpolate","text":"","code":"sql <- \"SELECT * FROM X WHERE name = ?name\" sqlInterpolate(ANSI(), sql, name = \"Hadley\") #> <SQL> SELECT * FROM X WHERE name = 'Hadley'  # This is safe because the single quote has been double escaped sqlInterpolate(ANSI(), sql, name = \"H'); DROP TABLE--;\") #> <SQL> SELECT * FROM X WHERE name = 'H''); DROP TABLE--;'  # Using paste0() could lead to dangerous SQL with carefully crafted inputs # (SQL injection) name <- \"H'); DROP TABLE--;\" paste0(\"SELECT * FROM X WHERE name = '\", name, \"'\") #> [1] \"SELECT * FROM X WHERE name = 'H'); DROP TABLE--;'\"  # Use SQL() or dbQuoteIdentifier() to avoid escaping sql2 <- \"SELECT * FROM ?table WHERE name in ?names\" sqlInterpolate(ANSI(), sql2,   table = dbQuoteIdentifier(ANSI(), \"X\"),   names = SQL(\"('a', 'b')\") ) #> <SQL> SELECT * FROM \"X\" WHERE name in ('a', 'b')  # Don't use SQL() to escape identifiers to avoid SQL injection sqlInterpolate(ANSI(), sql2,   table = SQL(\"X; DELETE FROM X; SELECT * FROM X\"),   names = SQL(\"('a', 'b')\") ) #> <SQL> SELECT * FROM X; DELETE FROM X; SELECT * FROM X WHERE name in ('a', 'b')  # Use dbGetQuery() or dbExecute() to process these queries: if (requireNamespace(\"RSQLite\", quietly = TRUE)) {   con <- dbConnect(RSQLite::SQLite())   sql <- \"SELECT ?value AS value\"   query <- sqlInterpolate(con, sql, value = 3)   print(dbGetQuery(con, query))   dbDisconnect(con) } #>   value #> 1     3"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlParseVariables.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse interpolated variables from SQL. — sqlCommentSpec","title":"Parse interpolated variables from SQL. — sqlCommentSpec","text":"implementing backend uses non-ANSI quoting commenting rules, need implement method sqlParseVariables calls sqlParseVariablesImpl appropriate quote comment specifications.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlParseVariables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse interpolated variables from SQL. — sqlCommentSpec","text":"","code":"sqlCommentSpec(start, end, endRequired)  sqlQuoteSpec(start, end, escape = \"\", doubleEscape = TRUE)  sqlParseVariablesImpl(sql, quotes, comments)  sqlParseVariables(conn, sql, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/sqlParseVariables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse interpolated variables from SQL. — sqlCommentSpec","text":"start, end Start end characters quotes comments endRequired ending character comment required? escape character can used escape quoting characters? Defaults \"\", .e. nothing. doubleEscape Can quoting characters escaped doubling ? Defaults TRUE. sql SQL parse (character string) quotes list QuoteSpec calls defining quoting specification. comments list CommentSpec calls defining commenting specification.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/sqlParseVariables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse interpolated variables from SQL. — sqlCommentSpec","text":"","code":"# Use [] for quoting and no comments sqlParseVariablesImpl(\"[?a]\",   list(sqlQuoteSpec(\"[\", \"]\", \"\\\\\", FALSE)),   list() ) #> $start #> integer(0) #>  #> $end #> integer(0) #>   # Standard quotes, use # for commenting sqlParseVariablesImpl(\"# ?a\\n?b\",   list(sqlQuoteSpec(\"'\", \"'\"), sqlQuoteSpec('\"', '\"')),   list(sqlCommentSpec(\"#\", \"\\n\", FALSE)) ) #> $start #> [1] 6 #>  #> $end #> [1] 7 #>"},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":null,"dir":"Reference","previous_headings":"","what":"Begin/commit/rollback SQL transactions — dbBegin","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"transaction encapsulates several SQL statements atomic unit. initiated dbBegin() either made persistent dbCommit() undone dbRollback(). case, DBMS guarantees either none statements permanent effect. helps ensuring consistency write operations multiple tables.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"methods-in-other-packages","dir":"Reference","previous_headings":"","what":"Methods in other packages","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"documentation page describes generics. Refer documentation pages linked documentation methods implemented various backend packages. bigrquery::dbBegin(\"BigQueryConnection\") bigrquery::dbCommit(\"BigQueryConnection\") bigrquery::dbRollback(\"BigQueryConnection\") DatabaseConnector::dbBegin(\"DatabaseConnectorConnection\") DatabaseConnector::dbCommit(\"DatabaseConnectorConnection\") DatabaseConnector::dbRollback(\"DatabaseConnectorConnection\") dittodb::dbBegin(\"DBIMockConnection\") dittodb::dbCommit(\"DBIMockConnection\") dittodb::dbRollback(\"DBIMockConnection\") duckdb::dbBegin(\"duckdb_connection\") duckdb::dbCommit(\"duckdb_connection\") duckdb::dbRollback(\"duckdb_connection\") odbc::dbBegin(\"OdbcConnection\") odbc::dbCommit(\"OdbcConnection\") odbc::dbRollback(\"OdbcConnection\") pool::dbBegin(\"Pool\") pool::dbCommit(\"Pool\") pool::dbRollback(\"Pool\") RJDBC::dbBegin(\"JDBCConnection\") RJDBC::dbCommit(\"JDBCConnection\") RJDBC::dbRollback(\"JDBCConnection\") RMariaDB::dbBegin(\"MariaDBConnection\") RMariaDB::dbCommit(\"MariaDBConnection\") RMariaDB::dbRollback(\"MariaDBConnection\") RMySQL::dbBegin(\"MySQLConnection\") RMySQL::dbCommit(\"MySQLConnection\") RMySQL::dbRollback(\"MySQLConnection\") RPostgres::dbBegin(\"PqConnection\") RPostgres::dbCommit(\"PqConnection\") RPostgres::dbRollback(\"PqConnection\") RPostgreSQL::dbBegin(\"PostgreSQLConnection\") RPostgreSQL::dbCommit(\"PostgreSQLConnection\") RPostgreSQL::dbRollback(\"PostgreSQLConnection\") RSQLite::dbBegin(\"SQLiteConnection\") RSQLite::dbCommit(\"SQLiteConnection\") RSQLite::dbRollback(\"SQLiteConnection\") sparklyr::dbBegin(\"spark_connection\") sparklyr::dbCommit(\"spark_connection\") sparklyr::dbRollback(\"spark_connection\")","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"","code":"dbBegin(conn, ...)  dbCommit(conn, ...)  dbRollback(conn, ...)"},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"conn DBIConnection object, returned dbConnect(). ... parameters passed methods.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"dbBegin(), dbCommit() dbRollback() return TRUE, invisibly.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"database engines implement transaction management, case methods implemented specific DBIConnection subclass.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"failure-modes","dir":"Reference","previous_headings":"","what":"Failure modes","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"implementations expected raise error case failure, tested. way, generics throw error closed invalid connection. addition, call dbCommit() dbRollback() without prior call dbBegin() raises error. Nested transactions supported DBI, attempt call dbBegin() twice yields error.","code":""},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"specification","dir":"Reference","previous_headings":"","what":"Specification","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"Actual support transactions may vary backends. transaction initiated call dbBegin() committed call dbCommit(). Data written transaction must persist transaction committed. example, record missing transaction started created transaction must exist transaction, also new connection. transaction can also aborted dbRollback(). data written transaction must removed transaction rolled back. example, record missing transaction started created transaction must exist anymore rollback. Disconnection connection open transaction effectively rolls back transaction. data written transaction must removed transaction rolled back. behavior specified arguments passed functions. particular, RSQLite issues named transactions support nesting name argument set. transaction isolation level specified DBI.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/reference/transactions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Begin/commit/rollback SQL transactions — dbBegin","text":"","code":"con <- dbConnect(RSQLite::SQLite(), \":memory:\")  dbWriteTable(con, \"cash\", data.frame(amount = 100)) dbWriteTable(con, \"account\", data.frame(amount = 2000))  # All operations are carried out as logical unit: dbBegin(con) withdrawal <- 300 dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal)) #> [1] 1 dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal)) #> [1] 1 dbCommit(con)  dbReadTable(con, \"cash\") #>   amount #> 1    400 dbReadTable(con, \"account\") #>   amount #> 1   1700  # Rolling back after detecting negative value on account: dbBegin(con) withdrawal <- 5000 dbExecute(con, \"UPDATE cash SET amount = amount + ?\", list(withdrawal)) #> [1] 1 dbExecute(con, \"UPDATE account SET amount = amount - ?\", list(withdrawal)) #> [1] 1 if (dbReadTable(con, \"account\")$amount >= 0) {   dbCommit(con) } else {   dbRollback(con) }  dbReadTable(con, \"cash\") #>   amount #> 1    400 dbReadTable(con, \"account\") #>   amount #> 1   1700  dbDisconnect(con)"},{"path":"https://dbi.r-dbi.org/dev/security.html","id":null,"dir":"","previous_headings":"","what":"Process for reporting security vulnerabilities","title":"Process for reporting security vulnerabilities","text":"reporting security vulnerability, please e-mail package maintainer krlmlr+r@mailbox.org instructions. include confidential information e-mail.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-1-2-0-9003","dir":"Changelog","previous_headings":"","what":"Documentation","title":"DBI 1.2.0.9003 (2023-12-23)","text":"Use dbitemplate (@maelle, #442).","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"chore-1-2-0-9002","dir":"Changelog","previous_headings":"","what":"Chore","title":"DBI 1.2.0.9002 (2023-12-22)","text":"Change maintainer e-mail. Revert “Back auto-check train” reverts commit 53c84f4466aa727f39775ac4d272645e19d20400.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-1209001-2023-12-21","dir":"Changelog","previous_headings":"","what":"DBI 1.2.0.9001 (2023-12-21)","title":"DBI 1.2.0.9001 (2023-12-21)","text":"Merge branch ‘cran-1.2.0’.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-1209000-2023-12-20","dir":"Changelog","previous_headings":"","what":"DBI 1.2.0.9000 (2023-12-20)","title":"DBI 1.2.0.9000 (2023-12-20)","text":"Merge branch ‘cran-1.2.0’.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"breaking-changes-1-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"DBI 1.2.0 (2023-12-20)","text":"dbUnquoteIdentifier() creates Id() objects without component names allows non-NA character input (#421, #422).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"features-1-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"DBI 1.2.0 (2023-12-20)","text":"New generics dbSendQueryArrow(), dbFetchArrow(), dbGetQueryArrow(), dbReadTableArrow(), dbWriteTableArrow() (@nbenn, #390), dbCreateTableArrow(), dbAppendTableArrow() (#396), dbBindArrow() (#415) dbFetchArrowChunk() (#424), default implementations via nanoarrow (#414). Id() now accepts unnamed components (#417). names provided, components arranged SQL order (@eauleaf, #427). New dbIsValid() method \"DBIResultArrowDefault\" objects implemented DBI (#425). Implement dbiDataType() objects class \"blob\".","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-1-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"DBI 1.2.0 (2023-12-20)","text":"Update pkgdown template (@maelle, #428, #438, #437). Clarify repeated parameter binding (#430). Deal sundown https://relational.fit.cvut.cz (#423). Correct vignette titles (#419). Harmonize table documentation (#400). Tweak typo, add families data retrieval command execution.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"testing-1-2-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"DBI 1.2.0 (2023-12-20)","text":"Enable BLOB tests arrow >= 10.0.0 (#395). Run DBItest SQLite part checks (#431). Fix checks without suggested packages (#420). Fix Windows tests GHA (#406). testthat::use_testthat(3) (#416).","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"features-1-1-3","dir":"Changelog","previous_headings":"","what":"Features","title":"DBI 1.1.3 (2022-06-18)","text":"dbAppendTable() accepts Id (#381, @renkun-ken).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-1-1-3","dir":"Changelog","previous_headings":"","what":"Documentation","title":"DBI 1.1.3 (2022-06-18)","text":"?dbSendQuery related methods gain section “data retrieval flow” (#386). ?dbSendStatement related methods gain section “command execution flow” (#386).","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"features-1-1-2","dir":"Changelog","previous_headings":"","what":"Features","title":"DBI 1.1.2 (2021-12-19)","text":"Use dbQuoteLiteral() default method sqlData() (#362, #371). Update specification changes DBItest 1.7.2 (#367).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-1-1-2","dir":"Changelog","previous_headings":"","what":"Documentation","title":"DBI 1.1.2 (2021-12-19)","text":"pkgdown documentation DBI generics (e.g. ?dbConnect) contains clickable links known backends (except ROracle), explanatory sentence (#360). ?Id gains better examples (#295, #370). Elaborate status dbWriteTable() documentation (#352, #372). Make method definition similar S3. setMethod() calls refer top-level functions (#368). ?dbReadTable pages gain pointers Id() SQL() (#359).","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-1-1-1","dir":"Changelog","previous_headings":"","what":"Documentation","title":"DBI 1.1.1 (2021-01-04)","text":"Expand “Get started” vignette two tutorials, basic advanced (#332, @jawond).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"bug-fixes-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"DBI 1.1.1 (2021-01-04)","text":"dbAppendTable() now allows columns named sep (#336). dbAppendTable() shows better error message input zero columns (#313). sqlInterpolate() now correctly interprets consecutive comments (#329, @rnorberg). dbQuoteLiteral() works difftime objects (#325). dbQuoteLiteral() quotes dates YYYY-MM-DD without time zone (#331).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"internal-1-1-1","dir":"Changelog","previous_headings":"","what":"Internal","title":"DBI 1.1.1 (2021-01-04)","text":"Switch GitHub Actions (#326). Update URL DESCRIPTION.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"DBI 1.1.0 (2019-12-15)","text":"New DBIConnector class (#280). Specify immediate argument dbSendQuery(), dbGetQuery(), dbSendStatement() dbExecute() (#268). Use specification dbGetInfo() (#271). dbUnquoteIdentifier() now supports Id() objects catalog members (#266, @raffscallion). also handles unquoted identifiers form table, schema.table catalog.schema.table, compatibility dbplyr.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-1-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"DBI 1.1.0 (2019-12-15)","text":"New DBI intro article (#286, @cutterkom). Add pkgdown reference index (#288). DBI specification https://dbi.r-dbi.org/dev/articles/spec now comes table contents code formatting. Update examples refer params instead param (#235). Improved documentation sqlInterpolate() (#100). Add usage SQL() sqlInterpolate() examples (#259, @renkun-ken). Improve documentation Id.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"internal-1-1-0","dir":"Changelog","previous_headings":"","what":"Internal","title":"DBI 1.1.0 (2019-12-15)","text":"Add tests dbUnquoteIdentifier() (#279, @baileych). sqlInterpolate() uses dbQuoteLiteral() instead checking type input. Avoid partial argument match dbWriteTable() (#246, @richfitz).","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"new-generics-1-0-0","dir":"Changelog","previous_headings":"","what":"New generics","title":"DBI 1.0.0 (2018-05-02)","text":"New dbAppendTable() default calls sqlAppendTableTemplate() dbExecute() param argument, without support row.names argument (#74). New dbCreateTable() default calls sqlCreateTable() dbExecute(), without support row.names argument (#74). New dbCanConnect() generic default implementation (#87). New dbIsReadOnly() generic default implementation (#190, @anhqle).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"changes-1-0-0","dir":"Changelog","previous_headings":"","what":"Changes","title":"DBI 1.0.0 (2018-05-02)","text":"sqlAppendTable() now accepts lists values argument, support lists SQL objects R 3.1. Add default implementation dbListFields(DBIConnection, Id), relies dbQuoteIdentifier(DBIConnection, Id) (#75).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-updates-1-0-0","dir":"Changelog","previous_headings":"","what":"Documentation updates","title":"DBI 1.0.0 (2018-05-02)","text":"DBI specification vignette rendered correctly installed package (#234). Update docs cope stored procedures (#242, @aryoda). Add “Additional arguments” sections examples dbGetQuery(), dbSendQuery(), dbExecute() dbSendStatement(). dbColumnInfo() method now fully specified (#75). dbListFields() method now fully specified (#75). dynamic list methods help pages doesn’t contain methods DBI anymore.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"bug-fixes-1-0-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"DBI 1.0.0 (2018-05-02)","text":"Pass missing value argument secondary dbWriteTable() call (#737, @jimhester). Id class now uses <Id> <Table> printing. default dbUnquoteIdentifier() implementation now complies spec.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"breaking-changes-0-8","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"DBI 0.8 (2018-02-24)","text":"SQL() now strips names output names argument unset. dbReadTable(), dbWriteTable(), dbExistsTable(), dbRemoveTable(), dbListFields() generics now specialize first two arguments support implementations Id S4 class type second argument. packages may need update documentation satisfy R CMD check .","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"new-generics-0-8","dir":"Changelog","previous_headings":"","what":"New generics","title":"DBI 0.8 (2018-02-24)","text":"Schema support: Export Id(), new generics dbListObjects() dbUnquoteIdentifier(), methods Id call dbQuoteIdentifier() forward (#220). New dbQuoteLiteral() generic. default implementation uses switchpatch avoid dispatch ambiguities, forwards dbQuoteString() character vectors. Backends may override methods also dispatch second argument, case also override \"SQL\" class necessary (#172).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"default-implementations-0-8","dir":"Changelog","previous_headings":"","what":"Default implementations","title":"DBI 0.8 (2018-02-24)","text":"Default implementations dbQuoteIdentifier() dbQuoteLiteral() preserve names, default implementation dbQuoteString() strips names (#173). Specialized methods dbQuoteString() dbQuoteIdentifier() available , compatibility clients use getMethod() access (#218). Add default implementation dbListFields(). default implementation dbReadTable() now row.names = FALSE default also supports row.names = NULL (#186).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"api-changes-0-8","dir":"Changelog","previous_headings":"","what":"API changes","title":"DBI 0.8 (2018-02-24)","text":"SQL() function gains optional names argument can used assign names SQL strings.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"deprecated-generics-0-8","dir":"Changelog","previous_headings":"","what":"Deprecated generics","title":"DBI 0.8 (2018-02-24)","text":"dbListConnections() soft-deprecated documentation. dbListResults() deprecated documentation (#58). dbGetException() soft-deprecated documentation (#51). deprecated print.list.pairs() removed.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"bug-fixes-0-8","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"DBI 0.8 (2018-02-24)","text":"Fix dbDataType() AsIs object (#198, @yutannihilation). Fix dbQuoteString() dbQuoteIdentifier() ignore invalid UTF-8 strings (r-dbi/DBItest#156).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"documentation-0-8","dir":"Changelog","previous_headings":"","what":"Documentation","title":"DBI 0.8 (2018-02-24)","text":"Help pages generics now contain dynamic list methods implemented DBI backends (#162). sqlInterpolate() now supports named positional variables (#216, @hannesmuehleisen). Point db.rstudio.com (@wibeasley, #209). Reflect new ‘r-dbi’ organization DESCRIPTION (@wibeasley, #207).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"internal-0-8","dir":"Changelog","previous_headings":"","what":"Internal","title":"DBI 0.8 (2018-02-24)","text":"Using switchpatch second argument default implementations dbQuoteString() dbQuoteIdentifier().","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-07-2017-06-17","dir":"Changelog","previous_headings":"","what":"DBI 0.7 (2017-06-17)","title":"DBI 0.7 (2017-06-17)","text":"Import updated specs DBItest. default implementation dbGetQuery() now accepts n argument forwards dbFetch(). warning pending rows issued anymore (#76). Require R >= 3.0.0 (slots argument setClass()) (#169, @mvkorpel).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-06-1-2017-04-01","dir":"Changelog","previous_headings":"","what":"DBI 0.6-1 (2017-04-01)","title":"DBI 0.6-1 (2017-04-01)","text":"Fix dbReadTable() backends provide implementation (#171).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-06-2017-03-08","dir":"Changelog","previous_headings":"","what":"DBI 0.6 (2017-03-08)","title":"DBI 0.6 (2017-03-08)","text":"Deprecated dbDriver() dbUnloadDriver() documentation (#21). Renamed arguments sqlInterpolate() sqlParseVariables() consistent rest interface, added .dots argument sqlParseVariables. DBI drivers now expected implement sqlParseVariables(conn, sql, ..., .dots) sqlInterpolate(conn, sql, ...) (#147). Removed valueClass = \"logical\" generics return value meaningless, allow backends return invisibly (#135). Avoiding using braces definitions generics possible, standard generics can detected (#146). Added default implementation dbReadTable(). standard generics required ellipsis (test), future extensibility. Improved default implementation dbQuoteString() dbQuoteIdentifier() (#77). Removed tryCatch() call dbGetQuery() (#113). Finalized first draft DBI specification, now vignette. methods now draw documentation DBItest, behavior finally decided don’t yet yet. Removed max.connections requirement documentation (#56). Improved dbBind() documentation example (#136). Change omegahat.org URL omegahat.net, particular document still doesn’t exist new domain. Use roxygen2 inheritance copy DBI specification package. Use tic package building documentation. Use markdown documentation.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-05-1-2016-09-09","dir":"Changelog","previous_headings":"","what":"DBI 0.5-1 (2016-09-09)","title":"DBI 0.5-1 (2016-09-09)","text":"Documentation example updates.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-05-2016-08-11-cran-release","dir":"Changelog","previous_headings":"","what":"DBI 0.5 (2016-08-11, CRAN release)","title":"DBI 0.5 (2016-08-11, CRAN release)","text":"dbDataType() maps character values \"TEXT\" default (#102). default implementation dbQuoteString() doesn’t call encodeString() anymore: Neither SQLite Postgres understand e.g. \\n string literal, SQLite, Postgres, MySQL accept embedded newline (#121). New dbSendStatement() generic, forwards dbSendQuery() default (#20, #132). New dbExecute(), calls dbSendStatement() default (#109, @bborgesr). New dbWithTransaction() calls dbBegin() dbCommit(), dbRollback() failure (#110, @bborgesr). New dbBreak() function allows aborting within dbWithTransaction() (#115, #133). Export dbFetch() dbQuoteString() methods. One example per function (except functions scheduled deprecation) (#67). Consistent layout identifier naming. Better documentation generics adding links class related generics “See also” section “DBI… generics” (#130). S4 documentation directed hidden page unclutter documentation index (#59). Fix two minor vignette typos (#124, @mdsumner). Add package documentation. Remove misleading parts dbConnect() documentation (#118). Remove misleading link dbDataType() documentation. Remove full stop documentation titles. New help topic “DBIspec” contains full DBI specification (currently work progress) (#129). HTML documentation generated staticdocs now uploaded https://rstats-db.github.io/DBI build “production” branch (#131). minor changes fixes. Use contains argument instead representation() denote base classes (#93). Remove redundant declaration transaction methods (#110, @bborgesr).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-04-1-2016-05-07-cran-release","dir":"Changelog","previous_headings":"","what":"DBI 0.4-1 (2016-05-07, CRAN release)","title":"DBI 0.4-1 (2016-05-07, CRAN release)","text":"default show() implementations silently ignore errors. DBI drivers (e.g., RPostgreSQL) might fail implement dbIsValid() methods used.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"dbi-04-2016-04-30","dir":"Changelog","previous_headings":"","what":"DBI 0.4 (2016-04-30)","title":"DBI 0.4 (2016-04-30)","text":"New package maintainer: Kirill Müller. dbGetInfo() gains default method extracts information dbGetStatement(), dbGetRowsAffected(), dbHasCompleted(), dbGetRowCount(). means drivers longer need implement dbGetInfo() (may deprecated anyway point) (#55). dbDataType() dbQuoteString() now properly exported. default implementation dbDataType() (powered dbiDataType()) now also supports difftime AsIs objects lists raw (#70). Default dbGetQuery() method now always calls dbFetch(), tryCatch() block. New generic dbBind() binding values parameterised query. DBI gains number SQL generation functions. make easier write backends implementing common operations slightly tricky absolutely correctly. sqlCreateTable() sqlAppendTable() create tables data frame insert rows existing table. power implementations dbWriteTable(). sqlAppendTable() useful databases support parameterised queries. sqlRownamesToColumn() sqlColumnToRownames() provide standard way translating row names database. sqlInterpolate() sqlParseVariables() allows databases without native parameterised queries use parameterised queries avoid SQL injection attacks. sqlData() new generic converts data frame data frame suitable sending database. used (e.g.) ensure character vectors encoded UTF-8, convert R varible types (like factor) types supported database. sqlParseVariablesImpl() now implemented purely R, full test coverage (#83, @hannesmuehleisen). dbiCheckCompliance() removed, functionality now available DBItest package (#80). Added default show() methods driver, connection results. New concrete ANSIConnection class ANSI() function generate dummy ANSI compliant connection useful testing. Default dbQuoteString() dbQuoteIdentifer() methods now use encodeString() special characters like \\n correctly escaped. dbQuoteString() converts NA (unquoted) NULL. initial DBI proposal DBI version 1 specification now included vignette. mostly historical interest. new DBItest package described vignette. Deprecated print.list.pairs(). Removed unused dbi_dep().","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-031","dir":"Changelog","previous_headings":"","what":"Version 0.3.1","title":"Version 0.3.1","text":"Actually export dbIsValid() :/ dbGetQuery() uses dbFetch() default implementation.","code":""},{"path":[]},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"new-and-enhanced-generics-0-3-0","dir":"Changelog","previous_headings":"","what":"New and enhanced generics","title":"Version 0.3.0","text":"dbIsValid() returns logical value describing whether connection result set (object) still valid. (#12). dbQuoteString() dbQuoteIdentifier() implement database specific quoting mechanisms. dbFetch() added alias fetch() provide consistent name. Implementers define methods fetch() dbFetch() fetch() deprecated 2015. now, default method dbFetch() calls fetch(). dbBegin() begins transaction (#17). supported, DB specific methods throw error (dbCommit() dbRollback()).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"new-default-methods-0-3-0","dir":"Changelog","previous_headings":"","what":"New default methods","title":"Version 0.3.0","text":"dbGetStatement(), dbGetRowsAffected(), dbHasCompleted(), dbGetRowCount() gain default methods extract appropriate elements dbGetInfo(). means drivers longer need implement methods (#13). dbGetQuery() gains default method DBIConnection uses dbSendQuery(), fetch() dbClearResult().","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"deprecated-features-0-3-0","dir":"Changelog","previous_headings":"","what":"Deprecated features","title":"Version 0.3.0","text":"following functions soft-deprecated. going away, developers use DBI begin preparing. formal deprecation process begin July 2015, function emit warnings use. fetch() replaced dbFetch(). make.db.names(), isSQLKeyword() SQLKeywords(): black list based approach fundamentally flawed; instead quote strings identifiers dbQuoteIdentifier() dbQuoteString(). dbGetDBIVersion() deprecated since ’s now just thin wrapper around packageVersion(\"DBI\"). dbSetDataMappings() (#9) dbCallProc() (#7) deprecated implementations ever provided.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"other-improvements-0-3-0","dir":"Changelog","previous_headings":"","what":"Other improvements","title":"Version 0.3.0","text":"dbiCheckCompliance() makes easier implementors check package compliance DBI specification. examples now use RSQLite package can easily try code samples (#4). dbDriver() gains effective search mechanism doesn’t rely packages loaded (#1). DBI converted use roxygen2 documentation, now functions documentation files. love feedback make documentation better!","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-02-7","dir":"Changelog","previous_headings":"","what":"Version 0.2-7","title":"Version 0.2-7","text":"Trivial changes (updated package fields, daj)","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-02-6","dir":"Changelog","previous_headings":"","what":"Version 0.2-6","title":"Version 0.2-6","text":"Removed deprecated Rd files (thanks Prof. Ripley)","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-02-5","dir":"Changelog","previous_headings":"","what":"Version 0.2-5","title":"Version 0.2-5","text":"Code cleanups contributed Matthias Burger: avoid partial argument name matching use TRUE/FALSE, T/F. Change behavior make.db.names.default quote SQL keywords allow.keywords FALSE. Previously, SQL keywords name mangled underscores digit. Now quoted using ‘“’.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-02-4","dir":"Changelog","previous_headings":"","what":"Version 0.2-4","title":"Version 0.2-4","text":"Changed license GPL LPGL Fixed trivial typo documentation","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-10","dir":"Changelog","previous_headings":"","what":"Version 0.1-10","title":"Version 0.1-10","text":"Fixed documentation typos.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-9","dir":"Changelog","previous_headings":"","what":"Version 0.1-9","title":"Version 0.1-9","text":"Trivial changes.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-8","dir":"Changelog","previous_headings":"","what":"Version 0.1-8","title":"Version 0.1-8","text":"trivial change due package.description() deprecated 1.9.0.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-7","dir":"Changelog","previous_headings":"","what":"Version 0.1-7","title":"Version 0.1-7","text":"substantial re-formatting documentation due incompatibilities introduced 1.8.0 S4 method documentation. contents changed (modulo fixing typos). Thanks Kurt Hornik John Chambers help.","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-6","dir":"Changelog","previous_headings":"","what":"Version 0.1-6","title":"Version 0.1-6","text":"Trivial documentation changes (R CMD check’s sake)","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-5","dir":"Changelog","previous_headings":"","what":"Version 0.1-5","title":"Version 0.1-5","text":"Removed duplicated setGeneric(“dbSetDataMappings”)","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-4","dir":"Changelog","previous_headings":"","what":"Version 0.1-4","title":"Version 0.1-4","text":"Removed “valueClass” generic functions, namely, dbListConnections, dbListResults, dbGetException, dbGetQuery, dbGetInfo. reason methods generics potentially return different classes objects (e.g., call dbGetInfo(res) return list name-value pairs, dbGetInfo(res, “statement”) character vector). Added 00Index inst/doc Added dbGetDBIVersion() (simple wrapper package.description).","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-3","dir":"Changelog","previous_headings":"","what":"Version 0.1-3","title":"Version 0.1-3","text":"??? Minor changes?","code":""},{"path":"https://dbi.r-dbi.org/dev/news/index.html","id":"version-01-2","dir":"Changelog","previous_headings":"","what":"Version 0.1-2","title":"Version 0.1-2","text":"implementation based version 4 classes methods. Incorporated (mostly Tim Keitt’s) comments.","code":""}]

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transactions.R
\name{dbWithTransaction}
\alias{dbWithTransaction}
\alias{dbWithTransaction,DBIConnection-method}
\title{Self-contained SQL transactions.}
\usage{
dbWithTransaction(conn, code)
}
\arguments{
\item{conn}{A \code{\linkS4class{DBIConnection}} object, as produced by
\code{\link{dbConnect}}.}

\item{code}{An arbitrary block of R code}
}
\value{
The result of the evaluation of \code{code}
}
\description{
Given that \code{\link{transactions}} are implemented, then this function
allows you pass in code that is treated as a transaction. The advantage is
that you don't have to remember to do \code{dbBegin} and \code{dbCommit} or
\code{dbRollback} -- that is all taken care of.
}
\section{Side Effects}{

The transaction in \code{code} on the connection \code{conn} is committed
or rolled back. The \code{code} chunk may also also modify the local R
environment.
}
\examples{
con <- dbConnect(RSQLite::SQLite(), ":memory:")
dbWriteTable(con, "cars", head(cars, 3))
dbReadTable(con, "cars")   # there's 3 rows!
## successful transaction
dbWithTransaction(con, {
  dbExecute(con, "INSERT INTO cars (speed, dist) VALUES (1, 1);")
  dbExecute(con, "INSERT INTO cars (speed, dist) VALUES (2, 2);")
  dbExecute(con, "INSERT INTO cars (speed, dist) VALUES (3, 3);")
})
dbReadTable(con, "cars")   # there's now 6 rows!

\dontrun{
## unsuccessful transaction -- note the missing comma
dbWithTransaction(con,{
  dbExecute(con, "INSERT INTO cars (speed, dist) VALUES (1, 1);")
  dbExecute(con, "INSERT INTO cars (speed dist) VALUES (2, 2);")
  dbExecute(con, "INSERT INTO cars (speed, dist) VALUES (3, 3);")
})
dbReadTable(con, "cars")   # nothing was changed
}
dbDisconnect(con)
}

